/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module TagLib.APE.APE;

static import TagLibD_im;

static import std.conv;
static import std.string;
import std.conv;
import std.string;
import core.stdc.stdlib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;


class Footer {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Footer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_APE_Footer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_APE_Footer__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_APE_Footer__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public uint _version() const {
    auto ret = TagLibD_im.TagLib_APE_Footer__version(cast(void*)swigCPtr);
    return ret;
  }

  public bool headerPresent() const {
    bool ret = TagLibD_im.TagLib_APE_Footer_headerPresent(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool footerPresent() const {
    bool ret = TagLibD_im.TagLib_APE_Footer_footerPresent(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isHeader() const {
    bool ret = TagLibD_im.TagLib_APE_Footer_isHeader(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setHeaderPresent(bool b) const {
    TagLibD_im.TagLib_APE_Footer_setHeaderPresent(cast(void*)swigCPtr, b);
  }

  public uint itemCount() const {
    auto ret = TagLibD_im.TagLib_APE_Footer_itemCount(cast(void*)swigCPtr);
    return ret;
  }

  public void setItemCount(uint s) {
    TagLibD_im.TagLib_APE_Footer_setItemCount(cast(void*)swigCPtr, s);
  }

  public uint tagSize() const {
    auto ret = TagLibD_im.TagLib_APE_Footer_tagSize(cast(void*)swigCPtr);
    return ret;
  }

  public uint completeTagSize() const {
    auto ret = TagLibD_im.TagLib_APE_Footer_completeTagSize(cast(void*)swigCPtr);
    return ret;
  }

  public void setTagSize(uint s) {
    TagLibD_im.TagLib_APE_Footer_setTagSize(cast(void*)swigCPtr, s);
  }

  public static uint size() {
    auto ret = TagLibD_im.TagLib_APE_Footer_size();
    return ret;
  }

  public static TagLib.TagLib.ByteVector fileIdentifier() {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_APE_Footer_fileIdentifier(), true);
    return ret;
  }

  public void setData(TagLib.TagLib.ByteVector data) {
    TagLibD_im.TagLib_APE_Footer_setData(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public TagLib.TagLib.ByteVector renderFooter() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_APE_Footer_renderFooter(cast(void*)swigCPtr), true);
    return ret;
  }

  public TagLib.TagLib.ByteVector renderHeader() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_APE_Footer_renderHeader(cast(void*)swigCPtr), true);
    return ret;
  }
}

class Item {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Item obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_APE_Item(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum ItemTypes {
    Text = 0,
    Binary = 1,
    Locator = 2
  }

  public this() {
    this(TagLibD_im.new_TagLib_APE_Item__SWIG_0(), true);
  }

  public this(string key, string value) {
    this(TagLibD_im.new_TagLib_APE_Item__SWIG_1(cast(char*)toStringz(key), cast(char*)toStringz(value)), true);
  }

  public this(string key, TagLib.TagLib.StringList values) {
    this(TagLibD_im.new_TagLib_APE_Item__SWIG_2(cast(char*)toStringz(key), TagLib.TagLib.StringList.swigGetCPtr(values)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public this(Item item) {
    this(TagLibD_im.new_TagLib_APE_Item__SWIG_3(Item.swigGetCPtr(item)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public string key() const {
        char* cstr = TagLibD_im.TagLib_APE_Item_key(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.ByteVector value() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_APE_Item_value(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setKey(string key) {
    TagLibD_im.TagLib_APE_Item_setKey(cast(void*)swigCPtr, cast(char*)toStringz(key));
  }

  public void setValue(string value) {
    TagLibD_im.TagLib_APE_Item_setValue(cast(void*)swigCPtr, cast(char*)toStringz(value));
  }

  public void setValues(TagLib.TagLib.StringList values) {
    TagLibD_im.TagLib_APE_Item_setValues(cast(void*)swigCPtr, TagLib.TagLib.StringList.swigGetCPtr(values));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void appendValue(string value) {
    TagLibD_im.TagLib_APE_Item_appendValue(cast(void*)swigCPtr, cast(char*)toStringz(value));
  }

  public void appendValues(TagLib.TagLib.StringList values) {
    TagLibD_im.TagLib_APE_Item_appendValues(cast(void*)swigCPtr, TagLib.TagLib.StringList.swigGetCPtr(values));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public int size() const {
    auto ret = TagLibD_im.TagLib_APE_Item_size(cast(void*)swigCPtr);
    return ret;
  }

  public string toString() const {
        char* cstr = TagLibD_im.TagLib_APE_Item_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.StringList toStringList() const {
    TagLib.TagLib.StringList ret = new TagLib.TagLib.StringList(TagLibD_im.TagLib_APE_Item_toStringList(cast(void*)swigCPtr), true);
    return ret;
  }

  public TagLib.TagLib.StringList values() const {
    TagLib.TagLib.StringList ret = new TagLib.TagLib.StringList(TagLibD_im.TagLib_APE_Item_values(cast(void*)swigCPtr), true);
    return ret;
  }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_APE_Item_render(cast(void*)swigCPtr), true);
    return ret;
  }

  public void parse(TagLib.TagLib.ByteVector data) {
    TagLibD_im.TagLib_APE_Item_parse(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void setReadOnly(bool readOnly) {
    TagLibD_im.TagLib_APE_Item_setReadOnly(cast(void*)swigCPtr, readOnly);
  }

  public bool isReadOnly() const {
    bool ret = TagLibD_im.TagLib_APE_Item_isReadOnly(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setType(Item.ItemTypes type) {
    TagLibD_im.TagLib_APE_Item_setType(cast(void*)swigCPtr, cast(int)type);
  }

  public Item.ItemTypes type() const {
    Item.ItemTypes ret = cast(Item.ItemTypes)TagLibD_im.TagLib_APE_Item_type(cast(void*)swigCPtr);
    return ret;
  }

  public bool isEmpty() const {
    bool ret = TagLibD_im.TagLib_APE_Item_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}

class Tag : TagLib.TagLib.Tag {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_APE_Tag_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(Tag obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_APE_Tag(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_APE_Tag__SWIG_0(), true);
  }

  public this(TagLib.TagLib.File file, int footerLocation) {
    this(TagLibD_im.new_TagLib_APE_Tag__SWIG_1(TagLib.TagLib.File.swigGetCPtr(file), footerLocation), true);
  }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_APE_Tag_render(cast(void*)swigCPtr), true);
    return ret;
  }

  public static TagLib.TagLib.ByteVector fileIdentifier() {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_APE_Tag_fileIdentifier(), true);
    return ret;
  }

  @property string title() const {
        char* cstr = TagLibD_im.TagLib_APE_Tag_title__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string artist() const {
        char* cstr = TagLibD_im.TagLib_APE_Tag_artist__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string album() const {
        char* cstr = TagLibD_im.TagLib_APE_Tag_album__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string comment() const {
        char* cstr = TagLibD_im.TagLib_APE_Tag_comment__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string genre() const {
        char* cstr = TagLibD_im.TagLib_APE_Tag_genre__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property uint year() const {
    auto ret = TagLibD_im.TagLib_APE_Tag_year__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  @property uint track() const {
    auto ret = TagLibD_im.TagLib_APE_Tag_track__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  @property void title(string s) {
    TagLibD_im.TagLib_APE_Tag_title__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void artist(string s) {
    TagLibD_im.TagLib_APE_Tag_artist__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void album(string s) {
    TagLibD_im.TagLib_APE_Tag_album__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void comment(string s) {
    TagLibD_im.TagLib_APE_Tag_comment__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void genre(string s) {
    TagLibD_im.TagLib_APE_Tag_genre__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void year(uint i) {
    TagLibD_im.TagLib_APE_Tag_year__SWIG_1(cast(void*)swigCPtr, i);
  }

  @property void track(uint i) {
    TagLibD_im.TagLib_APE_Tag_track__SWIG_1(cast(void*)swigCPtr, i);
  }

  public Footer footer() const {
    void* cPtr = TagLibD_im.TagLib_APE_Tag_footer(cast(void*)swigCPtr);
    Footer ret = (cPtr is null) ? null : new Footer(cPtr, false);
    return ret;
  }

  public void removeItem(string key) {
    TagLibD_im.TagLib_APE_Tag_removeItem(cast(void*)swigCPtr, cast(char*)toStringz(key));
  }

  public void addValue(string key, string value, bool replace) {
    TagLibD_im.TagLib_APE_Tag_addValue__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(key), cast(char*)toStringz(value), replace);
  }

  public void addValue(string key, string value) {
    TagLibD_im.TagLib_APE_Tag_addValue__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(key), cast(char*)toStringz(value));
  }

  public void setItem(string key, Item item) {
    TagLibD_im.TagLib_APE_Tag_setItem(cast(void*)swigCPtr, cast(char*)toStringz(key), Item.swigGetCPtr(item));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }
}
