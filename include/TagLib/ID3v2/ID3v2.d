/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module TagLib.ID3v2.ID3v2;

static import TagLibD_im;

static import std.conv;
static import std.string;
import std.conv;
import std.string;
import core.stdc.stdlib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLibD;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLibD;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.TagLib;


class Frame {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Frame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_Frame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public TagLib.TagLib.ByteVector frameID() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_Frame_frameID(cast(void*)swigCPtr), true);
    return ret;
  }

  public uint size() const {
    auto ret = TagLibD_im.TagLib_ID3v2_Frame_size(cast(void*)swigCPtr);
    return ret;
  }

  public static uint headerSize() {
    auto ret = TagLibD_im.TagLib_ID3v2_Frame_headerSize__SWIG_0();
    return ret;
  }

  public static uint headerSize(uint arg0) {
    auto ret = TagLibD_im.TagLib_ID3v2_Frame_headerSize__SWIG_1(arg0);
    return ret;
  }

  public void setData(TagLib.TagLib.ByteVector data) {
    TagLibD_im.TagLib_ID3v2_Frame_setData(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void setText(string text) {
    TagLibD_im.TagLib_ID3v2_Frame_setText(cast(void*)swigCPtr, cast(char*)toStringz(text));
  }

  public string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_Frame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_Frame_render(cast(void*)swigCPtr), true);
    return ret;
  }
}

class Header {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Header obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_Header(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_Header__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_Header__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public uint majorVersion() const {
    auto ret = TagLibD_im.TagLib_ID3v2_Header_majorVersion(cast(void*)swigCPtr);
    return ret;
  }

  public void setMajorVersion(uint arg0) {
    TagLibD_im.TagLib_ID3v2_Header_setMajorVersion(cast(void*)swigCPtr, arg0);
  }

  public uint revisionNumber() const {
    auto ret = TagLibD_im.TagLib_ID3v2_Header_revisionNumber(cast(void*)swigCPtr);
    return ret;
  }

  public bool unsynchronisation() const {
    bool ret = TagLibD_im.TagLib_ID3v2_Header_unsynchronisation(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool extendedHeader() const {
    bool ret = TagLibD_im.TagLib_ID3v2_Header_extendedHeader(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool experimentalIndicator() const {
    bool ret = TagLibD_im.TagLib_ID3v2_Header_experimentalIndicator(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool footerPresent() const {
    bool ret = TagLibD_im.TagLib_ID3v2_Header_footerPresent(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public uint tagSize() const {
    auto ret = TagLibD_im.TagLib_ID3v2_Header_tagSize(cast(void*)swigCPtr);
    return ret;
  }

  public uint completeTagSize() const {
    auto ret = TagLibD_im.TagLib_ID3v2_Header_completeTagSize(cast(void*)swigCPtr);
    return ret;
  }

  public void setTagSize(uint s) {
    TagLibD_im.TagLib_ID3v2_Header_setTagSize(cast(void*)swigCPtr, s);
  }

  public static uint size() {
    auto ret = TagLibD_im.TagLib_ID3v2_Header_size();
    return ret;
  }

  public static TagLib.TagLib.ByteVector fileIdentifier() {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_Header_fileIdentifier(), true);
    return ret;
  }

  public void setData(TagLib.TagLib.ByteVector data) {
    TagLibD_im.TagLib_ID3v2_Header_setData(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_Header_render(cast(void*)swigCPtr), true);
    return ret;
  }
}

class ExtendedHeader {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ExtendedHeader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_ExtendedHeader(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_ExtendedHeader(), true);
  }

  public uint size() const {
    auto ret = TagLibD_im.TagLib_ID3v2_ExtendedHeader_size(cast(void*)swigCPtr);
    return ret;
  }

  public void setData(TagLib.TagLib.ByteVector data) {
    TagLibD_im.TagLib_ID3v2_ExtendedHeader_setData(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }
}

class Footer {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Footer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_Footer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_Footer(), true);
  }

  public static uint size() {
    auto ret = TagLibD_im.TagLib_ID3v2_Footer_size();
    return ret;
  }

  public TagLib.TagLib.ByteVector render(Header header) const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_Footer_render(cast(void*)swigCPtr, Header.swigGetCPtr(header)), true);
    return ret;
  }
}

class FrameFactory {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(FrameFactory obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
      }
    }
  }

  public static FrameFactory instance() {
    void* cPtr = TagLibD_im.TagLib_ID3v2_FrameFactory_instance();
    FrameFactory ret = (cPtr is null) ? null : new FrameFactory(cPtr, false);
    return ret;
  }

  public Frame createFrame(TagLib.TagLib.ByteVector data, bool synchSafeInts) const {
    void* cPtr = TagLibD_im.TagLib_ID3v2_FrameFactory_createFrame__SWIG_0(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data), synchSafeInts);
    Frame ret = (cPtr is null) ? null : new Frame(cPtr, false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public Frame createFrame(TagLib.TagLib.ByteVector data, uint arg1) const {
    void* cPtr = TagLibD_im.TagLib_ID3v2_FrameFactory_createFrame__SWIG_1(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data), arg1);
    Frame ret = (cPtr is null) ? null : new Frame(cPtr, false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public Frame createFrame(TagLib.TagLib.ByteVector data) const {
    void* cPtr = TagLibD_im.TagLib_ID3v2_FrameFactory_createFrame__SWIG_2(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data));
    Frame ret = (cPtr is null) ? null : new Frame(cPtr, false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public Frame createFrame(TagLib.TagLib.ByteVector data, Header tagHeader) const {
    void* cPtr = TagLibD_im.TagLib_ID3v2_FrameFactory_createFrame__SWIG_3(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(data), Header.swigGetCPtr(tagHeader));
    Frame ret = (cPtr is null) ? null : new Frame(cPtr, false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }
}

class Tag : TagLib.TagLib.Tag {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_Tag_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(Tag obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_Tag(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_Tag__SWIG_0(), true);
  }

  public this(TagLib.TagLib.File file, int tagOffset, FrameFactory factory) {
    this(TagLibD_im.new_TagLib_ID3v2_Tag__SWIG_1(TagLib.TagLib.File.swigGetCPtr(file), tagOffset, FrameFactory.swigGetCPtr(factory)), true);
  }

  public this(TagLib.TagLib.File file, int tagOffset) {
    this(TagLibD_im.new_TagLib_ID3v2_Tag__SWIG_2(TagLib.TagLib.File.swigGetCPtr(file), tagOffset), true);
  }

  @property string title() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_Tag_title__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string artist() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_Tag_artist__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string album() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_Tag_album__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string comment() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_Tag_comment__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string genre() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_Tag_genre__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property uint year() const {
    auto ret = TagLibD_im.TagLib_ID3v2_Tag_year(cast(void*)swigCPtr);
    return ret;
  }

  alias TagLib.TagLib.Tag.year year;

  @property uint track() const {
    auto ret = TagLibD_im.TagLib_ID3v2_Tag_track__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  @property void title(string s) {
    TagLibD_im.TagLib_ID3v2_Tag_title__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void artist(string s) {
    TagLibD_im.TagLib_ID3v2_Tag_artist__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void album(string s) {
    TagLibD_im.TagLib_ID3v2_Tag_album__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void comment(string s) {
    TagLibD_im.TagLib_ID3v2_Tag_comment__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void genre(string s) {
    TagLibD_im.TagLib_ID3v2_Tag_genre__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void Year(uint i) {
    TagLibD_im.TagLib_ID3v2_Tag_Year(cast(void*)swigCPtr, i);
  }

  @property void track(uint i) {
    TagLibD_im.TagLib_ID3v2_Tag_track__SWIG_1(cast(void*)swigCPtr, i);
  }

  public override bool isEmpty() const {
    bool ret = TagLibD_im.TagLib_ID3v2_Tag_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public Header header() const {
    void* cPtr = TagLibD_im.TagLib_ID3v2_Tag_header(cast(void*)swigCPtr);
    Header ret = (cPtr is null) ? null : new Header(cPtr, false);
    return ret;
  }

  public ExtendedHeader extendedHeader() const {
    void* cPtr = TagLibD_im.TagLib_ID3v2_Tag_extendedHeader(cast(void*)swigCPtr);
    ExtendedHeader ret = (cPtr is null) ? null : new ExtendedHeader(cPtr, false);
    return ret;
  }

  public Footer footer() const {
    void* cPtr = TagLibD_im.TagLib_ID3v2_Tag_footer(cast(void*)swigCPtr);
    Footer ret = (cPtr is null) ? null : new Footer(cPtr, false);
    return ret;
  }

  public TagLibD.SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ListT_Frame_p_t_t frameListMap() const {
    TagLibD.SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ListT_Frame_p_t_t ret = new TagLibD.SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ListT_Frame_p_t_t(TagLibD_im.TagLib_ID3v2_Tag_frameListMap(cast(void*)swigCPtr), false);
    return ret;
  }

  public TagLibD.SWIGTYPE_p_TagLib__ListT_Frame_p_t frameList() const {
    TagLibD.SWIGTYPE_p_TagLib__ListT_Frame_p_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_Frame_p_t(TagLibD_im.TagLib_ID3v2_Tag_frameList__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public TagLibD.SWIGTYPE_p_TagLib__ListT_Frame_p_t frameList(TagLib.TagLib.ByteVector frameID) const {
    TagLibD.SWIGTYPE_p_TagLib__ListT_Frame_p_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_Frame_p_t(TagLibD_im.TagLib_ID3v2_Tag_frameList__SWIG_1(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(frameID)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public void addFrame(Frame frame) {
    TagLibD_im.TagLib_ID3v2_Tag_addFrame(cast(void*)swigCPtr, Frame.swigGetCPtr(frame));
  }

  public void removeFrame(Frame frame, bool del) {
    TagLibD_im.TagLib_ID3v2_Tag_removeFrame__SWIG_0(cast(void*)swigCPtr, Frame.swigGetCPtr(frame), del);
  }

  public void removeFrame(Frame frame) {
    TagLibD_im.TagLib_ID3v2_Tag_removeFrame__SWIG_1(cast(void*)swigCPtr, Frame.swigGetCPtr(frame));
  }

  public void removeFrames(TagLib.TagLib.ByteVector id) {
    TagLibD_im.TagLib_ID3v2_Tag_removeFrames(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(id));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_Tag_render(cast(void*)swigCPtr), true);
    return ret;
  }
}

class AttachedPictureFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(AttachedPictureFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_AttachedPictureFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum Type {
    Other = 0x00,
    FileIcon = 0x01,
    OtherFileIcon = 0x02,
    FrontCover = 0x03,
    BackCover = 0x04,
    LeafletPage = 0x05,
    Media = 0x06,
    LeadArtist = 0x07,
    Artist = 0x08,
    Conductor = 0x09,
    Band = 0x0A,
    Composer = 0x0B,
    Lyricist = 0x0C,
    RecordingLocation = 0x0D,
    DuringRecording = 0x0E,
    DuringPerformance = 0x0F,
    MovieScreenCapture = 0x10,
    ColouredFish = 0x11,
    Illustration = 0x12,
    BandLogo = 0x13,
    PublisherLogo = 0x14
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_AttachedPictureFrame__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_AttachedPictureFrame__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string mimeType() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_mimeType(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setMimeType(string m) {
    TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_setMimeType(cast(void*)swigCPtr, cast(char*)toStringz(m));
  }

  public AttachedPictureFrame.Type type() const {
    AttachedPictureFrame.Type ret = cast(AttachedPictureFrame.Type)TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_type(cast(void*)swigCPtr);
    return ret;
  }

  public void setType(AttachedPictureFrame.Type t) {
    TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_setType(cast(void*)swigCPtr, cast(int)t);
  }

  public string description() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_description(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setDescription(string desc) {
    TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_setDescription(cast(void*)swigCPtr, cast(char*)toStringz(desc));
  }

  public TagLib.TagLib.ByteVector picture() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_picture(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setPicture(TagLib.TagLib.ByteVector p) {
    TagLibD_im.TagLib_ID3v2_AttachedPictureFrame_setPicture(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(p));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }
}

class AttachedPictureFrameV22 : AttachedPictureFrame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_AttachedPictureFrameV22_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(AttachedPictureFrameV22 obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_AttachedPictureFrameV22(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }
}

class CommentsFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_CommentsFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(CommentsFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_CommentsFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_CommentsFrame(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_CommentsFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.ByteVector language() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_CommentsFrame_language(cast(void*)swigCPtr), true);
    return ret;
  }

  public string description() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_CommentsFrame_description(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string text() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_CommentsFrame_text(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setLanguage(TagLib.TagLib.ByteVector languageCode) {
    TagLibD_im.TagLib_ID3v2_CommentsFrame_setLanguage(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(languageCode));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void setDescription(string s) {
    TagLibD_im.TagLib_ID3v2_CommentsFrame_setDescription(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public override void setText(string s) {
    TagLibD_im.TagLib_ID3v2_CommentsFrame_setText(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public static CommentsFrame findByDescription(Tag tag, string d) {
    void* cPtr = TagLibD_im.TagLib_ID3v2_CommentsFrame_findByDescription(Tag.swigGetCPtr(tag), cast(char*)toStringz(d));
    CommentsFrame ret = (cPtr is null) ? null : new CommentsFrame(cPtr, false);
    return ret;
  }
}

class GeneralEncapsulatedObjectFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(GeneralEncapsulatedObjectFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_GeneralEncapsulatedObjectFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_GeneralEncapsulatedObjectFrame__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_GeneralEncapsulatedObjectFrame__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string mimeType() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_mimeType(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setMimeType(string type) {
    TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setMimeType(cast(void*)swigCPtr, cast(char*)toStringz(type));
  }

  public string fileName() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_fileName(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setFileName(string name) {
    TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setFileName(cast(void*)swigCPtr, cast(char*)toStringz(name));
  }

  public string description() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_description(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setDescription(string desc) {
    TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setDescription(cast(void*)swigCPtr, cast(char*)toStringz(desc));
  }

  public TagLib.TagLib.ByteVector object() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_object(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setObject(TagLib.TagLib.ByteVector object) {
    TagLibD_im.TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setObject(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(object));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }
}

class PopularimeterFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_PopularimeterFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(PopularimeterFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_PopularimeterFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_PopularimeterFrame__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_PopularimeterFrame__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_PopularimeterFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string email() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_PopularimeterFrame_email(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setEmail(string email) {
    TagLibD_im.TagLib_ID3v2_PopularimeterFrame_setEmail(cast(void*)swigCPtr, cast(char*)toStringz(email));
  }

  public int rating() const {
    auto ret = TagLibD_im.TagLib_ID3v2_PopularimeterFrame_rating(cast(void*)swigCPtr);
    return ret;
  }

  public void setRating(int rating) {
    TagLibD_im.TagLib_ID3v2_PopularimeterFrame_setRating(cast(void*)swigCPtr, rating);
  }

  public uint counter() const {
    auto ret = TagLibD_im.TagLib_ID3v2_PopularimeterFrame_counter(cast(void*)swigCPtr);
    return ret;
  }

  public void setCounter(uint counter) {
    TagLibD_im.TagLib_ID3v2_PopularimeterFrame_setCounter(cast(void*)swigCPtr, counter);
  }
}

class PrivateFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_PrivateFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(PrivateFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_PrivateFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_PrivateFrame__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_PrivateFrame__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_PrivateFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string owner() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_PrivateFrame_owner(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.ByteVector data() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_PrivateFrame_data(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setOwner(string s) {
    TagLibD_im.TagLib_ID3v2_PrivateFrame_setOwner(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public void setData(TagLib.TagLib.ByteVector v) {
    TagLibD_im.TagLib_ID3v2_PrivateFrame_setData(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(v));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  alias Frame.setData setData;
}

class RelativeVolumeFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(RelativeVolumeFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_RelativeVolumeFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum ChannelType {
    Other = 0x00,
    MasterVolume = 0x01,
    FrontRight = 0x02,
    FrontLeft = 0x03,
    BackRight = 0x04,
    BackLeft = 0x05,
    FrontCentre = 0x06,
    BackCentre = 0x07,
    Subwoofer = 0x08
  }

  public this() {
    this(TagLibD_im.new_TagLib_ID3v2_RelativeVolumeFrame__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_RelativeVolumeFrame__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__RelativeVolumeFrame__ChannelType_t channels() const {
    TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__RelativeVolumeFrame__ChannelType_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__RelativeVolumeFrame__ChannelType_t(TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_channels(cast(void*)swigCPtr), true);
    return ret;
  }

  public RelativeVolumeFrame.ChannelType channelType() const {
    RelativeVolumeFrame.ChannelType ret = cast(RelativeVolumeFrame.ChannelType)TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_channelType(cast(void*)swigCPtr);
    return ret;
  }

  public void setChannelType(RelativeVolumeFrame.ChannelType t) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setChannelType(cast(void*)swigCPtr, cast(int)t);
  }

  public short volumeAdjustmentIndex(RelativeVolumeFrame.ChannelType type) const {
    auto ret = TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustmentIndex__SWIG_0(cast(void*)swigCPtr, cast(int)type);
    return ret;
  }

  public short volumeAdjustmentIndex() const {
    auto ret = TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustmentIndex__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public void setVolumeAdjustmentIndex(short index, RelativeVolumeFrame.ChannelType type) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustmentIndex__SWIG_0(cast(void*)swigCPtr, index, cast(int)type);
  }

  public void setVolumeAdjustmentIndex(short index) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustmentIndex__SWIG_1(cast(void*)swigCPtr, index);
  }

  public float volumeAdjustment(RelativeVolumeFrame.ChannelType type) const {
    auto ret = TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustment__SWIG_0(cast(void*)swigCPtr, cast(int)type);
    return ret;
  }

  public float volumeAdjustment() const {
    auto ret = TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustment__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public void setVolumeAdjustment(float adjustment, RelativeVolumeFrame.ChannelType type) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustment__SWIG_0(cast(void*)swigCPtr, adjustment, cast(int)type);
  }

  public void setVolumeAdjustment(float adjustment) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustment__SWIG_1(cast(void*)swigCPtr, adjustment);
  }

  public TagLibD.PeakVolume peakVolume(RelativeVolumeFrame.ChannelType type) const {
    TagLibD.PeakVolume ret = new TagLibD.PeakVolume(TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_peakVolume__SWIG_0(cast(void*)swigCPtr, cast(int)type), true);
    return ret;
  }

  public TagLibD.PeakVolume peakVolume() const {
    TagLibD.PeakVolume ret = new TagLibD.PeakVolume(TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_peakVolume__SWIG_1(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setPeakVolume(TagLibD.PeakVolume peak, RelativeVolumeFrame.ChannelType type) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setPeakVolume__SWIG_0(cast(void*)swigCPtr, TagLibD.PeakVolume.swigGetCPtr(peak), cast(int)type);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void setPeakVolume(TagLibD.PeakVolume peak) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setPeakVolume__SWIG_1(cast(void*)swigCPtr, TagLibD.PeakVolume.swigGetCPtr(peak));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public string identification() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_identification(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setIdentification(string s) {
    TagLibD_im.TagLib_ID3v2_RelativeVolumeFrame_setIdentification(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }
}

class TextIdentificationFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_TextIdentificationFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(TextIdentificationFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_TextIdentificationFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_TextIdentificationFrame(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void setText(TagLib.TagLib.StringList l) {
    TagLibD_im.TagLib_ID3v2_TextIdentificationFrame_setText__SWIG_0(cast(void*)swigCPtr, TagLib.TagLib.StringList.swigGetCPtr(l));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override void setText(string s) {
    TagLibD_im.TagLib_ID3v2_TextIdentificationFrame_setText__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_TextIdentificationFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.StringList fieldList() const {
    TagLib.TagLib.StringList ret = new TagLib.TagLib.StringList(TagLibD_im.TagLib_ID3v2_TextIdentificationFrame_fieldList(cast(void*)swigCPtr), true);
    return ret;
  }
}

class UserTextIdentificationFrame : TextIdentificationFrame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(UserTextIdentificationFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_UserTextIdentificationFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_UserTextIdentificationFrame(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string description() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_description(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setDescription(string s) {
    TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_setDescription(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public TagLib.TagLib.StringList fieldList() const {
    TagLib.TagLib.StringList ret = new TagLib.TagLib.StringList(TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_fieldList(cast(void*)swigCPtr), true);
    return ret;
  }

  alias TextIdentificationFrame.fieldList fieldList;

  public override void setText(string text) {
    TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_setText__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(text));
  }

  public void setText(TagLib.TagLib.StringList fields) {
    TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_setText__SWIG_1(cast(void*)swigCPtr, TagLib.TagLib.StringList.swigGetCPtr(fields));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  alias TextIdentificationFrame.setText setText;

  public static UserTextIdentificationFrame find(Tag tag, string description) {
    void* cPtr = TagLibD_im.TagLib_ID3v2_UserTextIdentificationFrame_find(Tag.swigGetCPtr(tag), cast(char*)toStringz(description));
    UserTextIdentificationFrame ret = (cPtr is null) ? null : new UserTextIdentificationFrame(cPtr, false);
    return ret;
  }
}

class UniqueFileIdentifierFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_UniqueFileIdentifierFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(UniqueFileIdentifierFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_UniqueFileIdentifierFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_UniqueFileIdentifierFrame__SWIG_0(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public this(string owner, TagLib.TagLib.ByteVector id) {
    this(TagLibD_im.new_TagLib_ID3v2_UniqueFileIdentifierFrame__SWIG_1(cast(char*)toStringz(owner), TagLib.TagLib.ByteVector.swigGetCPtr(id)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public string owner() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UniqueFileIdentifierFrame_owner(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.ByteVector identifier() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_UniqueFileIdentifierFrame_identifier(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setOwner(string s) {
    TagLibD_im.TagLib_ID3v2_UniqueFileIdentifierFrame_setOwner(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public void setIdentifier(TagLib.TagLib.ByteVector v) {
    TagLibD_im.TagLib_ID3v2_UniqueFileIdentifierFrame_setIdentifier(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(v));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UniqueFileIdentifierFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }
}

class UnsynchronizedLyricsFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(UnsynchronizedLyricsFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_UnsynchronizedLyricsFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_UnsynchronizedLyricsFrame(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public TagLib.TagLib.ByteVector language() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_language(cast(void*)swigCPtr), true);
    return ret;
  }

  public string description() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_description(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string text() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_text(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setLanguage(TagLib.TagLib.ByteVector languageCode) {
    TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_setLanguage(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(languageCode));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void setDescription(string s) {
    TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_setDescription(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public override void setText(string s) {
    TagLibD_im.TagLib_ID3v2_UnsynchronizedLyricsFrame_setText(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }
}

class UrlLinkFrame : Frame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_UrlLinkFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(UrlLinkFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_UrlLinkFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_UrlLinkFrame(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public string url() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UrlLinkFrame_url(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setUrl(string s) {
    TagLibD_im.TagLib_ID3v2_UrlLinkFrame_setUrl(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public override void setText(string s) {
    TagLibD_im.TagLib_ID3v2_UrlLinkFrame_setText(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UrlLinkFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }
}

class UserUrlLinkFrame : UrlLinkFrame {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ID3v2_UserUrlLinkFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(UserUrlLinkFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ID3v2_UserUrlLinkFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_ID3v2_UserUrlLinkFrame(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public override string toString() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UserUrlLinkFrame_toString(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string description() const {
        char* cstr = TagLibD_im.TagLib_ID3v2_UserUrlLinkFrame_description(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setDescription(string s) {
    TagLibD_im.TagLib_ID3v2_UserUrlLinkFrame_setDescription(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }
}
