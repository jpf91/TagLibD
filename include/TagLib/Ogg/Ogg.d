/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module TagLib.Ogg.Ogg;

static import TagLibD_im;

static import std.conv;
static import std.string;
import std.conv;
import std.string;
import core.stdc.stdlib;
static import TagLib.TagLib;
static import TagLibD;
static import TagLibD;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLibD;
static import TagLib.TagLib;


class Page {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Page obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_Ogg_Page(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum ContainsPacketFlags {
    DoesNotContainPacket = 0x0000,
    CompletePacket = 0x0001,
    BeginsWithPacket = 0x0002,
    EndsWithPacket = 0x0004
  }

  enum PaginationStrategy {
    SinglePagePerGroup,
    Repaginate
  }

  public this(File file, int pageOffset) {
    this(TagLibD_im.new_TagLib_Ogg_Page(File.swigGetCPtr(file), pageOffset), true);
  }

  public int fileOffset() const {
    auto ret = TagLibD_im.TagLib_Ogg_Page_fileOffset(cast(void*)swigCPtr);
    return ret;
  }

  public PageHeader header() const {
    void* cPtr = TagLibD_im.TagLib_Ogg_Page_header(cast(void*)swigCPtr);
    PageHeader ret = (cPtr is null) ? null : new PageHeader(cPtr, false);
    return ret;
  }

  public Page getCopyWithNewPageSequenceNumber(int sequenceNumber) {
    void* cPtr = TagLibD_im.TagLib_Ogg_Page_getCopyWithNewPageSequenceNumber(cast(void*)swigCPtr, sequenceNumber);
    Page ret = (cPtr is null) ? null : new Page(cPtr, false);
    return ret;
  }

  public int firstPacketIndex() const {
    auto ret = TagLibD_im.TagLib_Ogg_Page_firstPacketIndex(cast(void*)swigCPtr);
    return ret;
  }

  public void setFirstPacketIndex(int index) {
    TagLibD_im.TagLib_Ogg_Page_setFirstPacketIndex(cast(void*)swigCPtr, index);
  }

  public Page.ContainsPacketFlags containsPacket(int index) const {
    Page.ContainsPacketFlags ret = cast(Page.ContainsPacketFlags)TagLibD_im.TagLib_Ogg_Page_containsPacket(cast(void*)swigCPtr, index);
    return ret;
  }

  public uint packetCount() const {
    auto ret = TagLibD_im.TagLib_Ogg_Page_packetCount(cast(void*)swigCPtr);
    return ret;
  }

  public TagLib.TagLib.ByteVectorList packets() const {
    TagLib.TagLib.ByteVectorList ret = new TagLib.TagLib.ByteVectorList(TagLibD_im.TagLib_Ogg_Page_packets(cast(void*)swigCPtr), true);
    return ret;
  }

  public int size() const {
    auto ret = TagLibD_im.TagLib_Ogg_Page_size(cast(void*)swigCPtr);
    return ret;
  }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_Ogg_Page_render(cast(void*)swigCPtr), true);
    return ret;
  }

  public static TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t paginate(TagLib.TagLib.ByteVectorList packets, Page.PaginationStrategy strategy, uint streamSerialNumber, int firstPage, bool firstPacketContinued, bool lastPacketCompleted, bool containsLastPacket) {
    TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t(TagLibD_im.TagLib_Ogg_Page_paginate__SWIG_0(TagLib.TagLib.ByteVectorList.swigGetCPtr(packets), cast(int)strategy, streamSerialNumber, firstPage, firstPacketContinued, lastPacketCompleted, containsLastPacket), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public static TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t paginate(TagLib.TagLib.ByteVectorList packets, Page.PaginationStrategy strategy, uint streamSerialNumber, int firstPage, bool firstPacketContinued, bool lastPacketCompleted) {
    TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t(TagLibD_im.TagLib_Ogg_Page_paginate__SWIG_1(TagLib.TagLib.ByteVectorList.swigGetCPtr(packets), cast(int)strategy, streamSerialNumber, firstPage, firstPacketContinued, lastPacketCompleted), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public static TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t paginate(TagLib.TagLib.ByteVectorList packets, Page.PaginationStrategy strategy, uint streamSerialNumber, int firstPage, bool firstPacketContinued) {
    TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t(TagLibD_im.TagLib_Ogg_Page_paginate__SWIG_2(TagLib.TagLib.ByteVectorList.swigGetCPtr(packets), cast(int)strategy, streamSerialNumber, firstPage, firstPacketContinued), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public static TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t paginate(TagLib.TagLib.ByteVectorList packets, Page.PaginationStrategy strategy, uint streamSerialNumber, int firstPage) {
    TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t(TagLibD_im.TagLib_Ogg_Page_paginate__SWIG_3(TagLib.TagLib.ByteVectorList.swigGetCPtr(packets), cast(int)strategy, streamSerialNumber, firstPage), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }
}

class PageHeader {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(PageHeader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_Ogg_PageHeader(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(File file, int pageOffset) {
    this(TagLibD_im.new_TagLib_Ogg_PageHeader__SWIG_0(File.swigGetCPtr(file), pageOffset), true);
  }

  public this(File file) {
    this(TagLibD_im.new_TagLib_Ogg_PageHeader__SWIG_1(File.swigGetCPtr(file)), true);
  }

  public this() {
    this(TagLibD_im.new_TagLib_Ogg_PageHeader__SWIG_2(), true);
  }

  public bool isValid() const {
    bool ret = TagLibD_im.TagLib_Ogg_PageHeader_isValid(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public TagLibD.SWIGTYPE_p_TagLib__ListT_int_t packetSizes() const {
    TagLibD.SWIGTYPE_p_TagLib__ListT_int_t ret = new TagLibD.SWIGTYPE_p_TagLib__ListT_int_t(TagLibD_im.TagLib_Ogg_PageHeader_packetSizes(cast(void*)swigCPtr), true);
    return ret;
  }

  public void setPacketSizes(TagLibD.SWIGTYPE_p_TagLib__ListT_int_t sizes) {
    TagLibD_im.TagLib_Ogg_PageHeader_setPacketSizes(cast(void*)swigCPtr, TagLibD.SWIGTYPE_p_TagLib__ListT_int_t.swigGetCPtr(sizes));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public bool firstPacketContinued() const {
    bool ret = TagLibD_im.TagLib_Ogg_PageHeader_firstPacketContinued(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setFirstPacketContinued(bool continued) {
    TagLibD_im.TagLib_Ogg_PageHeader_setFirstPacketContinued(cast(void*)swigCPtr, continued);
  }

  public bool lastPacketCompleted() const {
    bool ret = TagLibD_im.TagLib_Ogg_PageHeader_lastPacketCompleted(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setLastPacketCompleted(bool completed) {
    TagLibD_im.TagLib_Ogg_PageHeader_setLastPacketCompleted(cast(void*)swigCPtr, completed);
  }

  public bool firstPageOfStream() const {
    bool ret = TagLibD_im.TagLib_Ogg_PageHeader_firstPageOfStream(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setFirstPageOfStream(bool first) {
    TagLibD_im.TagLib_Ogg_PageHeader_setFirstPageOfStream(cast(void*)swigCPtr, first);
  }

  public bool lastPageOfStream() const {
    bool ret = TagLibD_im.TagLib_Ogg_PageHeader_lastPageOfStream(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void setLastPageOfStream(bool last) {
    TagLibD_im.TagLib_Ogg_PageHeader_setLastPageOfStream(cast(void*)swigCPtr, last);
  }

  public long absoluteGranularPosition() const {
    auto ret = TagLibD_im.TagLib_Ogg_PageHeader_absoluteGranularPosition(cast(void*)swigCPtr);
    return ret;
  }

  public void setAbsoluteGranularPosition(long agp) {
    TagLibD_im.TagLib_Ogg_PageHeader_setAbsoluteGranularPosition(cast(void*)swigCPtr, agp);
  }

  public uint streamSerialNumber() const {
    auto ret = TagLibD_im.TagLib_Ogg_PageHeader_streamSerialNumber(cast(void*)swigCPtr);
    return ret;
  }

  public void setStreamSerialNumber(uint n) {
    TagLibD_im.TagLib_Ogg_PageHeader_setStreamSerialNumber(cast(void*)swigCPtr, n);
  }

  public int pageSequenceNumber() const {
    auto ret = TagLibD_im.TagLib_Ogg_PageHeader_pageSequenceNumber(cast(void*)swigCPtr);
    return ret;
  }

  public void setPageSequenceNumber(int sequenceNumber) {
    TagLibD_im.TagLib_Ogg_PageHeader_setPageSequenceNumber(cast(void*)swigCPtr, sequenceNumber);
  }

  public int size() const {
    auto ret = TagLibD_im.TagLib_Ogg_PageHeader_size(cast(void*)swigCPtr);
    return ret;
  }

  public int dataSize() const {
    auto ret = TagLibD_im.TagLib_Ogg_PageHeader_dataSize(cast(void*)swigCPtr);
    return ret;
  }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_Ogg_PageHeader_render(cast(void*)swigCPtr), true);
    return ret;
  }
}

class XiphComment : TagLib.TagLib.Tag {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_Ogg_XiphComment_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(XiphComment obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_Ogg_XiphComment(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_Ogg_XiphComment__SWIG_0(), true);
  }

  public this(TagLib.TagLib.ByteVector data) {
    this(TagLibD_im.new_TagLib_Ogg_XiphComment__SWIG_1(TagLib.TagLib.ByteVector.swigGetCPtr(data)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  @property string title() const {
        char* cstr = TagLibD_im.TagLib_Ogg_XiphComment_title__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string artist() const {
        char* cstr = TagLibD_im.TagLib_Ogg_XiphComment_artist__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string album() const {
        char* cstr = TagLibD_im.TagLib_Ogg_XiphComment_album__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string comment() const {
        char* cstr = TagLibD_im.TagLib_Ogg_XiphComment_comment__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string genre() const {
        char* cstr = TagLibD_im.TagLib_Ogg_XiphComment_genre__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property uint year() const {
    auto ret = TagLibD_im.TagLib_Ogg_XiphComment_year__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  @property uint track() const {
    auto ret = TagLibD_im.TagLib_Ogg_XiphComment_track__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  @property void title(string s) {
    TagLibD_im.TagLib_Ogg_XiphComment_title__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void artist(string s) {
    TagLibD_im.TagLib_Ogg_XiphComment_artist__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void album(string s) {
    TagLibD_im.TagLib_Ogg_XiphComment_album__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void comment(string s) {
    TagLibD_im.TagLib_Ogg_XiphComment_comment__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void genre(string s) {
    TagLibD_im.TagLib_Ogg_XiphComment_genre__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void year(uint i) {
    TagLibD_im.TagLib_Ogg_XiphComment_year__SWIG_1(cast(void*)swigCPtr, i);
  }

  @property void track(uint i) {
    TagLibD_im.TagLib_Ogg_XiphComment_track__SWIG_1(cast(void*)swigCPtr, i);
  }

  public override bool isEmpty() const {
    bool ret = TagLibD_im.TagLib_Ogg_XiphComment_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public uint fieldCount() const {
    auto ret = TagLibD_im.TagLib_Ogg_XiphComment_fieldCount(cast(void*)swigCPtr);
    return ret;
  }

  public TagLibD.SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t fieldListMap() const {
    TagLibD.SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t ret = new TagLibD.SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t(TagLibD_im.TagLib_Ogg_XiphComment_fieldListMap(cast(void*)swigCPtr), false);
    return ret;
  }

  public string vendorID() const {
        char* cstr = TagLibD_im.TagLib_Ogg_XiphComment_vendorID(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void addField(string key, string value, bool replace) {
    TagLibD_im.TagLib_Ogg_XiphComment_addField__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(key), cast(char*)toStringz(value), replace);
  }

  public void addField(string key, string value) {
    TagLibD_im.TagLib_Ogg_XiphComment_addField__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(key), cast(char*)toStringz(value));
  }

  public void removeField(string key, string value) {
    TagLibD_im.TagLib_Ogg_XiphComment_removeField__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(key), cast(char*)toStringz(value));
  }

  public void removeField(string key) {
    TagLibD_im.TagLib_Ogg_XiphComment_removeField__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(key));
  }

  public bool contains(string key) const {
    bool ret = TagLibD_im.TagLib_Ogg_XiphComment_contains(cast(void*)swigCPtr, cast(char*)toStringz(key)) ? true : false;
    return ret;
  }

  public TagLib.TagLib.ByteVector render() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_Ogg_XiphComment_render__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public TagLib.TagLib.ByteVector render(bool addFramingBit) const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_Ogg_XiphComment_render__SWIG_1(cast(void*)swigCPtr, addFramingBit), true);
    return ret;
  }
}

class File : TagLib.TagLib.File {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_Ogg_File_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(File obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_Ogg_File(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public TagLib.TagLib.ByteVector packet(uint i) {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.TagLib_Ogg_File_packet(cast(void*)swigCPtr, i), true);
    return ret;
  }

  public void setPacket(uint i, TagLib.TagLib.ByteVector p) {
    TagLibD_im.TagLib_Ogg_File_setPacket(cast(void*)swigCPtr, i, TagLib.TagLib.ByteVector.swigGetCPtr(p));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public PageHeader firstPageHeader() {
    void* cPtr = TagLibD_im.TagLib_Ogg_File_firstPageHeader(cast(void*)swigCPtr);
    PageHeader ret = (cPtr is null) ? null : new PageHeader(cPtr, false);
    return ret;
  }

  public PageHeader lastPageHeader() {
    void* cPtr = TagLibD_im.TagLib_Ogg_File_lastPageHeader(cast(void*)swigCPtr);
    PageHeader ret = (cPtr is null) ? null : new PageHeader(cPtr, false);
    return ret;
  }

  public override bool save() {
    bool ret = TagLibD_im.TagLib_Ogg_File_save(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}
