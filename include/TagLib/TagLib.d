/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module TagLib.TagLib;

static import TagLibD_im;

static import std.conv;
static import std.string;
import std.conv;
import std.string;
import core.stdc.stdlib;
static import TagLibD;
static import TagLibD;
static import TagLibD;
static import TagLibD;
static import TagLibD;


class ByteVector {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ByteVector obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ByteVector(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ByteVector__SWIG_0(), true);
  }

  public this(uint size, char value) {
    this(TagLibD_im.new_TagLib_ByteVector__SWIG_1(size, value), true);
  }

  public this(uint size) {
    this(TagLibD_im.new_TagLib_ByteVector__SWIG_2(size), true);
  }

  public this(ByteVector v) {
    this(TagLibD_im.new_TagLib_ByteVector__SWIG_3(ByteVector.swigGetCPtr(v)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public this(char c) {
    this(TagLibD_im.new_TagLib_ByteVector__SWIG_4(c), true);
  }

  public this(string data, uint length) {
    this(TagLibD_im.new_TagLib_ByteVector__SWIG_5((data ? std.string.toStringz(data) : null), length), true);
  }

  public this(string data) {
    this(TagLibD_im.new_TagLib_ByteVector__SWIG_6((data ? std.string.toStringz(data) : null)), true);
  }

  public ByteVector setData(string data, uint length) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_setData__SWIG_0(cast(void*)swigCPtr, (data ? std.string.toStringz(data) : null), length), false);
    return ret;
  }

  public ByteVector setData(string data) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_setData__SWIG_1(cast(void*)swigCPtr, (data ? std.string.toStringz(data) : null)), false);
    return ret;
  }

  public string data() {
    string ret = std.conv.to!string(TagLibD_im.TagLib_ByteVector_data__SWIG_0(cast(void*)swigCPtr));
    return ret;
  }

  public ByteVector mid(uint index, uint length) const {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_mid__SWIG_0(cast(void*)swigCPtr, index, length), true);
    return ret;
  }

  public ByteVector mid(uint index) const {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_mid__SWIG_1(cast(void*)swigCPtr, index), true);
    return ret;
  }

  public char at(uint index) const {
    auto ret = TagLibD_im.TagLib_ByteVector_at(cast(void*)swigCPtr, index);
    return ret;
  }

  public int find(ByteVector pattern, uint offset, int byteAlign) const {
    auto ret = TagLibD_im.TagLib_ByteVector_find__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), offset, byteAlign);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int find(ByteVector pattern, uint offset) const {
    auto ret = TagLibD_im.TagLib_ByteVector_find__SWIG_1(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), offset);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int find(ByteVector pattern) const {
    auto ret = TagLibD_im.TagLib_ByteVector_find__SWIG_2(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int rfind(ByteVector pattern, uint offset, int byteAlign) const {
    auto ret = TagLibD_im.TagLib_ByteVector_rfind__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), offset, byteAlign);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int rfind(ByteVector pattern, uint offset) const {
    auto ret = TagLibD_im.TagLib_ByteVector_rfind__SWIG_1(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), offset);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int rfind(ByteVector pattern) const {
    auto ret = TagLibD_im.TagLib_ByteVector_rfind__SWIG_2(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool containsAt(ByteVector pattern, uint offset, uint patternOffset, uint patternLength) const {
    bool ret = TagLibD_im.TagLib_ByteVector_containsAt__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), offset, patternOffset, patternLength) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool containsAt(ByteVector pattern, uint offset, uint patternOffset) const {
    bool ret = TagLibD_im.TagLib_ByteVector_containsAt__SWIG_1(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), offset, patternOffset) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool containsAt(ByteVector pattern, uint offset) const {
    bool ret = TagLibD_im.TagLib_ByteVector_containsAt__SWIG_2(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), offset) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool startsWith(ByteVector pattern) const {
    bool ret = TagLibD_im.TagLib_ByteVector_startsWith(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool endsWith(ByteVector pattern) const {
    bool ret = TagLibD_im.TagLib_ByteVector_endsWith(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public ByteVector replace(ByteVector pattern, ByteVector arg1) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_replace(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), ByteVector.swigGetCPtr(arg1)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int endsWithPartialMatch(ByteVector pattern) const {
    auto ret = TagLibD_im.TagLib_ByteVector_endsWithPartialMatch(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public ByteVector append(ByteVector v) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_append(cast(void*)swigCPtr, ByteVector.swigGetCPtr(v)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public ByteVector clear() {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_clear(cast(void*)swigCPtr), false);
    return ret;
  }

  public uint size() const {
    auto ret = TagLibD_im.TagLib_ByteVector_size(cast(void*)swigCPtr);
    return ret;
  }

  public ByteVector resize(uint size, char padding) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_resize__SWIG_0(cast(void*)swigCPtr, size, padding), false);
    return ret;
  }

  public ByteVector resize(uint size) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_resize__SWIG_1(cast(void*)swigCPtr, size), false);
    return ret;
  }

  public TagLibD.SWIGTYPE_p_std__vectorT_char_t__iterator begin() {
    TagLibD.SWIGTYPE_p_std__vectorT_char_t__iterator ret = new TagLibD.SWIGTYPE_p_std__vectorT_char_t__iterator(TagLibD_im.TagLib_ByteVector_begin__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public TagLibD.SWIGTYPE_p_std__vectorT_char_t__iterator end() {
    TagLibD.SWIGTYPE_p_std__vectorT_char_t__iterator ret = new TagLibD.SWIGTYPE_p_std__vectorT_char_t__iterator(TagLibD_im.TagLib_ByteVector_end__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public bool isNull() const {
    bool ret = TagLibD_im.TagLib_ByteVector_isNull(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isEmpty() const {
    bool ret = TagLibD_im.TagLib_ByteVector_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public uint checksum() const {
    auto ret = TagLibD_im.TagLib_ByteVector_checksum(cast(void*)swigCPtr);
    return ret;
  }

  public uint toUInt(bool mostSignificantByteFirst) const {
    auto ret = TagLibD_im.TagLib_ByteVector_toUInt__SWIG_0(cast(void*)swigCPtr, mostSignificantByteFirst);
    return ret;
  }

  public uint toUInt() const {
    auto ret = TagLibD_im.TagLib_ByteVector_toUInt__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public short toShort(bool mostSignificantByteFirst) const {
    auto ret = TagLibD_im.TagLib_ByteVector_toShort__SWIG_0(cast(void*)swigCPtr, mostSignificantByteFirst);
    return ret;
  }

  public short toShort() const {
    auto ret = TagLibD_im.TagLib_ByteVector_toShort__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public long toLongLong(bool mostSignificantByteFirst) const {
    auto ret = TagLibD_im.TagLib_ByteVector_toLongLong__SWIG_0(cast(void*)swigCPtr, mostSignificantByteFirst);
    return ret;
  }

  public long toLongLong() const {
    auto ret = TagLibD_im.TagLib_ByteVector_toLongLong__SWIG_1(cast(void*)swigCPtr);
    return ret;
  }

  public static ByteVector fromUInt(uint value, bool mostSignificantByteFirst) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromUInt__SWIG_0(value, mostSignificantByteFirst), true);
    return ret;
  }

  public static ByteVector fromUInt(uint value) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromUInt__SWIG_1(value), true);
    return ret;
  }

  public static ByteVector fromShort(short value, bool mostSignificantByteFirst) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromShort__SWIG_0(value, mostSignificantByteFirst), true);
    return ret;
  }

  public static ByteVector fromShort(short value) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromShort__SWIG_1(value), true);
    return ret;
  }

  public static ByteVector fromLongLong(long value, bool mostSignificantByteFirst) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromLongLong__SWIG_0(value, mostSignificantByteFirst), true);
    return ret;
  }

  public static ByteVector fromLongLong(long value) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromLongLong__SWIG_1(value), true);
    return ret;
  }

  public static ByteVector fromCString(string s, uint length) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromCString__SWIG_0((s ? std.string.toStringz(s) : null), length), true);
    return ret;
  }

  public static ByteVector fromCString(string s) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_fromCString__SWIG_1((s ? std.string.toStringz(s) : null)), true);
    return ret;
  }

  public char opIndex(int index) const {
    auto ret = TagLibD_im.TagLib_ByteVector_opIndex__SWIG_0(cast(void*)swigCPtr, index);
    return ret;
  }

  public bool swigOpEquals(ByteVector v) const {
    bool ret = TagLibD_im.TagLib_ByteVector_swigOpEquals__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(v)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(string s) const {
    bool ret = TagLibD_im.TagLib_ByteVector_swigOpEquals__SWIG_1(cast(void*)swigCPtr, (s ? std.string.toStringz(s) : null)) ? true : false;
    return ret;
  }

  public bool swigOpLt(ByteVector v) const {
    bool ret = TagLibD_im.TagLib_ByteVector_swigOpLt(cast(void*)swigCPtr, ByteVector.swigGetCPtr(v)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpGt(ByteVector v) const {
    bool ret = TagLibD_im.TagLib_ByteVector_swigOpGt(cast(void*)swigCPtr, ByteVector.swigGetCPtr(v)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public ByteVector swigOpAdd(ByteVector v) const {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVector_swigOpAdd(cast(void*)swigCPtr, ByteVector.swigGetCPtr(v)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public static void _null(ByteVector value) @property {
    TagLibD_im.TagLib_ByteVector__null_set(ByteVector.swigGetCPtr(value));
  }

  public static ByteVector _null() @property {
    void* cPtr = TagLibD_im.TagLib_ByteVector__null_get();
    ByteVector ret = (cPtr is null) ? null : new ByteVector(cPtr, false);
    return ret;
  }
}

class ByteVectorList : TagLibD.bvList {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_ByteVectorList_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(ByteVectorList obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_ByteVectorList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_ByteVectorList__SWIG_0(), true);
  }

  public this(ByteVectorList l) {
    this(TagLibD_im.new_TagLib_ByteVectorList__SWIG_1(ByteVectorList.swigGetCPtr(l)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public ByteVector toByteVector(ByteVector separator) const {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVectorList_toByteVector__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(separator)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public ByteVector toByteVector() const {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_ByteVectorList_toByteVector__SWIG_1(cast(void*)swigCPtr), true);
    return ret;
  }

  public static ByteVectorList split(ByteVector v, ByteVector pattern, int byteAlign) {
    ByteVectorList ret = new ByteVectorList(TagLibD_im.TagLib_ByteVectorList_split__SWIG_0(ByteVector.swigGetCPtr(v), ByteVector.swigGetCPtr(pattern), byteAlign), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public static ByteVectorList split(ByteVector v, ByteVector pattern) {
    ByteVectorList ret = new ByteVectorList(TagLibD_im.TagLib_ByteVectorList_split__SWIG_1(ByteVector.swigGetCPtr(v), ByteVector.swigGetCPtr(pattern)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public static ByteVectorList split(ByteVector v, ByteVector pattern, int byteAlign, int max) {
    ByteVectorList ret = new ByteVectorList(TagLibD_im.TagLib_ByteVectorList_split__SWIG_2(ByteVector.swigGetCPtr(v), ByteVector.swigGetCPtr(pattern), byteAlign, max), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }
}

class StringList : TagLibD.strList {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(TagLibD_im.TagLib_StringList_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(StringList obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_StringList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_StringList__SWIG_0(), true);
  }

  public this(StringList l) {
    this(TagLibD_im.new_TagLib_StringList__SWIG_1(StringList.swigGetCPtr(l)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public this(string s) {
    this(TagLibD_im.new_TagLib_StringList__SWIG_2(cast(char*)toStringz(s)), true);
  }

  public this(ByteVectorList vl) {
    this(TagLibD_im.new_TagLib_StringList__SWIG_3(ByteVectorList.swigGetCPtr(vl)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public string toWString(string separator) const {
        char* cstr = TagLibD_im.TagLib_StringList_toWString__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(separator));
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string toWString() const {
        char* cstr = TagLibD_im.TagLib_StringList_toWString__SWIG_1(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public StringList append(string s) {
    StringList ret = new StringList(TagLibD_im.TagLib_StringList_append__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(s)), false);
    return ret;
  }

  public StringList append(StringList l) {
    StringList ret = new StringList(TagLibD_im.TagLib_StringList_append__SWIG_1(cast(void*)swigCPtr, StringList.swigGetCPtr(l)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  alias TagLibD.strList.append append;

  public static StringList split(string s, string pattern) {
    StringList ret = new StringList(TagLibD_im.TagLib_StringList_split(cast(char*)toStringz(s), cast(char*)toStringz(pattern)), true);
    return ret;
  }
}

class AudioProperties {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(AudioProperties obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_AudioProperties(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum ReadStyle {
    Fast,
    Average,
    Accurate
  }

  @property int length() const {
    auto ret = TagLibD_im.TagLib_AudioProperties_length(cast(void*)swigCPtr);
    return ret;
  }

  @property int bitrate() const {
    auto ret = TagLibD_im.TagLib_AudioProperties_bitrate(cast(void*)swigCPtr);
    return ret;
  }

  @property int sampleRate() const {
    auto ret = TagLibD_im.TagLib_AudioProperties_sampleRate(cast(void*)swigCPtr);
    return ret;
  }

  @property int channels() const {
    auto ret = TagLibD_im.TagLib_AudioProperties_channels(cast(void*)swigCPtr);
    return ret;
  }
}

class Tag {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Tag obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_Tag(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  @property string title() const {
        char* cstr = TagLibD_im.TagLib_Tag_title__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string artist() const {
        char* cstr = TagLibD_im.TagLib_Tag_artist__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string album() const {
        char* cstr = TagLibD_im.TagLib_Tag_album__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string comment() const {
        char* cstr = TagLibD_im.TagLib_Tag_comment__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property string genre() const {
        char* cstr = TagLibD_im.TagLib_Tag_genre__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  @property uint year() const {
    auto ret = TagLibD_im.TagLib_Tag_year__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  @property uint track() const {
    auto ret = TagLibD_im.TagLib_Tag_track__SWIG_0(cast(void*)swigCPtr);
    return ret;
  }

  @property void title(string s) {
    TagLibD_im.TagLib_Tag_title__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void artist(string s) {
    TagLibD_im.TagLib_Tag_artist__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void album(string s) {
    TagLibD_im.TagLib_Tag_album__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void comment(string s) {
    TagLibD_im.TagLib_Tag_comment__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void genre(string s) {
    TagLibD_im.TagLib_Tag_genre__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(s));
  }

  @property void year(uint i) {
    TagLibD_im.TagLib_Tag_year__SWIG_1(cast(void*)swigCPtr, i);
  }

  @property void track(uint i) {
    TagLibD_im.TagLib_Tag_track__SWIG_1(cast(void*)swigCPtr, i);
  }

  public bool isEmpty() const {
    bool ret = TagLibD_im.TagLib_Tag_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static void duplicate(Tag source, Tag target, bool overwrite) {
    TagLibD_im.TagLib_Tag_duplicate__SWIG_0(Tag.swigGetCPtr(source), Tag.swigGetCPtr(target), overwrite);
  }

  public static void duplicate(Tag source, Tag target) {
    TagLibD_im.TagLib_Tag_duplicate__SWIG_1(Tag.swigGetCPtr(source), Tag.swigGetCPtr(target));
  }
}

class File {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(File obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_File(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum Position {
    Beginning,
    Current,
    End
  }

  public string name() const {
        return to!string(TagLibD_im.TagLib_File_name(cast(void*)swigCPtr));
    }

  public Tag tag() const {
    void* cPtr = TagLibD_im.TagLib_File_tag(cast(void*)swigCPtr);
    Tag ret = (cPtr is null) ? null : new Tag(cPtr, false);
    return ret;
  }

  public AudioProperties audioProperties() const {
    void* cPtr = TagLibD_im.TagLib_File_audioProperties(cast(void*)swigCPtr);
    AudioProperties ret = (cPtr is null) ? null : new AudioProperties(cPtr, false);
    return ret;
  }

  public bool save() {
    bool ret = TagLibD_im.TagLib_File_save(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public ByteVector readBlock(uint length) {
    ByteVector ret = new ByteVector(TagLibD_im.TagLib_File_readBlock(cast(void*)swigCPtr, length), true);
    return ret;
  }

  public void writeBlock(ByteVector data) {
    TagLibD_im.TagLib_File_writeBlock(cast(void*)swigCPtr, ByteVector.swigGetCPtr(data));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public int find(ByteVector pattern, int fromOffset, ByteVector before) {
    auto ret = TagLibD_im.TagLib_File_find__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), fromOffset, ByteVector.swigGetCPtr(before));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int find(ByteVector pattern, int fromOffset) {
    auto ret = TagLibD_im.TagLib_File_find__SWIG_1(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), fromOffset);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int find(ByteVector pattern) {
    auto ret = TagLibD_im.TagLib_File_find__SWIG_2(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int rfind(ByteVector pattern, int fromOffset, ByteVector before) {
    auto ret = TagLibD_im.TagLib_File_rfind__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), fromOffset, ByteVector.swigGetCPtr(before));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int rfind(ByteVector pattern, int fromOffset) {
    auto ret = TagLibD_im.TagLib_File_rfind__SWIG_1(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern), fromOffset);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public int rfind(ByteVector pattern) {
    auto ret = TagLibD_im.TagLib_File_rfind__SWIG_2(cast(void*)swigCPtr, ByteVector.swigGetCPtr(pattern));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public void insert(ByteVector data, uint start, uint replace) {
    TagLibD_im.TagLib_File_insert__SWIG_0(cast(void*)swigCPtr, ByteVector.swigGetCPtr(data), start, replace);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void insert(ByteVector data, uint start) {
    TagLibD_im.TagLib_File_insert__SWIG_1(cast(void*)swigCPtr, ByteVector.swigGetCPtr(data), start);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void insert(ByteVector data) {
    TagLibD_im.TagLib_File_insert__SWIG_2(cast(void*)swigCPtr, ByteVector.swigGetCPtr(data));
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public void removeBlock(uint start, uint length) {
    TagLibD_im.TagLib_File_removeBlock__SWIG_0(cast(void*)swigCPtr, start, length);
  }

  public void removeBlock(uint start) {
    TagLibD_im.TagLib_File_removeBlock__SWIG_1(cast(void*)swigCPtr, start);
  }

  public void removeBlock() {
    TagLibD_im.TagLib_File_removeBlock__SWIG_2(cast(void*)swigCPtr);
  }

  public bool readOnly() const {
    bool ret = TagLibD_im.TagLib_File_readOnly(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isOpen() const {
    bool ret = TagLibD_im.TagLib_File_isOpen(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool isValid() const {
    bool ret = TagLibD_im.TagLib_File_isValid(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void seek(int offset, File.Position p) {
    TagLibD_im.TagLib_File_seek__SWIG_0(cast(void*)swigCPtr, offset, cast(int)p);
  }

  public void seek(int offset) {
    TagLibD_im.TagLib_File_seek__SWIG_1(cast(void*)swigCPtr, offset);
  }

  public void clear() {
    TagLibD_im.TagLib_File_clear(cast(void*)swigCPtr);
  }

  public int tell() const {
    auto ret = TagLibD_im.TagLib_File_tell(cast(void*)swigCPtr);
    return ret;
  }

  public int length() {
    auto ret = TagLibD_im.TagLib_File_length(cast(void*)swigCPtr);
    return ret;
  }

  public static bool isReadable(string file) {
    bool ret = TagLibD_im.TagLib_File_isReadable((file ? std.string.toStringz(file) : null)) ? true : false;
    return ret;
  }

  public static bool isWritable(string name) {
    bool ret = TagLibD_im.TagLib_File_isWritable((name ? std.string.toStringz(name) : null)) ? true : false;
    return ret;
  }
}

class CPP_FileRef {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(CPP_FileRef obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_CPP_FileRef(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_CPP_FileRef__SWIG_0(), true);
  }

  public this(string fileName, bool readAudioProperties, AudioProperties.ReadStyle audioPropertiesStyle) {
    this(TagLibD_im.new_TagLib_CPP_FileRef__SWIG_1(std.string.toStringz(fileName), readAudioProperties, cast(int)audioPropertiesStyle), true);
  }

  public this(string fileName, bool readAudioProperties) {
    this(TagLibD_im.new_TagLib_CPP_FileRef__SWIG_2(std.string.toStringz(fileName), readAudioProperties), true);
  }

  public this(string fileName) {
    this(TagLibD_im.new_TagLib_CPP_FileRef__SWIG_3(std.string.toStringz(fileName)), true);
  }

  public this(File file) {
    this(TagLibD_im.new_TagLib_CPP_FileRef__SWIG_4(File.swigGetCPtr(file)), true);
  }

  public this(CPP_FileRef arg0) {
    this(TagLibD_im.new_TagLib_CPP_FileRef__SWIG_5(CPP_FileRef.swigGetCPtr(arg0)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public Tag tag() const {
    void* cPtr = TagLibD_im.TagLib_CPP_FileRef_tag(cast(void*)swigCPtr);
    Tag ret = (cPtr is null) ? null : new Tag(cPtr, false);
    return ret;
  }

  public AudioProperties audioProperties() const {
    void* cPtr = TagLibD_im.TagLib_CPP_FileRef_audioProperties(cast(void*)swigCPtr);
    AudioProperties ret = (cPtr is null) ? null : new AudioProperties(cPtr, false);
    return ret;
  }

  public File file() const {
    void* cPtr = TagLibD_im.TagLib_CPP_FileRef_file(cast(void*)swigCPtr);
    File ret = (cPtr is null) ? null : new File(cPtr, false);
    return ret;
  }

  public bool save() {
    bool ret = TagLibD_im.TagLib_CPP_FileRef_save(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public static TagLibD.FileTypeResolver addFileTypeResolver(TagLibD.FileTypeResolver resolver) {
    void* cPtr = TagLibD_im.TagLib_CPP_FileRef_addFileTypeResolver(TagLibD.FileTypeResolver.swigGetCPtr(resolver));
    TagLibD.FileTypeResolver ret = (cPtr is null) ? null : new TagLibD.FileTypeResolver(cPtr, false);
    return ret;
  }

  public static StringList defaultFileExtensions() {
    StringList ret = new StringList(TagLibD_im.TagLib_CPP_FileRef_defaultFileExtensions(), true);
    return ret;
  }

  public bool isNull() const {
    bool ret = TagLibD_im.TagLib_CPP_FileRef_isNull(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool swigOpEquals(CPP_FileRef arg0) const {
    bool ret = TagLibD_im.TagLib_CPP_FileRef_swigOpEquals(cast(void*)swigCPtr, CPP_FileRef.swigGetCPtr(arg0)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public static File create(string fileName, bool readAudioProperties, AudioProperties.ReadStyle audioPropertiesStyle) {
    void* cPtr = TagLibD_im.TagLib_CPP_FileRef_create__SWIG_0(std.string.toStringz(fileName), readAudioProperties, cast(int)audioPropertiesStyle);
    File ret = (cPtr is null) ? null : new File(cPtr, false);
    return ret;
  }

  public static File create(string fileName, bool readAudioProperties) {
    void* cPtr = TagLibD_im.TagLib_CPP_FileRef_create__SWIG_1(std.string.toStringz(fileName), readAudioProperties);
    File ret = (cPtr is null) ? null : new File(cPtr, false);
    return ret;
  }

  public static File create(string fileName) {
    void* cPtr = TagLibD_im.TagLib_CPP_FileRef_create__SWIG_2(std.string.toStringz(fileName));
    File ret = (cPtr is null) ? null : new File(cPtr, false);
    return ret;
  }
}

class genreMap {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(genreMap obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_TagLib_genreMap(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_TagLib_genreMap__SWIG_0(), true);
  }

  public this(genreMap m) {
    this(TagLibD_im.new_TagLib_genreMap__SWIG_1(genreMap.swigGetCPtr(m)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator begin() {
    TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator ret = new TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator(TagLibD_im.TagLib_genreMap_begin__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator end() {
    TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator ret = new TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator(TagLibD_im.TagLib_genreMap_end__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public genreMap insert(string key, int value) {
    genreMap ret = new genreMap(TagLibD_im.TagLib_genreMap_insert(cast(void*)swigCPtr, cast(char*)toStringz(key), value), false);
    return ret;
  }

  public genreMap clear() {
    genreMap ret = new genreMap(TagLibD_im.TagLib_genreMap_clear(cast(void*)swigCPtr), false);
    return ret;
  }

  public uint size() const {
    auto ret = TagLibD_im.TagLib_genreMap_size(cast(void*)swigCPtr);
    return ret;
  }

  public bool isEmpty() const {
    bool ret = TagLibD_im.TagLib_genreMap_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator find(string key) {
    TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator ret = new TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator(TagLibD_im.TagLib_genreMap_find__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(key)), true);
    return ret;
  }

  public bool contains(string key) const {
    bool ret = TagLibD_im.TagLib_genreMap_contains(cast(void*)swigCPtr, cast(char*)toStringz(key)) ? true : false;
    return ret;
  }

  public genreMap erase(TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator it) {
    genreMap ret = new genreMap(TagLibD_im.TagLib_genreMap_erase__SWIG_0(cast(void*)swigCPtr, TagLibD.SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator.swigGetCPtr(it)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public genreMap erase(string key) {
    genreMap ret = new genreMap(TagLibD_im.TagLib_genreMap_erase__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(key)), false);
    return ret;
  }

  public int opIndex(string key) const {
    auto ret = TagLibD_im.TagLib_genreMap_opIndex__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(key));
    return ret;
  }
}
