/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module TagLibD;

static import TagLibD_im;

static import std.conv;
static import std.string;
import std.conv;
import std.string;
import core.stdc.stdlib;
static import TagLib.TagLib;
static import TagLib.TagLib;
static import TagLib.ID3v2.ID3v2;
static import TagLib.TagLib;


import core.stdc.stdlib;
import std.conv;
import std.typecons;
debug(FileRef) import std.stdio;
/* Contains code from std.typecons.RefCounted - thanks*/
struct FileRef
{
    private:
        TagLib.TagLib.CPP_FileRef _payload;
        size_t* _count;

        void initialize(A...)(A args)
        {
            _payload = new TagLib.TagLib.CPP_FileRef(args);
            _count = cast(size_t*)malloc(size_t.sizeof);
            *_count = 1;
           debug(FileRef) writeln(typeof(this).stringof,
                "@", cast(void*) _payload, ": initialized with ",
                    A.stringof);
        }

    public:
        //Reference Counting stuff

        this(this)
        {
            if (!isInitialized) return;
            ++*_count;
            debug(FileRef)
                 writeln(typeof(this).stringof,
                "@", cast(void*) _payload, ": bumped refcount to ",
                *_count);
        }

        ~this()
        {
            if (!_payload) return;
            assert(*_count > 0);
            if (--*_count)
            {
                debug(FileRef)
                {
                         writeln(typeof(this).stringof,
                        "@", cast(void*)_payload,
                        ": decrement refcount to ", *_count);
                }
                return;
            }
            debug(FileRef)
            {
                write(typeof(this).stringof,
                        "@", cast(void*)_payload, ": freeing... ");
                stdout.flush();
            }
            // Done, deallocate
            assert(_payload);
            _payload.dispose();
            clear(_payload);
            free(_count);
            _count = null;
            _payload = null;
            debug(RefCounted)writeln("done!");
        }

        /**
           Returns $(D true) if and only if the underlying store has been
           allocated and initialized.
        */
        @property bool isInitialized() const
        {
            return _payload !is null;
        }

        void opAssign(FileRef rhs)
        {
            _payload = rhs._payload;
            _count = rhs._count;
        }

        //CPP FileRef members
        public this(string fileName, bool readAudioProperties, TagLib.TagLib.AudioProperties.ReadStyle audioPropertiesStyle) {
            initialize(fileName, readAudioProperties, audioPropertiesStyle);
        }
        
        public this(string fileName, bool readAudioProperties) {
            initialize(fileName, readAudioProperties);
        }
        
        public this(string fileName) {
            initialize(fileName);
        }
        
        public this(TagLib.TagLib.File file) {
            initialize(file);
        }
        
        public TagLib.TagLib.Tag tag() const {
            return _payload.tag();
        }
        
        public TagLib.TagLib.AudioProperties audioProperties() const {
            return _payload.audioProperties();
        }
        
        public TagLib.TagLib.File file() const {
            return _payload.file();
        }
        
        public bool save() {
            return _payload.save();
        }
        
        public static TagLibD.FileTypeResolver addFileTypeResolver(TagLibD.FileTypeResolver resolver) {
            return TagLib.TagLib.CPP_FileRef.addFileTypeResolver(resolver);
        }
        
        public static TagLib.TagLib.StringList defaultFileExtensions() {
            return TagLib.TagLib.CPP_FileRef.defaultFileExtensions();
        }
        
        public bool isNull() const {
            return _payload.isNull();
        }
        
        public static TagLib.TagLib.File create(string fileName, bool readAudioProperties, TagLib.TagLib.AudioProperties.ReadStyle audioPropertiesStyle) {
            return TagLib.TagLib.CPP_FileRef.create(fileName, readAudioProperties, audioPropertiesStyle);
        }
        
        public static TagLib.TagLib.File create(string fileName, bool readAudioProperties) {
            return TagLib.TagLib.CPP_FileRef.create(fileName, readAudioProperties);
        }
        
        public static TagLib.TagLib.File create(string fileName) {
            return TagLib.TagLib.CPP_FileRef.create(fileName);
        }
}


int TAGLIB_MAJOR_VERSION() @property {
  auto ret = TagLibD_im.TAGLIB_MAJOR_VERSION_get();
  return ret;
}

int TAGLIB_MINOR_VERSION() @property {
  auto ret = TagLibD_im.TAGLIB_MINOR_VERSION_get();
  return ret;
}

int TAGLIB_PATCH_VERSION() @property {
  auto ret = TagLibD_im.TAGLIB_PATCH_VERSION_get();
  return ret;
}

class bvList {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(bvList obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_bvList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_bvList__SWIG_0(), true);
  }

  public this(bvList l) {
    this(TagLibD_im.new_bvList__SWIG_1(bvList.swigGetCPtr(l)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator begin() {
    SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator(TagLibD_im.bvList_begin__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator end() {
    SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator(TagLibD_im.bvList_end__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator insert(SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator it, TagLib.TagLib.ByteVector value) {
    SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator(TagLibD_im.bvList_insert(cast(void*)swigCPtr, SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator.swigGetCPtr(it), TagLib.TagLib.ByteVector.swigGetCPtr(value)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bvList sortedInsert(TagLib.TagLib.ByteVector value, bool unique) {
    bvList ret = new bvList(TagLibD_im.bvList_sortedInsert__SWIG_0(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(value), unique), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bvList sortedInsert(TagLib.TagLib.ByteVector value) {
    bvList ret = new bvList(TagLibD_im.bvList_sortedInsert__SWIG_1(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(value)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bvList append(TagLib.TagLib.ByteVector item) {
    bvList ret = new bvList(TagLibD_im.bvList_append__SWIG_0(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(item)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bvList append(bvList l) {
    bvList ret = new bvList(TagLibD_im.bvList_append__SWIG_1(cast(void*)swigCPtr, bvList.swigGetCPtr(l)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bvList prepend(TagLib.TagLib.ByteVector item) {
    bvList ret = new bvList(TagLibD_im.bvList_prepend__SWIG_0(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(item)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bvList prepend(bvList l) {
    bvList ret = new bvList(TagLibD_im.bvList_prepend__SWIG_1(cast(void*)swigCPtr, bvList.swigGetCPtr(l)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bvList clear() {
    bvList ret = new bvList(TagLibD_im.bvList_clear(cast(void*)swigCPtr), false);
    return ret;
  }

  public uint size() const {
    auto ret = TagLibD_im.bvList_size(cast(void*)swigCPtr);
    return ret;
  }

  public bool isEmpty() const {
    bool ret = TagLibD_im.bvList_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator find(TagLib.TagLib.ByteVector value) {
    SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator(TagLibD_im.bvList_find__SWIG_0(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(value)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool contains(TagLib.TagLib.ByteVector value) const {
    bool ret = TagLibD_im.bvList_contains(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(value)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator erase(SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator it) {
    SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator(TagLibD_im.bvList_erase(cast(void*)swigCPtr, SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator.swigGetCPtr(it)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public TagLib.TagLib.ByteVector front() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.bvList_front__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public TagLib.TagLib.ByteVector back() const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.bvList_back__SWIG_0(cast(void*)swigCPtr), false);
    return ret;
  }

  public void setAutoDelete(bool autoDelete) {
    TagLibD_im.bvList_setAutoDelete(cast(void*)swigCPtr, autoDelete);
  }

  public TagLib.TagLib.ByteVector opIndex(uint i) const {
    TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.bvList_opIndex(cast(void*)swigCPtr, i), false);
    return ret;
  }

  public bool swigOpEquals(bvList l) const {
    bool ret = TagLibD_im.bvList_swigOpEquals(cast(void*)swigCPtr, bvList.swigGetCPtr(l)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }
}

class strList {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(strList obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_strList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_strList__SWIG_0(), true);
  }

  public this(strList l) {
    this(TagLibD_im.new_strList__SWIG_1(strList.swigGetCPtr(l)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_std__listT_TagLib__String_t__iterator begin() {
    SWIGTYPE_p_std__listT_TagLib__String_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__String_t__iterator(TagLibD_im.strList_begin__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__String_t__iterator end() {
    SWIGTYPE_p_std__listT_TagLib__String_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__String_t__iterator(TagLibD_im.strList_end__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__String_t__iterator insert(SWIGTYPE_p_std__listT_TagLib__String_t__iterator it, string value) {
    SWIGTYPE_p_std__listT_TagLib__String_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__String_t__iterator(TagLibD_im.strList_insert(cast(void*)swigCPtr, SWIGTYPE_p_std__listT_TagLib__String_t__iterator.swigGetCPtr(it), cast(char*)toStringz(value)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public strList sortedInsert(string value, bool unique) {
    strList ret = new strList(TagLibD_im.strList_sortedInsert__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(value), unique), false);
    return ret;
  }

  public strList sortedInsert(string value) {
    strList ret = new strList(TagLibD_im.strList_sortedInsert__SWIG_1(cast(void*)swigCPtr, cast(char*)toStringz(value)), false);
    return ret;
  }

  public strList append(string item) {
    strList ret = new strList(TagLibD_im.strList_append__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(item)), false);
    return ret;
  }

  public strList append(strList l) {
    strList ret = new strList(TagLibD_im.strList_append__SWIG_1(cast(void*)swigCPtr, strList.swigGetCPtr(l)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public strList prepend(string item) {
    strList ret = new strList(TagLibD_im.strList_prepend__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(item)), false);
    return ret;
  }

  public strList prepend(strList l) {
    strList ret = new strList(TagLibD_im.strList_prepend__SWIG_1(cast(void*)swigCPtr, strList.swigGetCPtr(l)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public strList clear() {
    strList ret = new strList(TagLibD_im.strList_clear(cast(void*)swigCPtr), false);
    return ret;
  }

  public uint size() const {
    auto ret = TagLibD_im.strList_size(cast(void*)swigCPtr);
    return ret;
  }

  public bool isEmpty() const {
    bool ret = TagLibD_im.strList_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__String_t__iterator find(string value) {
    SWIGTYPE_p_std__listT_TagLib__String_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__String_t__iterator(TagLibD_im.strList_find__SWIG_0(cast(void*)swigCPtr, cast(char*)toStringz(value)), true);
    return ret;
  }

  public bool contains(string value) const {
    bool ret = TagLibD_im.strList_contains(cast(void*)swigCPtr, cast(char*)toStringz(value)) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__String_t__iterator erase(SWIGTYPE_p_std__listT_TagLib__String_t__iterator it) {
    SWIGTYPE_p_std__listT_TagLib__String_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__String_t__iterator(TagLibD_im.strList_erase(cast(void*)swigCPtr, SWIGTYPE_p_std__listT_TagLib__String_t__iterator.swigGetCPtr(it)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public string front() const {
        char* cstr = TagLibD_im.strList_front__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public string back() const {
        char* cstr = TagLibD_im.strList_back__SWIG_0(cast(void*)swigCPtr);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public void setAutoDelete(bool autoDelete) {
    TagLibD_im.strList_setAutoDelete(cast(void*)swigCPtr, autoDelete);
  }

  public string opIndex(uint i) const {
        char* cstr = TagLibD_im.strList_opIndex(cast(void*)swigCPtr, i);
        string tmp;
        try
            tmp = to!string(cstr);
        finally
            free(cstr);
        return tmp;
    }

  public bool swigOpEquals(strList l) const {
    bool ret = TagLibD_im.strList_swigOpEquals(cast(void*)swigCPtr, strList.swigGetCPtr(l)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }
}

class FileTypeResolver {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(FileTypeResolver obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_FileTypeResolver(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public TagLib.TagLib.File createFile(string fileName, bool readAudioProperties, TagLib.TagLib.AudioProperties.ReadStyle audioPropertiesStyle) const {
    void* cPtr = TagLibD_im.FileTypeResolver_createFile__SWIG_0(cast(void*)swigCPtr, std.string.toStringz(fileName), readAudioProperties, cast(int)audioPropertiesStyle);
    TagLib.TagLib.File ret = (cPtr is null) ? null : new TagLib.TagLib.File(cPtr, false);
    return ret;
  }

  public TagLib.TagLib.File createFile(string fileName, bool readAudioProperties) const {
    void* cPtr = TagLibD_im.FileTypeResolver_createFile__SWIG_1(cast(void*)swigCPtr, std.string.toStringz(fileName), readAudioProperties);
    TagLib.TagLib.File ret = (cPtr is null) ? null : new TagLib.TagLib.File(cPtr, false);
    return ret;
  }

  public TagLib.TagLib.File createFile(string fileName) const {
    void* cPtr = TagLibD_im.FileTypeResolver_createFile__SWIG_2(cast(void*)swigCPtr, std.string.toStringz(fileName));
    TagLib.TagLib.File ret = (cPtr is null) ? null : new TagLib.TagLib.File(cPtr, false);
    return ret;
  }

  public this() {
    this(TagLibD_im.new_FileTypeResolver(), true);
    swigDirectorConnect();
  }

  private void swigDirectorConnect() {
    TagLibD_im.SwigDirector_FileTypeResolver_Callback0 callback0;
    if (swigIsMethodOverridden!(TagLib.TagLib.File delegate(string, bool, TagLib.TagLib.AudioProperties.ReadStyle), TagLib.TagLib.File function(string, bool, TagLib.TagLib.AudioProperties.ReadStyle), createFile)()) {
      callback0 = &swigDirectorCallback_FileTypeResolver_createFile__SWIG_0;
    }

    TagLibD_im.SwigDirector_FileTypeResolver_Callback1 callback1;
    if (swigIsMethodOverridden!(TagLib.TagLib.File delegate(string, bool), TagLib.TagLib.File function(string, bool), createFile)()) {
      callback1 = &swigDirectorCallback_FileTypeResolver_createFile__SWIG_1;
    }

    TagLibD_im.SwigDirector_FileTypeResolver_Callback2 callback2;
    if (swigIsMethodOverridden!(TagLib.TagLib.File delegate(string), TagLib.TagLib.File function(string), createFile)()) {
      callback2 = &swigDirectorCallback_FileTypeResolver_createFile__SWIG_2;
    }

    TagLibD_im.FileTypeResolver_director_connect(cast(void*)swigCPtr, cast(void*)this, callback0, callback1, callback2);
  }

  private bool swigIsMethodOverridden(DelegateType, FunctionType, alias fn)() const {
    DelegateType dg = &fn;
    return dg.funcptr != SwigNonVirtualAddressOf!(FunctionType, fn);
  }

  private static Function SwigNonVirtualAddressOf(Function, alias fn)() {
    return cast(Function) &fn;
  }
}

private extern(C) void* swigDirectorCallback_FileTypeResolver_createFile__SWIG_0(void* dObject, const(char)* fileName, uint readAudioProperties, int audioPropertiesStyle) {
  return TagLib.TagLib.File.swigGetCPtr((cast(FileTypeResolver)dObject).createFile(std.conv.to!string(fileName), (readAudioProperties ? true : false), cast(TagLib.TagLib.AudioProperties.ReadStyle)audioPropertiesStyle));
}

private extern(C) void* swigDirectorCallback_FileTypeResolver_createFile__SWIG_1(void* dObject, const(char)* fileName, uint readAudioProperties) {
  return TagLib.TagLib.File.swigGetCPtr((cast(FileTypeResolver)dObject).createFile(std.conv.to!string(fileName), (readAudioProperties ? true : false)));
}

private extern(C) void* swigDirectorCallback_FileTypeResolver_createFile__SWIG_2(void* dObject, const(char)* fileName) {
  return TagLib.TagLib.File.swigGetCPtr((cast(FileTypeResolver)dObject).createFile(std.conv.to!string(fileName)));
}

TagLib.TagLib.StringList genreList() {
  TagLib.TagLib.StringList ret = new TagLib.TagLib.StringList(TagLibD_im.genreList(), true);
  return ret;
}

TagLib.TagLib.genreMap genreMap() {
  TagLib.TagLib.genreMap ret = new TagLib.TagLib.genreMap(TagLibD_im.genreMap(), true);
  return ret;
}

string genre(int index) {
      char* cstr = TagLibD_im.genre(index);
      string tmp;
      try
          tmp = to!string(cstr);
      finally
          free(cstr);
      return tmp;
  }

int genreIndex(string name) {
  auto ret = TagLibD_im.genreIndex(cast(char*)toStringz(name));
  return ret;
}

class frameList {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(frameList obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_frameList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_frameList__SWIG_0(), true);
  }

  public this(frameList l) {
    this(TagLibD_im.new_frameList__SWIG_1(frameList.swigGetCPtr(l)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator begin() {
    SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator(TagLibD_im.frameList_begin__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator end() {
    SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator(TagLibD_im.frameList_end__SWIG_0(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator insert(SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator it, TagLib.ID3v2.ID3v2.Frame value) {
    SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator(TagLibD_im.frameList_insert(cast(void*)swigCPtr, SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator.swigGetCPtr(it), TagLib.ID3v2.ID3v2.Frame.swigGetCPtr(value)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public frameList sortedInsert(TagLib.ID3v2.ID3v2.Frame value, bool unique) {
    frameList ret = new frameList(TagLibD_im.frameList_sortedInsert__SWIG_0(cast(void*)swigCPtr, TagLib.ID3v2.ID3v2.Frame.swigGetCPtr(value), unique), false);
    return ret;
  }

  public frameList sortedInsert(TagLib.ID3v2.ID3v2.Frame value) {
    frameList ret = new frameList(TagLibD_im.frameList_sortedInsert__SWIG_1(cast(void*)swigCPtr, TagLib.ID3v2.ID3v2.Frame.swigGetCPtr(value)), false);
    return ret;
  }

  public frameList append(TagLib.ID3v2.ID3v2.Frame item) {
    frameList ret = new frameList(TagLibD_im.frameList_append__SWIG_0(cast(void*)swigCPtr, TagLib.ID3v2.ID3v2.Frame.swigGetCPtr(item)), false);
    return ret;
  }

  public frameList append(frameList l) {
    frameList ret = new frameList(TagLibD_im.frameList_append__SWIG_1(cast(void*)swigCPtr, frameList.swigGetCPtr(l)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public frameList prepend(TagLib.ID3v2.ID3v2.Frame item) {
    frameList ret = new frameList(TagLibD_im.frameList_prepend__SWIG_0(cast(void*)swigCPtr, TagLib.ID3v2.ID3v2.Frame.swigGetCPtr(item)), false);
    return ret;
  }

  public frameList prepend(frameList l) {
    frameList ret = new frameList(TagLibD_im.frameList_prepend__SWIG_1(cast(void*)swigCPtr, frameList.swigGetCPtr(l)), false);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public frameList clear() {
    frameList ret = new frameList(TagLibD_im.frameList_clear(cast(void*)swigCPtr), false);
    return ret;
  }

  public uint size() const {
    auto ret = TagLibD_im.frameList_size(cast(void*)swigCPtr);
    return ret;
  }

  public bool isEmpty() const {
    bool ret = TagLibD_im.frameList_isEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator find(TagLib.ID3v2.ID3v2.Frame value) {
    SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator(TagLibD_im.frameList_find__SWIG_0(cast(void*)swigCPtr, TagLib.ID3v2.ID3v2.Frame.swigGetCPtr(value)), true);
    return ret;
  }

  public bool contains(TagLib.ID3v2.ID3v2.Frame value) const {
    bool ret = TagLibD_im.frameList_contains(cast(void*)swigCPtr, TagLib.ID3v2.ID3v2.Frame.swigGetCPtr(value)) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator erase(SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator it) {
    SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator ret = new SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator(TagLibD_im.frameList_erase(cast(void*)swigCPtr, SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator.swigGetCPtr(it)), true);
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }

  public TagLib.ID3v2.ID3v2.Frame front() const {
    void* cPtr = TagLibD_im.frameList_front__SWIG_0(cast(void*)swigCPtr);
    TagLib.ID3v2.ID3v2.Frame ret = (cPtr is null) ? null : new TagLib.ID3v2.ID3v2.Frame(cPtr, false);
    return ret;
  }

  public TagLib.ID3v2.ID3v2.Frame back() const {
    void* cPtr = TagLibD_im.frameList_back__SWIG_0(cast(void*)swigCPtr);
    TagLib.ID3v2.ID3v2.Frame ret = (cPtr is null) ? null : new TagLib.ID3v2.ID3v2.Frame(cPtr, false);
    return ret;
  }

  public void setAutoDelete(bool autoDelete) {
    TagLibD_im.frameList_setAutoDelete(cast(void*)swigCPtr, autoDelete);
  }

  public TagLib.ID3v2.ID3v2.Frame opIndex(uint i) const {
    void* cPtr = TagLibD_im.frameList_opIndex(cast(void*)swigCPtr, i);
    TagLib.ID3v2.ID3v2.Frame ret = (cPtr is null) ? null : new TagLib.ID3v2.ID3v2.Frame(cPtr, false);
    return ret;
  }

  public bool swigOpEquals(frameList l) const {
    bool ret = TagLibD_im.frameList_swigOpEquals(cast(void*)swigCPtr, frameList.swigGetCPtr(l)) ? true : false;
    if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
    return ret;
  }
}

class PeakVolume {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(PeakVolume obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          TagLibD_im.delete_PeakVolume(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(TagLibD_im.new_PeakVolume(), true);
  }

  public void bitsRepresentingPeak(ubyte value) @property {
    TagLibD_im.PeakVolume_bitsRepresentingPeak_set(cast(void*)swigCPtr, value);
  }

  public ubyte bitsRepresentingPeak() @property const {
    auto ret = TagLibD_im.PeakVolume_bitsRepresentingPeak_get(cast(void*)swigCPtr);
    return ret;
  }

  public void peakVolume(TagLib.TagLib.ByteVector value) @property {
    TagLibD_im.PeakVolume_peakVolume_set(cast(void*)swigCPtr, TagLib.TagLib.ByteVector.swigGetCPtr(value));
  }

  public TagLib.TagLib.ByteVector peakVolume() @property const {
    void* cPtr = TagLibD_im.PeakVolume_peakVolume_get(cast(void*)swigCPtr);
    TagLib.TagLib.ByteVector ret = (cPtr is null) ? null : new TagLib.TagLib.ByteVector(cPtr, false);
    return ret;
  }
}

uint toUInt(TagLib.TagLib.ByteVector data) {
  auto ret = TagLibD_im.toUInt(TagLib.TagLib.ByteVector.swigGetCPtr(data));
  if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  return ret;
}

TagLib.TagLib.ByteVector fromUInt(uint value) {
  TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.fromUInt(value), true);
  return ret;
}

TagLib.TagLib.ByteVector decode(TagLib.TagLib.ByteVector input) {
  TagLib.TagLib.ByteVector ret = new TagLib.TagLib.ByteVector(TagLibD_im.decode(TagLib.TagLib.ByteVector.swigGetCPtr(input)), true);
  if (TagLibD_im.SwigPendingException.isPending) throw TagLibD_im.SwigPendingException.retrieve();
  return ret;
}

uint HeaderSize() @property {
  auto ret = TagLibD_im.HeaderSize_get();
  return ret;
}

class SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__ListT_TagLib__Ogg__Page_p_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__ListT_TagLib__ASF__Attribute_t_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__ListT_TagLib__ASF__Attribute_t_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__MP4__Item__IntPair {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__MP4__Item__IntPair obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__mapT_TagLib__String_int_t__iterator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__MP4__Atoms {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__MP4__Atoms obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__ListT_TagLib__MP4__CoverArt_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__ListT_TagLib__MP4__CoverArt_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__ListT_int_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__ListT_int_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__MP4__Item_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__MP4__Item_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ListT_Frame_p_t_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ListT_Frame_p_t_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__RelativeVolumeFrame__ChannelType_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__RelativeVolumeFrame__ChannelType_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_TagLib__ListT_Frame_p_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_TagLib__ListT_Frame_p_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__listT_TagLib__ByteVector_t__iterator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__listT_TagLib__ID3v2__Frame_p_t__iterator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__listT_TagLib__String_t__iterator {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__listT_TagLib__String_t__iterator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__vectorT_char_t__iterator {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__vectorT_char_t__iterator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin TagLibD_im.SwigOperatorDefinitions;
}
