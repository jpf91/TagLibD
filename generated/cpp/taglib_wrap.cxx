/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGD
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


// Support for throwing D exceptions from C/C++.
typedef enum {
  SWIG_DException = 0,
  SWIG_DIllegalArgumentException,
  SWIG_DIllegalElementException,
  SWIG_DIOException,
  SWIG_DNoSuchElementException,
} SWIG_DExceptionCodes;

typedef void (* SWIG_DExceptionCallback_t)(const char *);

typedef struct {
  SWIG_DExceptionCodes code;
  SWIG_DExceptionCallback_t callback;
} SWIG_DException_t;

static SWIG_DException_t SWIG_d_exceptions[] = {
  { SWIG_DException, NULL },
  { SWIG_DIllegalArgumentException, NULL },
  { SWIG_DIllegalElementException, NULL },
  { SWIG_DIOException, NULL },
  { SWIG_DNoSuchElementException, NULL }
};

static void SWIGUNUSED SWIG_DSetPendingException(SWIG_DExceptionCodes code, const char *msg) {
  if ((size_t)code < sizeof(SWIG_d_exceptions)/sizeof(SWIG_DException_t)) {
    SWIG_d_exceptions[code].callback(msg);
  } else {
    SWIG_d_exceptions[SWIG_DException].callback(msg);
  }
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterExceptionCallbacks_TagLibD(
  SWIG_DExceptionCallback_t exceptionCallback,
  SWIG_DExceptionCallback_t illegalArgumentCallback,
  SWIG_DExceptionCallback_t illegalElementCallback,
  SWIG_DExceptionCallback_t ioCallback,
  SWIG_DExceptionCallback_t noSuchElementCallback) {
  SWIG_d_exceptions[SWIG_DException].callback = exceptionCallback;
  SWIG_d_exceptions[SWIG_DIllegalArgumentException].callback = illegalArgumentCallback;
  SWIG_d_exceptions[SWIG_DIllegalElementException].callback = illegalElementCallback;
  SWIG_d_exceptions[SWIG_DIOException].callback = ioCallback;
  SWIG_d_exceptions[SWIG_DNoSuchElementException].callback = noSuchElementCallback;
}


// Callback for returning strings to D without leaking memory.
typedef char * (* SWIG_DStringHelperCallback)(const char *);
static SWIG_DStringHelperCallback SWIG_d_string_callback = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterStringCallback_TagLibD(SWIG_DStringHelperCallback callback) {
  SWIG_d_string_callback = callback;
}


/* Contract support. */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_DSetPendingException(SWIG_DException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that D proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  // Director base class â€“ not used in D directors.
  class Director {
  };

  // Base class for director exceptions.
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  // Exception which is thrown when attempting to call a pure virtual method
  // from D code thorugh the director layer.
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempted to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */

    //TagLib
    #include "taglib/tbytevector.h"
    #include "taglib/tstring.h"
    #include "taglib/taglib.h"
    #include "taglib/tlist.h"
    #include "taglib/taglib_export.h"
    #include "taglib/tmap.h"
    #include "taglib/tbytevectorlist.h"
    #include "taglib/tstringlist.h"
    #include "taglib/audioproperties.h"
    #include "taglib/tag.h"
    #include "taglib/tfile.h"
    #include "taglib/fileref.h"

    //TagLib::APE
    #include "taglib/apefooter.h"
    #include "taglib/apeitem.h"
    #include "taglib/apetag.h"

    //TagLib::ASF
    #include "taglib/asfattribute.h"
    #include "taglib/asfproperties.h"
    #include "taglib/asffile.h"
    #include "taglib/asftag.h"

    //TagLib::FLAC
    #include "taglib/flacproperties.h"
    #include "taglib/flacfile.h"

    //TagLib::ID3v1
    #include "taglib/id3v1genres.h"
    #include "taglib/id3v1tag.h"

    //TagLib::ID3v2
    #include "taglib/id3v2frame.h"
    #include "taglib/id3v2header.h"
    #include "taglib/id3v2footer.h"
    #include "taglib/id3v2framefactory.h"
    #include "taglib/id3v2tag.h"
    #include "taglib/id3v2extendedheader.h"
    #include "taglib/attachedpictureframe.h"
    #include "taglib/commentsframe.h"
    #include "taglib/generalencapsulatedobjectframe.h"
    #include "taglib/popularimeterframe.h"
    #include "taglib/privateframe.h"
    #include "taglib/relativevolumeframe.h"
    #include "taglib/textidentificationframe.h"
    #include "taglib/uniquefileidentifierframe.h"
    #include "taglib/unsynchronizedlyricsframe.h"
    #include "taglib/urllinkframe.h"

    //TagLib::ID3v2::SynchData
    #include "taglib/id3v2synchdata.h"

    //TagLib::MP4
    #include "taglib/mp4coverart.h"
    #include "taglib/mp4file.h"
    #include "taglib/mp4item.h"
    #include "taglib/mp4properties.h"
    #include "taglib/mp4tag.h"

    //TagLib::MPC
    #include "taglib/mpcproperties.h"
    #include "taglib/mpcfile.h"

    //TagLib::MPEG
    #include "taglib/xingheader.h"
    #include "taglib/mpegproperties.h"
    #include "taglib/mpegheader.h"
    #include "taglib/mpegfile.h"

    //TagLib::Ogg
    #include "taglib/oggpage.h"
    #include "taglib/oggpageheader.h"
    #include "taglib/xiphcomment.h"
    #include "taglib/oggfile.h"

    //TagLib::Ogg::FLAC
    #include "taglib/oggflacfile.h"

    //TagLib::Ogg::Speex
    #include "taglib/speexproperties.h"
    #include "taglib/speexfile.h"

    //TagLib::Ogg::Vorbis
    #include "taglib/vorbisproperties.h"
    #include "taglib/vorbisfile.h"

    //TagLib::RIFF
    #include "taglib/rifffile.h"

    //TagLib::RIFF:AIFF
    #include "taglib/aiffproperties.h"
    #include "taglib/aifffile.h"

    //TagLib::RIFF:WAV
    #include "taglib/wavproperties.h"
    #include "taglib/wavfile.h"

    //TagLib::TrueAudio
    #include "taglib/trueaudioproperties.h"
    #include "taglib/trueaudiofile.h"

    //TagLib::WavPack
    #include "taglib/wavpackproperties.h"
    #include "taglib/wavpackfile.h"


typedef TagLib::FileRef::FileTypeResolver FileTypeResolver;


typedef TagLib::ID3v2::RelativeVolumeFrame::PeakVolume PeakVolume;


typedef TagLib::ID3v2::RelativeVolumeFrame RelativeVolumeFrame;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "taglib_wrap.h"

SwigDirector_FileTypeResolver::SwigDirector_FileTypeResolver() : FileTypeResolver(), Swig::Director() {
  swig_init_callbacks();
}

TagLib::File *SwigDirector_FileTypeResolver::createFile(TagLib::FileName fileName, bool readAudioProperties, TagLib::AudioProperties::ReadStyle audioPropertiesStyle) const {
  TagLib::File *c_result = 0 ;
  void * jresult = 0 ;
  const char* jfileName  ;
  unsigned int jreadAudioProperties  ;
  int jaudioPropertiesStyle  ;
  
  if (!swig_callback_createFile__SWIG_0) {
    throw Swig::DirectorPureVirtualException("FileTypeResolver::createFile");
  } else {
    jfileName = SWIG_d_string_callback((const char *)fileName); 
    jreadAudioProperties = readAudioProperties;
    jaudioPropertiesStyle = audioPropertiesStyle;
    jresult = (void *) swig_callback_createFile__SWIG_0(d_object, jfileName, jreadAudioProperties, jaudioPropertiesStyle);
    c_result = (TagLib::File *)jresult;
  }
  return c_result;
}

void SwigDirector_FileTypeResolver::swig_connect_director(void* dobj, SWIG_Callback0_t callback_createFile__SWIG_0, SWIG_Callback1_t callback_createFile__SWIG_1, SWIG_Callback2_t callback_createFile__SWIG_2) {
  d_object = dobj;swig_callback_createFile__SWIG_0 = callback_createFile__SWIG_0;
  swig_callback_createFile__SWIG_1 = callback_createFile__SWIG_1;
  swig_callback_createFile__SWIG_2 = callback_createFile__SWIG_2;
}

void SwigDirector_FileTypeResolver::swig_init_callbacks() {
  swig_callback_createFile__SWIG_0 = 0;
  swig_callback_createFile__SWIG_1 = 0;
  swig_callback_createFile__SWIG_2 = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int D_TAGLIB_MAJOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TAGLIB_MINOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int) 6;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TAGLIB_PATCH_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVector__SWIG_0() {
  void * jresult ;
  TagLib::ByteVector *result = 0 ;
  
  result = (TagLib::ByteVector *)new TagLib::ByteVector();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVector__SWIG_1(unsigned int jarg1, char jarg2) {
  void * jresult ;
  TagLib::uint arg1 ;
  char arg2 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::uint)jarg1;
  arg2 = (char)jarg2;
  result = (TagLib::ByteVector *)new TagLib::ByteVector(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVector__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  TagLib::uint arg1 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::uint)jarg1;
  result = (TagLib::ByteVector *)new TagLib::ByteVector(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVector__SWIG_3(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ByteVector *)new TagLib::ByteVector((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVector__SWIG_4(char jarg1) {
  void * jresult ;
  char arg1 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (char)jarg1;
  result = (TagLib::ByteVector *)new TagLib::ByteVector(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVector__SWIG_5(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (TagLib::uint)jarg2;
  result = (TagLib::ByteVector *)new TagLib::ByteVector((char const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVector__SWIG_6(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (TagLib::ByteVector *)new TagLib::ByteVector((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ByteVector(void * jarg1) {
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_ByteVector_setData__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  char *arg2 = (char *) 0 ;
  TagLib::uint arg3 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (TagLib::uint)jarg3;
  result = (TagLib::ByteVector *) &(arg1)->setData((char const *)arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_setData__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  char *arg2 = (char *) 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (char *)jarg2; 
  result = (TagLib::ByteVector *) &(arg1)->setData((char const *)arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_TagLib_ByteVector_data__SWIG_0(void * jarg1) {
  char * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  char *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (char *)(arg1)->data();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_mid__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint arg2 ;
  TagLib::uint arg3 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  arg3 = (TagLib::uint)jarg3;
  result = ((TagLib::ByteVector const *)arg1)->mid(arg2,arg3);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_mid__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  result = ((TagLib::ByteVector const *)arg1)->mid(arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT char D_TagLib_ByteVector_at(void * jarg1, unsigned int jarg2) {
  char jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint arg2 ;
  char result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  result = (char)((TagLib::ByteVector const *)arg1)->at(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ByteVector_find__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (int)jarg4;
  result = (int)((TagLib::ByteVector const *)arg1)->find((TagLib::ByteVector const &)*arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ByteVector_find__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  int result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  result = (int)((TagLib::ByteVector const *)arg1)->find((TagLib::ByteVector const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ByteVector_find__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  int result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (int)((TagLib::ByteVector const *)arg1)->find((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ByteVector_rfind__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (int)jarg4;
  result = (int)((TagLib::ByteVector const *)arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ByteVector_rfind__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  int result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  result = (int)((TagLib::ByteVector const *)arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ByteVector_rfind__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  int result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (int)((TagLib::ByteVector const *)arg1)->rfind((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_containsAt__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  TagLib::uint arg4 ;
  TagLib::uint arg5 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (TagLib::uint)jarg4;
  arg5 = (TagLib::uint)jarg5;
  result = (bool)((TagLib::ByteVector const *)arg1)->containsAt((TagLib::ByteVector const &)*arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_containsAt__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  TagLib::uint arg4 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (TagLib::uint)jarg4;
  result = (bool)((TagLib::ByteVector const *)arg1)->containsAt((TagLib::ByteVector const &)*arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_containsAt__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  result = (bool)((TagLib::ByteVector const *)arg1)->containsAt((TagLib::ByteVector const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_startsWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::ByteVector const *)arg1)->startsWith((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_endsWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::ByteVector const *)arg1)->endsWith((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_replace(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ByteVector *arg3 = 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::ByteVector *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ByteVector *) &(arg1)->replace((TagLib::ByteVector const &)*arg2,(TagLib::ByteVector const &)*arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ByteVector_endsWithPartialMatch(void * jarg1, void * jarg2) {
  int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  int result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (int)((TagLib::ByteVector const *)arg1)->endsWithPartialMatch((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_append(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ByteVector *) &(arg1)->append((TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_clear(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (TagLib::ByteVector *) &(arg1)->clear();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_size(void * jarg1) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_resize__SWIG_0(void * jarg1, unsigned int jarg2, char jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint arg2 ;
  char arg3 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  arg3 = (char)jarg3;
  result = (TagLib::ByteVector *) &(arg1)->resize(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_resize__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  result = (TagLib::ByteVector *) &(arg1)->resize(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector::Iterator result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (arg1)->begin();
  jresult = new TagLib::ByteVector::Iterator((const TagLib::ByteVector::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_end__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector::Iterator result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (arg1)->end();
  jresult = new TagLib::ByteVector::Iterator((const TagLib::ByteVector::Iterator &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_isNull(void * jarg1) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (bool)((TagLib::ByteVector const *)arg1)->isNull();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (bool)((TagLib::ByteVector const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_checksum(void * jarg1) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->checksum();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_toUInt__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  bool arg2 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->toUInt(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_toUInt__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (TagLib::uint)((TagLib::ByteVector const *)arg1)->toUInt();
  jresult = result;
  return jresult;
}


SWIGEXPORT short D_TagLib_ByteVector_toShort__SWIG_0(void * jarg1, unsigned int jarg2) {
  short jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  bool arg2 ;
  short result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (short)((TagLib::ByteVector const *)arg1)->toShort(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT short D_TagLib_ByteVector_toShort__SWIG_1(void * jarg1) {
  short jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  short result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (short)((TagLib::ByteVector const *)arg1)->toShort();
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_TagLib_ByteVector_toLongLong__SWIG_0(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  bool arg2 ;
  long long result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (long long)((TagLib::ByteVector const *)arg1)->toLongLong(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_TagLib_ByteVector_toLongLong__SWIG_1(void * jarg1) {
  long long jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  long long result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  result = (long long)((TagLib::ByteVector const *)arg1)->toLongLong();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromUInt__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::uint arg1 ;
  bool arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::uint)jarg1;
  arg2 = jarg2 ? true : false;
  result = TagLib::ByteVector::fromUInt(arg1,arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromUInt__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  TagLib::uint arg1 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::uint)jarg1;
  result = TagLib::ByteVector::fromUInt(arg1);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromShort__SWIG_0(short jarg1, unsigned int jarg2) {
  void * jresult ;
  short arg1 ;
  bool arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (short)jarg1;
  arg2 = jarg2 ? true : false;
  result = TagLib::ByteVector::fromShort(arg1,arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromShort__SWIG_1(short jarg1) {
  void * jresult ;
  short arg1 ;
  TagLib::ByteVector result;
  
  arg1 = (short)jarg1;
  result = TagLib::ByteVector::fromShort(arg1);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromLongLong__SWIG_0(long long jarg1, unsigned int jarg2) {
  void * jresult ;
  long long arg1 ;
  bool arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (long long)jarg1;
  arg2 = jarg2 ? true : false;
  result = TagLib::ByteVector::fromLongLong(arg1,arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromLongLong__SWIG_1(long long jarg1) {
  void * jresult ;
  long long arg1 ;
  TagLib::ByteVector result;
  
  arg1 = (long long)jarg1;
  result = TagLib::ByteVector::fromLongLong(arg1);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromCString__SWIG_0(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (char *)jarg1; 
  arg2 = (TagLib::uint)jarg2;
  result = TagLib::ByteVector::fromCString((char const *)arg1,arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_fromCString__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (char *)jarg1; 
  result = TagLib::ByteVector::fromCString((char const *)arg1);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT char D_TagLib_ByteVector_opIndex__SWIG_0(void * jarg1, int jarg2) {
  char jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (int)jarg2;
  result = (char *) &((TagLib::ByteVector const *)arg1)->operator [](arg2);
  jresult = *result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_swigOpEquals__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::ByteVector const *)arg1)->operator ==((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_swigOpEquals__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)((TagLib::ByteVector const *)arg1)->operator ==((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_swigOpLt(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::ByteVector const *)arg1)->operator <((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ByteVector_swigOpGt(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::ByteVector const *)arg1)->operator >((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVector_swigOpAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = ((TagLib::ByteVector const *)arg1)->operator +((TagLib::ByteVector const &)*arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ByteVector__null_set(void * jarg1) {
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  TagLib::ByteVector::null = *arg1;
}


SWIGEXPORT void * D_TagLib_ByteVector__null_get() {
  void * jresult ;
  TagLib::ByteVector *result = 0 ;
  
  result = (TagLib::ByteVector *)&TagLib::ByteVector::null;
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_bvList__SWIG_0() {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  result = (TagLib::List< TagLib::ByteVector > *)new TagLib::List< TagLib::ByteVector >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_bvList__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ByteVector > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ByteVector > *)new TagLib::List< TagLib::ByteVector >((TagLib::List< TagLib::ByteVector > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_bvList(void * jarg1) {
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_bvList_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  result = (arg1)->begin();
  jresult = new TagLib::List< TagLib::ByteVector >::Iterator((const TagLib::List< TagLib::ByteVector >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_bvList_end__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  result = (arg1)->end();
  jresult = new TagLib::List< TagLib::ByteVector >::Iterator((const TagLib::List< TagLib::ByteVector >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_bvList_insert(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector >::Iterator arg2 ;
  TagLib::ByteVector *arg3 = 0 ;
  TagLib::List< TagLib::ByteVector >::Iterator *argp2 ;
  TagLib::List< TagLib::ByteVector >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  argp2 = (TagLib::List< TagLib::ByteVector >::Iterator *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::List< TagLib::ByteVector >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (TagLib::ByteVector *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (arg1)->insert(arg2,(TagLib::ByteVector const &)*arg3);
  jresult = new TagLib::List< TagLib::ByteVector >::Iterator((const TagLib::List< TagLib::ByteVector >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_bvList_sortedInsert__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool arg3 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = (TagLib::List< TagLib::ByteVector > *) &(arg1)->sortedInsert((TagLib::ByteVector const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_bvList_sortedInsert__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ByteVector > *) &(arg1)->sortedInsert((TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_bvList_append__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ByteVector > *) &(arg1)->append((TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_bvList_append__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector > *arg2 = 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::List< TagLib::ByteVector > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ByteVector > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ByteVector > *) &(arg1)->append((TagLib::List< TagLib::ByteVector > const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_bvList_prepend__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ByteVector > *) &(arg1)->prepend((TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_bvList_prepend__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector > *arg2 = 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::List< TagLib::ByteVector > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ByteVector > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ByteVector > *) &(arg1)->prepend((TagLib::List< TagLib::ByteVector > const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_bvList_clear(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  result = (TagLib::List< TagLib::ByteVector > *) &(arg1)->clear();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_bvList_size(void * jarg1) {
  unsigned int jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  result = (TagLib::uint)((TagLib::List< TagLib::ByteVector > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_bvList_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  result = (bool)((TagLib::List< TagLib::ByteVector > const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_bvList_find__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::List< TagLib::ByteVector >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (arg1)->find((TagLib::ByteVector const &)*arg2);
  jresult = new TagLib::List< TagLib::ByteVector >::Iterator((const TagLib::List< TagLib::ByteVector >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_bvList_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::List< TagLib::ByteVector > const *)arg1)->contains((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_bvList_erase(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector >::Iterator arg2 ;
  TagLib::List< TagLib::ByteVector >::Iterator *argp2 ;
  TagLib::List< TagLib::ByteVector >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  argp2 = (TagLib::List< TagLib::ByteVector >::Iterator *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::List< TagLib::ByteVector >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  jresult = new TagLib::List< TagLib::ByteVector >::Iterator((const TagLib::List< TagLib::ByteVector >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_bvList_front__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  result = (TagLib::ByteVector *) &((TagLib::List< TagLib::ByteVector > const *)arg1)->front();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_bvList_back__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  result = (TagLib::ByteVector *) &((TagLib::List< TagLib::ByteVector > const *)arg1)->back();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_bvList_setAutoDelete(void * jarg1, unsigned int jarg2) {
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setAutoDelete(arg2);
}


SWIGEXPORT void * D_bvList_opIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  result = (TagLib::ByteVector *) &((TagLib::List< TagLib::ByteVector > const *)arg1)->operator [](arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_bvList_swigOpEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::List< TagLib::ByteVector > *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::ByteVector > *)jarg1;
  arg2 = (TagLib::List< TagLib::ByteVector > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ByteVector > const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::List< TagLib::ByteVector > const *)arg1)->operator ==((TagLib::List< TagLib::ByteVector > const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ByteVectorList__SWIG_0() {
  void * jresult ;
  TagLib::ByteVectorList *result = 0 ;
  
  result = (TagLib::ByteVectorList *)new TagLib::ByteVectorList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ByteVectorList(void * jarg1) {
  TagLib::ByteVectorList *arg1 = (TagLib::ByteVectorList *) 0 ;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_ByteVectorList__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = 0 ;
  TagLib::ByteVectorList *result = 0 ;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVectorList const & type is null");
    return 0;
  } 
  result = (TagLib::ByteVectorList *)new TagLib::ByteVectorList((TagLib::ByteVectorList const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVectorList_toByteVector__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = (TagLib::ByteVectorList *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = ((TagLib::ByteVectorList const *)arg1)->toByteVector((TagLib::ByteVector const &)*arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVectorList_toByteVector__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = (TagLib::ByteVectorList *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  result = ((TagLib::ByteVectorList const *)arg1)->toByteVector();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVectorList_split__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  int arg3 ;
  TagLib::ByteVectorList result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (int)jarg3;
  result = TagLib::ByteVectorList::split((TagLib::ByteVector const &)*arg1,(TagLib::ByteVector const &)*arg2,arg3);
  jresult = new TagLib::ByteVectorList((const TagLib::ByteVectorList &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVectorList_split__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ByteVectorList result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = TagLib::ByteVectorList::split((TagLib::ByteVector const &)*arg1,(TagLib::ByteVector const &)*arg2);
  jresult = new TagLib::ByteVectorList((const TagLib::ByteVectorList &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ByteVectorList_split__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  TagLib::ByteVectorList result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = TagLib::ByteVectorList::split((TagLib::ByteVector const &)*arg1,(TagLib::ByteVector const &)*arg2,arg3,arg4);
  jresult = new TagLib::ByteVectorList((const TagLib::ByteVectorList &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_strList__SWIG_0() {
  void * jresult ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  result = (TagLib::List< TagLib::String > *)new TagLib::List< TagLib::String >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_strList__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::String > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::String > *)new TagLib::List< TagLib::String >((TagLib::List< TagLib::String > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_strList(void * jarg1) {
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_strList_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  result = (arg1)->begin();
  jresult = new TagLib::List< TagLib::String >::Iterator((const TagLib::List< TagLib::String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_strList_end__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  result = (arg1)->end();
  jresult = new TagLib::List< TagLib::String >::Iterator((const TagLib::List< TagLib::String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_strList_insert(void * jarg1, void * jarg2, char* jarg3) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String >::Iterator arg2 ;
  TagLib::String *arg3 = 0 ;
  TagLib::List< TagLib::String >::Iterator *argp2 ;
  TagLib::List< TagLib::String >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  argp2 = (TagLib::List< TagLib::String >::Iterator *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::List< TagLib::String >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  {
    arg3 = &TagLib::String(jarg3, TagLib::String::UTF8);
  }
  result = (arg1)->insert(arg2,(TagLib::String const &)*arg3);
  jresult = new TagLib::List< TagLib::String >::Iterator((const TagLib::List< TagLib::String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_strList_sortedInsert__SWIG_0(void * jarg1, char* jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool arg3 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  arg3 = jarg3 ? true : false;
  result = (TagLib::List< TagLib::String > *) &(arg1)->sortedInsert((TagLib::String const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_strList_sortedInsert__SWIG_1(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::List< TagLib::String > *) &(arg1)->sortedInsert((TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_strList_append__SWIG_0(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::List< TagLib::String > *) &(arg1)->append((TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_strList_append__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String > *arg2 = 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  arg2 = (TagLib::List< TagLib::String > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::String > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::String > *) &(arg1)->append((TagLib::List< TagLib::String > const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_strList_prepend__SWIG_0(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::List< TagLib::String > *) &(arg1)->prepend((TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_strList_prepend__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String > *arg2 = 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  arg2 = (TagLib::List< TagLib::String > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::String > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::String > *) &(arg1)->prepend((TagLib::List< TagLib::String > const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_strList_clear(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  result = (TagLib::List< TagLib::String > *) &(arg1)->clear();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_strList_size(void * jarg1) {
  unsigned int jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  result = (TagLib::uint)((TagLib::List< TagLib::String > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_strList_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  result = (bool)((TagLib::List< TagLib::String > const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_strList_find__SWIG_0(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::List< TagLib::String >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (arg1)->find((TagLib::String const &)*arg2);
  jresult = new TagLib::List< TagLib::String >::Iterator((const TagLib::List< TagLib::String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_strList_contains(void * jarg1, char* jarg2) {
  unsigned int jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (bool)((TagLib::List< TagLib::String > const *)arg1)->contains((TagLib::String const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_strList_erase(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String >::Iterator arg2 ;
  TagLib::List< TagLib::String >::Iterator *argp2 ;
  TagLib::List< TagLib::String >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  argp2 = (TagLib::List< TagLib::String >::Iterator *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::List< TagLib::String >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  jresult = new TagLib::List< TagLib::String >::Iterator((const TagLib::List< TagLib::String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT char* D_strList_front__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  result = (TagLib::String *) &((TagLib::List< TagLib::String > const *)arg1)->front();
  {
    std::string buffer = result->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_strList_back__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  result = (TagLib::String *) &((TagLib::List< TagLib::String > const *)arg1)->back();
  {
    std::string buffer = result->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_strList_setAutoDelete(void * jarg1, unsigned int jarg2) {
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setAutoDelete(arg2);
}


SWIGEXPORT char* D_strList_opIndex(void * jarg1, unsigned int jarg2) {
  char* jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::uint arg2 ;
  TagLib::String *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  result = (TagLib::String *) &((TagLib::List< TagLib::String > const *)arg1)->operator [](arg2);
  {
    std::string buffer = result->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_strList_swigOpEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::List< TagLib::String > *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::String > *)jarg1;
  arg2 = (TagLib::List< TagLib::String > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::String > const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::List< TagLib::String > const *)arg1)->operator ==((TagLib::List< TagLib::String > const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_StringList__SWIG_0() {
  void * jresult ;
  TagLib::StringList *result = 0 ;
  
  result = (TagLib::StringList *)new TagLib::StringList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_StringList__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::StringList *arg1 = 0 ;
  TagLib::StringList *result = 0 ;
  
  arg1 = (TagLib::StringList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return 0;
  } 
  result = (TagLib::StringList *)new TagLib::StringList((TagLib::StringList const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_StringList__SWIG_2(char* jarg1) {
  void * jresult ;
  TagLib::String *arg1 = 0 ;
  TagLib::StringList *result = 0 ;
  
  {
    arg1 = &TagLib::String(jarg1, TagLib::String::UTF8);
  }
  result = (TagLib::StringList *)new TagLib::StringList((TagLib::String const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_StringList__SWIG_3(void * jarg1) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = 0 ;
  TagLib::StringList *result = 0 ;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVectorList const & type is null");
    return 0;
  } 
  result = (TagLib::StringList *)new TagLib::StringList((TagLib::ByteVectorList const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_StringList(void * jarg1) {
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  
  arg1 = (TagLib::StringList *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_StringList_toWString__SWIG_0(void * jarg1, char* jarg2) {
  char* jresult ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::StringList *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = ((TagLib::StringList const *)arg1)->toString((TagLib::String const &)*arg2);
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_StringList_toWString__SWIG_1(void * jarg1) {
  char* jresult ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::StringList *)jarg1;
  result = ((TagLib::StringList const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_StringList_append__SWIG_0(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::StringList *result = 0 ;
  
  arg1 = (TagLib::StringList *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::StringList *) &(arg1)->append((TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_StringList_append__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  TagLib::StringList *result = 0 ;
  
  arg1 = (TagLib::StringList *)jarg1;
  arg2 = (TagLib::StringList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return 0;
  } 
  result = (TagLib::StringList *) &(arg1)->append((TagLib::StringList const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_StringList_split(char* jarg1, char* jarg2) {
  void * jresult ;
  TagLib::String *arg1 = 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::StringList result;
  
  {
    arg1 = &TagLib::String(jarg1, TagLib::String::UTF8);
  }
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = TagLib::StringList::split((TagLib::String const &)*arg1,(TagLib::String const &)*arg2);
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_AudioProperties(void * jarg1) {
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  
  arg1 = (TagLib::AudioProperties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_AudioProperties_length(void * jarg1) {
  int jresult ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  arg1 = (TagLib::AudioProperties *)jarg1;
  result = (int)((TagLib::AudioProperties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_AudioProperties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  arg1 = (TagLib::AudioProperties *)jarg1;
  result = (int)((TagLib::AudioProperties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_AudioProperties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  arg1 = (TagLib::AudioProperties *)jarg1;
  result = (int)((TagLib::AudioProperties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_AudioProperties_channels(void * jarg1) {
  int jresult ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  arg1 = (TagLib::AudioProperties *)jarg1;
  result = (int)((TagLib::AudioProperties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Tag(void * jarg1) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_Tag_title__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = ((TagLib::Tag const *)arg1)->title();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Tag_artist__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = ((TagLib::Tag const *)arg1)->artist();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Tag_album__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = ((TagLib::Tag const *)arg1)->album();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Tag_comment__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = ((TagLib::Tag const *)arg1)->comment();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Tag_genre__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = ((TagLib::Tag const *)arg1)->genre();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Tag_year__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::Tag const *)arg1)->year();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Tag_track__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::Tag const *)arg1)->track();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Tag_title__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Tag_artist__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Tag_album__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Tag_comment__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Tag_genre__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Tag_year__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setYear(arg2);
}


SWIGEXPORT void D_TagLib_Tag_track__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTrack(arg2);
}


SWIGEXPORT unsigned int D_TagLib_Tag_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  bool result;
  
  arg1 = (TagLib::Tag *)jarg1;
  result = (bool)((TagLib::Tag const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Tag_duplicate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::Tag *arg2 = (TagLib::Tag *) 0 ;
  bool arg3 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  arg2 = (TagLib::Tag *)jarg2;
  arg3 = jarg3 ? true : false;
  TagLib::Tag::duplicate((TagLib::Tag const *)arg1,arg2,arg3);
}


SWIGEXPORT void D_TagLib_Tag_duplicate__SWIG_1(void * jarg1, void * jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::Tag *arg2 = (TagLib::Tag *) 0 ;
  
  arg1 = (TagLib::Tag *)jarg1;
  arg2 = (TagLib::Tag *)jarg2;
  TagLib::Tag::duplicate((TagLib::Tag const *)arg1,arg2);
}


SWIGEXPORT void D_delete_TagLib_File(void * jarg1) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  delete arg1;
}


SWIGEXPORT const char* D_TagLib_File_name(void * jarg1) {
  const char* jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::FileName result;
  
  arg1 = (TagLib::File *)jarg1;
  result = (TagLib::FileName)((TagLib::File const *)arg1)->name();
  {
    /*#ifdef _WIN32
          jresult = (char*)malloc((&result)->size()+1);
          strcpy(jresult, result);
    #else*/
    jresult = result;
    /*#endif*/
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::AudioProperties *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  result = (TagLib::AudioProperties *)((TagLib::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_File_readBlock(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ulong arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ulong)jarg2;
  result = (arg1)->readBlock(arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_File_writeBlock(void * jarg1, void * jarg2) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->writeBlock((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT long D_TagLib_File_find__SWIG_0(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  TagLib::ByteVector *arg4 = 0 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (long)jarg3;
  arg4 = (TagLib::ByteVector *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (long)(arg1)->find((TagLib::ByteVector const &)*arg2,arg3,(TagLib::ByteVector const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_File_find__SWIG_1(void * jarg1, void * jarg2, long jarg3) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (long)jarg3;
  result = (long)(arg1)->find((TagLib::ByteVector const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_File_find__SWIG_2(void * jarg1, void * jarg2) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (long)(arg1)->find((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_File_rfind__SWIG_0(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  TagLib::ByteVector *arg4 = 0 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (long)jarg3;
  arg4 = (TagLib::ByteVector *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (long)(arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3,(TagLib::ByteVector const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_File_rfind__SWIG_1(void * jarg1, void * jarg2, long jarg3) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (long)jarg3;
  result = (long)(arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_File_rfind__SWIG_2(void * jarg1, void * jarg2) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (long)(arg1)->rfind((TagLib::ByteVector const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_File_insert__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ulong arg3 ;
  TagLib::ulong arg4 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  arg3 = (TagLib::ulong)jarg3;
  arg4 = (TagLib::ulong)jarg4;
  (arg1)->insert((TagLib::ByteVector const &)*arg2,arg3,arg4);
}


SWIGEXPORT void D_TagLib_File_insert__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ulong arg3 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  arg3 = (TagLib::ulong)jarg3;
  (arg1)->insert((TagLib::ByteVector const &)*arg2,arg3);
}


SWIGEXPORT void D_TagLib_File_insert__SWIG_2(void * jarg1, void * jarg2) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->insert((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void D_TagLib_File_removeBlock__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ulong arg2 ;
  TagLib::ulong arg3 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ulong)jarg2;
  arg3 = (TagLib::ulong)jarg3;
  (arg1)->removeBlock(arg2,arg3);
}


SWIGEXPORT void D_TagLib_File_removeBlock__SWIG_1(void * jarg1, unsigned long jarg2) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ulong arg2 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::ulong)jarg2;
  (arg1)->removeBlock(arg2);
}


SWIGEXPORT void D_TagLib_File_removeBlock__SWIG_2(void * jarg1) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  (arg1)->removeBlock();
}


SWIGEXPORT unsigned int D_TagLib_File_readOnly(void * jarg1) {
  unsigned int jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::File *)jarg1;
  result = (bool)((TagLib::File const *)arg1)->readOnly();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_File_isOpen(void * jarg1) {
  unsigned int jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::File *)jarg1;
  result = (bool)((TagLib::File const *)arg1)->isOpen();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_File_isValid(void * jarg1) {
  unsigned int jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::File *)jarg1;
  result = (bool)((TagLib::File const *)arg1)->isValid();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_File_seek__SWIG_0(void * jarg1, long jarg2, int jarg3) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::File::Position arg3 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (TagLib::File::Position)jarg3; 
  (arg1)->seek(arg2,arg3);
}


SWIGEXPORT void D_TagLib_File_seek__SWIG_1(void * jarg1, long jarg2) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (long)jarg2;
  (arg1)->seek(arg2);
}


SWIGEXPORT void D_TagLib_File_clear(void * jarg1) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT long D_TagLib_File_tell(void * jarg1) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  result = (long)((TagLib::File const *)arg1)->tell();
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_File_length(void * jarg1) {
  long jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long result;
  
  arg1 = (TagLib::File *)jarg1;
  result = (long)(arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_File_isReadable(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)TagLib::File::isReadable((char const *)arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_File_isWritable(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)TagLib::File::isWritable((char const *)arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_FileTypeResolver_createFile__SWIG_0(void * jarg1, const char* jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  FileTypeResolver *arg1 = (FileTypeResolver *) 0 ;
  TagLib::FileName arg2 = (TagLib::FileName) 0 ;
  bool arg3 ;
  TagLib::AudioProperties::ReadStyle arg4 ;
  TagLib::File *result = 0 ;
  
  arg1 = (FileTypeResolver *)jarg1;
  arg2 = (TagLib::FileName)jarg2; 
  arg3 = jarg3 ? true : false;
  arg4 = (TagLib::AudioProperties::ReadStyle)jarg4; 
  result = (TagLib::File *)((FileTypeResolver const *)arg1)->createFile(arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_FileTypeResolver_createFile__SWIG_1(void * jarg1, const char* jarg2, unsigned int jarg3) {
  void * jresult ;
  FileTypeResolver *arg1 = (FileTypeResolver *) 0 ;
  TagLib::FileName arg2 = (TagLib::FileName) 0 ;
  bool arg3 ;
  TagLib::File *result = 0 ;
  
  arg1 = (FileTypeResolver *)jarg1;
  arg2 = (TagLib::FileName)jarg2; 
  arg3 = jarg3 ? true : false;
  result = (TagLib::File *)((FileTypeResolver const *)arg1)->createFile(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_FileTypeResolver_createFile__SWIG_2(void * jarg1, const char* jarg2) {
  void * jresult ;
  FileTypeResolver *arg1 = (FileTypeResolver *) 0 ;
  TagLib::FileName arg2 = (TagLib::FileName) 0 ;
  TagLib::File *result = 0 ;
  
  arg1 = (FileTypeResolver *)jarg1;
  arg2 = (TagLib::FileName)jarg2; 
  result = (TagLib::File *)((FileTypeResolver const *)arg1)->createFile(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_FileTypeResolver() {
  void * jresult ;
  FileTypeResolver *result = 0 ;
  
  result = (FileTypeResolver *)new SwigDirector_FileTypeResolver();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_FileTypeResolver(void * jarg1) {
  FileTypeResolver *arg1 = (FileTypeResolver *) 0 ;
  
  arg1 = (FileTypeResolver *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_FileTypeResolver_director_connect(void *objarg, void *dobj, SwigDirector_FileTypeResolver::SWIG_Callback0_t callback0, SwigDirector_FileTypeResolver::SWIG_Callback1_t callback1, SwigDirector_FileTypeResolver::SWIG_Callback2_t callback2) {
  FileTypeResolver *obj = (FileTypeResolver *)objarg;
  SwigDirector_FileTypeResolver *director = dynamic_cast<SwigDirector_FileTypeResolver *>(obj);
  if (director) {
    director->swig_connect_director(dobj, callback0, callback1, callback2);
  }
}


SWIGEXPORT void * D_new_TagLib_CPP_FileRef__SWIG_0() {
  void * jresult ;
  TagLib::FileRef *result = 0 ;
  
  result = (TagLib::FileRef *)new TagLib::FileRef();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_CPP_FileRef__SWIG_1(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::FileRef *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::AudioProperties::ReadStyle)jarg3; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_CPP_FileRef__SWIG_2(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::FileRef *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_CPP_FileRef__SWIG_3(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::FileRef *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_CPP_FileRef__SWIG_4(void * jarg1) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::FileRef *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_CPP_FileRef__SWIG_5(void * jarg1) {
  void * jresult ;
  TagLib::FileRef *arg1 = 0 ;
  TagLib::FileRef *result = 0 ;
  
  arg1 = (TagLib::FileRef *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::FileRef const & type is null");
    return 0;
  } 
  result = (TagLib::FileRef *)new TagLib::FileRef((TagLib::FileRef const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_CPP_FileRef(void * jarg1) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  
  arg1 = (TagLib::FileRef *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_tag(void * jarg1) {
  void * jresult ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::FileRef *)jarg1;
  result = (TagLib::Tag *)((TagLib::FileRef const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::AudioProperties *result = 0 ;
  
  arg1 = (TagLib::FileRef *)jarg1;
  result = (TagLib::AudioProperties *)((TagLib::FileRef const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_file(void * jarg1) {
  void * jresult ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::File *result = 0 ;
  
  arg1 = (TagLib::FileRef *)jarg1;
  result = (TagLib::File *)((TagLib::FileRef const *)arg1)->file();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_CPP_FileRef_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  bool result;
  
  arg1 = (TagLib::FileRef *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_addFileTypeResolver(void * jarg1) {
  void * jresult ;
  FileTypeResolver *arg1 = (FileTypeResolver *) 0 ;
  FileTypeResolver *result = 0 ;
  
  arg1 = (FileTypeResolver *)jarg1;
  result = (FileTypeResolver *)TagLib::FileRef::addFileTypeResolver((FileTypeResolver const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_defaultFileExtensions() {
  void * jresult ;
  TagLib::StringList result;
  
  result = TagLib::FileRef::defaultFileExtensions();
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_CPP_FileRef_isNull(void * jarg1) {
  unsigned int jresult ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  bool result;
  
  arg1 = (TagLib::FileRef *)jarg1;
  result = (bool)((TagLib::FileRef const *)arg1)->isNull();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_CPP_FileRef_swigOpEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::FileRef *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::FileRef *)jarg1;
  arg2 = (TagLib::FileRef *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::FileRef const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::FileRef const *)arg1)->operator ==((TagLib::FileRef const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_create__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::AudioProperties::ReadStyle)jarg3; 
  result = (TagLib::File *)TagLib::FileRef::create((char const *)arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_create__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::File *)TagLib::FileRef::create((char const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_CPP_FileRef_create__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::File *)TagLib::FileRef::create((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Footer__SWIG_0() {
  void * jresult ;
  TagLib::APE::Footer *result = 0 ;
  
  result = (TagLib::APE::Footer *)new TagLib::APE::Footer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Footer__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::APE::Footer *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::APE::Footer *)new TagLib::APE::Footer((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_APE_Footer(void * jarg1) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer__version(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = (TagLib::uint)((TagLib::APE::Footer const *)arg1)->version();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer_headerPresent(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = (bool)((TagLib::APE::Footer const *)arg1)->headerPresent();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer_footerPresent(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = (bool)((TagLib::APE::Footer const *)arg1)->footerPresent();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer_isHeader(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = (bool)((TagLib::APE::Footer const *)arg1)->isHeader();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Footer_setHeaderPresent(void * jarg1, unsigned int jarg2) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  arg2 = jarg2 ? true : false;
  ((TagLib::APE::Footer const *)arg1)->setHeaderPresent(arg2);
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer_itemCount(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = (TagLib::uint)((TagLib::APE::Footer const *)arg1)->itemCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Footer_setItemCount(void * jarg1, unsigned int jarg2) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setItemCount(arg2);
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer_tagSize(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = (TagLib::uint)((TagLib::APE::Footer const *)arg1)->tagSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer_completeTagSize(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = (TagLib::uint)((TagLib::APE::Footer const *)arg1)->completeTagSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Footer_setTagSize(void * jarg1, unsigned int jarg2) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTagSize(arg2);
}


SWIGEXPORT unsigned int D_TagLib_APE_Footer_size() {
  unsigned int jresult ;
  TagLib::uint result;
  
  result = (TagLib::uint)TagLib::APE::Footer::size();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_APE_Footer_fileIdentifier() {
  void * jresult ;
  TagLib::ByteVector result;
  
  result = TagLib::APE::Footer::fileIdentifier();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Footer_setData(void * jarg1, void * jarg2) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void * D_TagLib_APE_Footer_renderFooter(void * jarg1) {
  void * jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = ((TagLib::APE::Footer const *)arg1)->renderFooter();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_APE_Footer_renderHeader(void * jarg1) {
  void * jresult ;
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::APE::Footer *)jarg1;
  result = ((TagLib::APE::Footer const *)arg1)->renderHeader();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Item__SWIG_0() {
  void * jresult ;
  TagLib::APE::Item *result = 0 ;
  
  result = (TagLib::APE::Item *)new TagLib::APE::Item();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Item__SWIG_1(char* jarg1, char* jarg2) {
  void * jresult ;
  TagLib::String *arg1 = 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::APE::Item *result = 0 ;
  
  {
    arg1 = &TagLib::String(jarg1, TagLib::String::UTF8);
  }
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::APE::Item *)new TagLib::APE::Item((TagLib::String const &)*arg1,(TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Item__SWIG_2(char* jarg1, void * jarg2) {
  void * jresult ;
  TagLib::String *arg1 = 0 ;
  TagLib::StringList *arg2 = 0 ;
  TagLib::APE::Item *result = 0 ;
  
  {
    arg1 = &TagLib::String(jarg1, TagLib::String::UTF8);
  }
  arg2 = (TagLib::StringList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return 0;
  } 
  result = (TagLib::APE::Item *)new TagLib::APE::Item((TagLib::String const &)*arg1,(TagLib::StringList const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Item__SWIG_3(void * jarg1) {
  void * jresult ;
  TagLib::APE::Item *arg1 = 0 ;
  TagLib::APE::Item *result = 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::APE::Item const & type is null");
    return 0;
  } 
  result = (TagLib::APE::Item *)new TagLib::APE::Item((TagLib::APE::Item const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_APE_Item(void * jarg1) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_APE_Item_key(void * jarg1) {
  char* jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = ((TagLib::APE::Item const *)arg1)->key();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_APE_Item_value(void * jarg1) {
  void * jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = ((TagLib::APE::Item const *)arg1)->value();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Item_setKey(void * jarg1, char* jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setKey((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Item_setValue(void * jarg1, char* jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setValue((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Item_setValues(void * jarg1, void * jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  arg2 = (TagLib::StringList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return ;
  } 
  (arg1)->setValues((TagLib::StringList const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Item_appendValue(void * jarg1, char* jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->appendValue((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Item_appendValues(void * jarg1, void * jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  arg2 = (TagLib::StringList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return ;
  } 
  (arg1)->appendValues((TagLib::StringList const &)*arg2);
}


SWIGEXPORT int D_TagLib_APE_Item_size(void * jarg1) {
  int jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  int result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = (int)((TagLib::APE::Item const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT char* D_TagLib_APE_Item_toString(void * jarg1) {
  char* jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = ((TagLib::APE::Item const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_APE_Item_toStringList(void * jarg1) {
  void * jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = ((TagLib::APE::Item const *)arg1)->toStringList();
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_APE_Item_values(void * jarg1) {
  void * jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = ((TagLib::APE::Item const *)arg1)->values();
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_APE_Item_render(void * jarg1) {
  void * jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = ((TagLib::APE::Item const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Item_parse(void * jarg1, void * jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->parse((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Item_setReadOnly(void * jarg1, unsigned int jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setReadOnly(arg2);
}


SWIGEXPORT unsigned int D_TagLib_APE_Item_isReadOnly(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  bool result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = (bool)((TagLib::APE::Item const *)arg1)->isReadOnly();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Item_setType(void * jarg1, int jarg2) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::APE::Item::ItemTypes arg2 ;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  arg2 = (TagLib::APE::Item::ItemTypes)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT int D_TagLib_APE_Item_type(void * jarg1) {
  int jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::APE::Item::ItemTypes result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = (TagLib::APE::Item::ItemTypes)((TagLib::APE::Item const *)arg1)->type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_APE_Item_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  bool result;
  
  arg1 = (TagLib::APE::Item *)jarg1;
  result = (bool)((TagLib::APE::Item const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Tag__SWIG_0() {
  void * jresult ;
  TagLib::APE::Tag *result = 0 ;
  
  result = (TagLib::APE::Tag *)new TagLib::APE::Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_APE_Tag__SWIG_1(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::APE::Tag *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (long)jarg2;
  result = (TagLib::APE::Tag *)new TagLib::APE::Tag(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_APE_Tag(void * jarg1) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_APE_Tag_render(void * jarg1) {
  void * jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = ((TagLib::APE::Tag const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_APE_Tag_fileIdentifier() {
  void * jresult ;
  TagLib::ByteVector result;
  
  result = TagLib::APE::Tag::fileIdentifier();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT char* D_TagLib_APE_Tag_title__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = ((TagLib::APE::Tag const *)arg1)->title();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_APE_Tag_artist__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = ((TagLib::APE::Tag const *)arg1)->artist();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_APE_Tag_album__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = ((TagLib::APE::Tag const *)arg1)->album();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_APE_Tag_comment__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = ((TagLib::APE::Tag const *)arg1)->comment();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_APE_Tag_genre__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = ((TagLib::APE::Tag const *)arg1)->genre();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_APE_Tag_year__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::APE::Tag const *)arg1)->year();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_APE_Tag_track__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::APE::Tag const *)arg1)->track();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Tag_title__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Tag_artist__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Tag_album__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Tag_comment__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Tag_genre__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Tag_year__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setYear(arg2);
}


SWIGEXPORT void D_TagLib_APE_Tag_track__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTrack(arg2);
}


SWIGEXPORT void * D_TagLib_APE_Tag_footer(void * jarg1) {
  void * jresult ;
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::APE::Footer *result = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  result = (TagLib::APE::Footer *)((TagLib::APE::Tag const *)arg1)->footer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_APE_Tag_removeItem(void * jarg1, char* jarg2) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->removeItem((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_APE_Tag_addValue__SWIG_0(void * jarg1, char* jarg2, char* jarg3, unsigned int jarg4) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  {
    arg3 = &TagLib::String(jarg3, TagLib::String::UTF8);
  }
  arg4 = jarg4 ? true : false;
  (arg1)->addValue((TagLib::String const &)*arg2,(TagLib::String const &)*arg3,arg4);
}


SWIGEXPORT void D_TagLib_APE_Tag_addValue__SWIG_1(void * jarg1, char* jarg2, char* jarg3) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  {
    arg3 = &TagLib::String(jarg3, TagLib::String::UTF8);
  }
  (arg1)->addValue((TagLib::String const &)*arg2,(TagLib::String const &)*arg3);
}


SWIGEXPORT void D_TagLib_APE_Tag_setItem(void * jarg1, char* jarg2, void * jarg3) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::APE::Item *arg3 = 0 ;
  
  arg1 = (TagLib::APE::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  arg3 = (TagLib::APE::Item *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::APE::Item const & type is null");
    return ;
  } 
  (arg1)->setItem((TagLib::String const &)*arg2,(TagLib::APE::Item const &)*arg3);
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_0() {
  void * jresult ;
  TagLib::ASF::Attribute *result = 0 ;
  
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_1(char* jarg1) {
  void * jresult ;
  TagLib::String *arg1 = 0 ;
  TagLib::ASF::Attribute *result = 0 ;
  
  {
    arg1 = &TagLib::String(jarg1, TagLib::String::UTF8);
  }
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute((TagLib::String const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_2(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ASF::Attribute *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  TagLib::ASF::Attribute *result = 0 ;
  
  arg1 = (unsigned int)jarg1;
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_4(unsigned long long jarg1) {
  void * jresult ;
  unsigned long long arg1 ;
  TagLib::ASF::Attribute *result = 0 ;
  
  arg1 = (unsigned long long)jarg1;
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_5(unsigned short jarg1) {
  void * jresult ;
  unsigned short arg1 ;
  TagLib::ASF::Attribute *result = 0 ;
  
  arg1 = (unsigned short)jarg1;
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_6(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TagLib::ASF::Attribute *result = 0 ;
  
  arg1 = jarg1 ? true : false;
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Attribute__SWIG_7(void * jarg1) {
  void * jresult ;
  TagLib::ASF::Attribute *arg1 = 0 ;
  TagLib::ASF::Attribute *result = 0 ;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ASF::Attribute const & type is null");
    return 0;
  } 
  result = (TagLib::ASF::Attribute *)new TagLib::ASF::Attribute((TagLib::ASF::Attribute const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ASF_Attribute(void * jarg1) {
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_ASF_Attribute_type(void * jarg1) {
  int jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  TagLib::ASF::Attribute::AttributeTypes result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (TagLib::ASF::Attribute::AttributeTypes)((TagLib::ASF::Attribute const *)arg1)->type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short D_TagLib_ASF_Attribute_toBool(void * jarg1) {
  unsigned short jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  unsigned short result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (unsigned short)((TagLib::ASF::Attribute const *)arg1)->toBool();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned short D_TagLib_ASF_Attribute_toUShort(void * jarg1) {
  unsigned short jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  unsigned short result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (unsigned short)((TagLib::ASF::Attribute const *)arg1)->toUShort();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ASF_Attribute_toUInt(void * jarg1) {
  unsigned int jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  unsigned int result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (unsigned int)((TagLib::ASF::Attribute const *)arg1)->toUInt();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long long D_TagLib_ASF_Attribute_toULongLong(void * jarg1) {
  unsigned long long jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  unsigned long long result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (unsigned long long)((TagLib::ASF::Attribute const *)arg1)->toULongLong();
  jresult = result;
  return jresult;
}


SWIGEXPORT char* D_TagLib_ASF_Attribute_toString(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = ((TagLib::ASF::Attribute const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ASF_Attribute_toByteVector(void * jarg1) {
  void * jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = ((TagLib::ASF::Attribute const *)arg1)->toByteVector();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT int D_TagLib_ASF_Attribute_language(void * jarg1) {
  int jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  int result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (int)((TagLib::ASF::Attribute const *)arg1)->language();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ASF_Attribute_setLanguage(void * jarg1, int jarg2) {
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setLanguage(arg2);
}


SWIGEXPORT int D_TagLib_ASF_Attribute_stream(void * jarg1) {
  int jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  int result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (int)((TagLib::ASF::Attribute const *)arg1)->stream();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ASF_Attribute_setStream(void * jarg1, int jarg2) {
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setStream(arg2);
}


SWIGEXPORT int D_TagLib_ASF_Attribute_dataSize(void * jarg1) {
  int jresult ;
  TagLib::ASF::Attribute *arg1 = (TagLib::ASF::Attribute *) 0 ;
  int result;
  
  arg1 = (TagLib::ASF::Attribute *)jarg1;
  result = (int)((TagLib::ASF::Attribute const *)arg1)->dataSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Properties() {
  void * jresult ;
  TagLib::ASF::Properties *result = 0 ;
  
  result = (TagLib::ASF::Properties *)new TagLib::ASF::Properties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ASF_Properties(void * jarg1) {
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_ASF_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  result = (int)((TagLib::ASF::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ASF_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  result = (int)((TagLib::ASF::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ASF_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  result = (int)((TagLib::ASF::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_ASF_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  result = (int)((TagLib::ASF::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ASF_Properties_setLength(void * jarg1, int jarg2) {
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setLength(arg2);
}


SWIGEXPORT void D_TagLib_ASF_Properties_setBitrate(void * jarg1, int jarg2) {
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setBitrate(arg2);
}


SWIGEXPORT void D_TagLib_ASF_Properties_setSampleRate(void * jarg1, int jarg2) {
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setSampleRate(arg2);
}


SWIGEXPORT void D_TagLib_ASF_Properties_setChannels(void * jarg1, int jarg2) {
  TagLib::ASF::Properties *arg1 = (TagLib::ASF::Properties *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::ASF::Properties *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setChannels(arg2);
}


SWIGEXPORT void * D_new_TagLib_ASF_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::ASF::Properties::ReadStyle arg3 ;
  TagLib::ASF::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::ASF::Properties::ReadStyle)jarg3; 
  result = (TagLib::ASF::File *)new TagLib::ASF::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::ASF::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::ASF::File *)new TagLib::ASF::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ASF::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::ASF::File *)new TagLib::ASF::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ASF_File(void * jarg1) {
  TagLib::ASF::File *arg1 = (TagLib::ASF::File *) 0 ;
  
  arg1 = (TagLib::ASF::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_ASF_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::ASF::File *arg1 = (TagLib::ASF::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::ASF::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::ASF::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ASF_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::ASF::File *arg1 = (TagLib::ASF::File *) 0 ;
  TagLib::ASF::Properties *result = 0 ;
  
  arg1 = (TagLib::ASF::File *)jarg1;
  result = (TagLib::ASF::Properties *)((TagLib::ASF::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ASF_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::ASF::File *arg1 = (TagLib::ASF::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::ASF::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ASF_Tag() {
  void * jresult ;
  TagLib::ASF::Tag *result = 0 ;
  
  result = (TagLib::ASF::Tag *)new TagLib::ASF::Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ASF_Tag(void * jarg1) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ASF_Tag_title__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = ((TagLib::ASF::Tag const *)arg1)->title();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ASF_Tag_artist__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = ((TagLib::ASF::Tag const *)arg1)->artist();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ASF_Tag_album__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = ((TagLib::ASF::Tag const *)arg1)->album();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ASF_Tag_comment__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = ((TagLib::ASF::Tag const *)arg1)->comment();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ASF_Tag_genre__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = ((TagLib::ASF::Tag const *)arg1)->genre();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ASF_Tag_rating(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = ((TagLib::ASF::Tag const *)arg1)->rating();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ASF_Tag_copyright(void * jarg1) {
  char* jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = ((TagLib::ASF::Tag const *)arg1)->copyright();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ASF_Tag_year__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::ASF::Tag const *)arg1)->year();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ASF_Tag_track__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::ASF::Tag const *)arg1)->track();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ASF_Tag_title__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_artist__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_album__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_comment__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_setRating(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setRating((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_setCopyright(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setCopyright((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_genre__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_year__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setYear(arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_track__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTrack(arg2);
}


SWIGEXPORT unsigned int D_TagLib_ASF_Tag_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  bool result;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = (bool)((TagLib::ASF::Tag const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ASF_Tag_attributeListMap(void * jarg1) {
  void * jresult ;
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::ASF::AttributeListMap *result = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  result = (TagLib::ASF::AttributeListMap *) &(arg1)->attributeListMap();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ASF_Tag_removeItem(void * jarg1, char* jarg2) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->removeItem((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ASF_Tag_setAttribute(void * jarg1, char* jarg2, void * jarg3) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::ASF::Attribute *arg3 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  arg3 = (TagLib::ASF::Attribute *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ASF::Attribute const & type is null");
    return ;
  } 
  (arg1)->setAttribute((TagLib::String const &)*arg2,(TagLib::ASF::Attribute const &)*arg3);
}


SWIGEXPORT void D_TagLib_ASF_Tag_addAttribute(void * jarg1, char* jarg2, void * jarg3) {
  TagLib::ASF::Tag *arg1 = (TagLib::ASF::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::ASF::Attribute *arg3 = 0 ;
  
  arg1 = (TagLib::ASF::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  arg3 = (TagLib::ASF::Attribute *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ASF::Attribute const & type is null");
    return ;
  } 
  (arg1)->addAttribute((TagLib::String const &)*arg2,(TagLib::ASF::Attribute const &)*arg3);
}


SWIGEXPORT void * D_new_TagLib_FLAC_Properties__SWIG_0(void * jarg1, long jarg2, int jarg3) {
  void * jresult ;
  TagLib::ByteVector arg1 ;
  long arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::ByteVector *argp1 ;
  TagLib::FLAC::Properties *result = 0 ;
  
  argp1 = (TagLib::ByteVector *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::ByteVector");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (long)jarg2;
  arg3 = (TagLib::AudioProperties::ReadStyle)jarg3; 
  result = (TagLib::FLAC::Properties *)new TagLib::FLAC::Properties(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_Properties__SWIG_1(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::ByteVector arg1 ;
  long arg2 ;
  TagLib::ByteVector *argp1 ;
  TagLib::FLAC::Properties *result = 0 ;
  
  argp1 = (TagLib::ByteVector *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::ByteVector");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (long)jarg2;
  result = (TagLib::FLAC::Properties *)new TagLib::FLAC::Properties(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_Properties__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::FLAC::Properties *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  arg2 = (TagLib::AudioProperties::ReadStyle)jarg2; 
  result = (TagLib::FLAC::Properties *)new TagLib::FLAC::Properties(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_Properties__SWIG_3(void * jarg1) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::FLAC::Properties *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (TagLib::FLAC::Properties *)new TagLib::FLAC::Properties(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_FLAC_Properties(void * jarg1) {
  TagLib::FLAC::Properties *arg1 = (TagLib::FLAC::Properties *) 0 ;
  
  arg1 = (TagLib::FLAC::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_FLAC_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::FLAC::Properties *arg1 = (TagLib::FLAC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::FLAC::Properties *)jarg1;
  result = (int)((TagLib::FLAC::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_FLAC_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::FLAC::Properties *arg1 = (TagLib::FLAC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::FLAC::Properties *)jarg1;
  result = (int)((TagLib::FLAC::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_FLAC_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::FLAC::Properties *arg1 = (TagLib::FLAC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::FLAC::Properties *)jarg1;
  result = (int)((TagLib::FLAC::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_FLAC_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::FLAC::Properties *arg1 = (TagLib::FLAC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::FLAC::Properties *)jarg1;
  result = (int)((TagLib::FLAC::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_FLAC_Properties_sampleWidth(void * jarg1) {
  int jresult ;
  TagLib::FLAC::Properties *arg1 = (TagLib::FLAC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::FLAC::Properties *)jarg1;
  result = (int)((TagLib::FLAC::Properties const *)arg1)->sampleWidth();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::FLAC::Properties::ReadStyle arg3 ;
  TagLib::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::FLAC::Properties::ReadStyle)jarg3; 
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_File__SWIG_3(const char* jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::FLAC::Properties::ReadStyle arg4 ;
  TagLib::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  arg3 = jarg3 ? true : false;
  arg4 = (TagLib::FLAC::Properties::ReadStyle)jarg4; 
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_File__SWIG_4(const char* jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  arg3 = jarg3 ? true : false;
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_FLAC_File__SWIG_5(const char* jarg1, void * jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_FLAC_File(void * jarg1) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_FLAC_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::FLAC::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_FLAC_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::FLAC::Properties *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (TagLib::FLAC::Properties *)((TagLib::FLAC::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_FLAC_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_FLAC_File_ID3v2Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_FLAC_File_ID3v2Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_FLAC_File_ID3v1Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_FLAC_File_ID3v1Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_FLAC_File_xiphComment__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  bool arg2 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::Ogg::XiphComment *)(arg1)->xiphComment(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_FLAC_File_xiphComment__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (TagLib::Ogg::XiphComment *)(arg1)->xiphComment();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_FLAC_File_setID3v2FrameFactory(void * jarg1, void * jarg2) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
}


SWIGEXPORT void * D_TagLib_FLAC_File_streamInfoData(void * jarg1) {
  void * jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (arg1)->streamInfoData();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT long D_TagLib_FLAC_File_streamLength(void * jarg1) {
  long jresult ;
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  long result;
  
  arg1 = (TagLib::FLAC::File *)jarg1;
  result = (long)(arg1)->streamLength();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_genreMap__SWIG_0() {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  
  result = (TagLib::Map< TagLib::String,int > *)new TagLib::Map< TagLib::String,int >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_genreMap__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = 0 ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::Map< TagLib::String,int > const & type is null");
    return 0;
  } 
  result = (TagLib::Map< TagLib::String,int > *)new TagLib::Map< TagLib::String,int >((TagLib::Map< TagLib::String,int > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_genreMap(void * jarg1) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_genreMap_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::Map< TagLib::String,int >::Iterator result;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  result = (arg1)->begin();
  jresult = new TagLib::Map< TagLib::String,int >::Iterator((const TagLib::Map< TagLib::String,int >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_genreMap_end__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::Map< TagLib::String,int >::Iterator result;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  result = (arg1)->end();
  jresult = new TagLib::Map< TagLib::String,int >::Iterator((const TagLib::Map< TagLib::String,int >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_genreMap_insert(void * jarg1, char* jarg2, int jarg3) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  temp3 = (int)jarg3;
  arg3 = &temp3; 
  result = (TagLib::Map< TagLib::String,int > *) &(arg1)->insert((TagLib::String const &)*arg2,(int const &)*arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_genreMap_clear(void * jarg1) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  result = (TagLib::Map< TagLib::String,int > *) &(arg1)->clear();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_genreMap_size(void * jarg1) {
  unsigned int jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  result = (TagLib::uint)((TagLib::Map< TagLib::String,int > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_genreMap_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  bool result;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  result = (bool)((TagLib::Map< TagLib::String,int > const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_genreMap_find__SWIG_0(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::Map< TagLib::String,int >::Iterator result;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (arg1)->find((TagLib::String const &)*arg2);
  jresult = new TagLib::Map< TagLib::String,int >::Iterator((const TagLib::Map< TagLib::String,int >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_genreMap_contains(void * jarg1, char* jarg2) {
  unsigned int jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (bool)((TagLib::Map< TagLib::String,int > const *)arg1)->contains((TagLib::String const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_genreMap_erase__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::Map< TagLib::String,int >::Iterator arg2 ;
  TagLib::Map< TagLib::String,int >::Iterator *argp2 ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  argp2 = (TagLib::Map< TagLib::String,int >::Iterator *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::Map< TagLib::String,int >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (TagLib::Map< TagLib::String,int > *) &(arg1)->erase(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_genreMap_erase__SWIG_1(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::Map< TagLib::String,int > *) &(arg1)->erase((TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_TagLib_genreMap_opIndex__SWIG_0(void * jarg1, char* jarg2) {
  int jresult ;
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  int *result = 0 ;
  
  arg1 = (TagLib::Map< TagLib::String,int > *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (int *) &((TagLib::Map< TagLib::String,int > const *)arg1)->operator []((TagLib::String const &)*arg2);
  jresult = *result;
  return jresult;
}


SWIGEXPORT void * D_genreList() {
  void * jresult ;
  TagLib::StringList result;
  
  result = TagLib::ID3v1::genreList();
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT void * D_genreMap() {
  void * jresult ;
  TagLib::ID3v1::GenreMap result;
  
  result = TagLib::ID3v1::genreMap();
  jresult = new TagLib::ID3v1::GenreMap((const TagLib::ID3v1::GenreMap &)result); 
  return jresult;
}


SWIGEXPORT char* D_genre(int jarg1) {
  char* jresult ;
  int arg1 ;
  TagLib::String result;
  
  arg1 = (int)jarg1;
  result = TagLib::ID3v1::genre(arg1);
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT int D_genreIndex(char* jarg1) {
  int jresult ;
  TagLib::String *arg1 = 0 ;
  int result;
  
  {
    arg1 = &TagLib::String(jarg1, TagLib::String::UTF8);
  }
  result = (int)TagLib::ID3v1::genreIndex((TagLib::String const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v1_StringHandler_parse(void * jarg1, void * jarg2) {
  char* jresult ;
  TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v1::StringHandler *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = ((TagLib::ID3v1::StringHandler const *)arg1)->parse((TagLib::ByteVector const &)*arg2);
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v1_StringHandler_render(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v1::StringHandler *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = ((TagLib::ID3v1::StringHandler const *)arg1)->render((TagLib::String const &)*arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v1_StringHandler() {
  void * jresult ;
  TagLib::ID3v1::StringHandler *result = 0 ;
  
  result = (TagLib::ID3v1::StringHandler *)new TagLib::ID3v1::StringHandler();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v1_StringHandler(void * jarg1) {
  TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
  
  arg1 = (TagLib::ID3v1::StringHandler *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_ID3v1_Tag__SWIG_0() {
  void * jresult ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  result = (TagLib::ID3v1::Tag *)new TagLib::ID3v1::Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v1_Tag__SWIG_1(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (long)jarg2;
  result = (TagLib::ID3v1::Tag *)new TagLib::ID3v1::Tag(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v1_Tag(void * jarg1) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_ID3v1_Tag_render(void * jarg1) {
  void * jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = ((TagLib::ID3v1::Tag const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v1_Tag_fileIdentifier() {
  void * jresult ;
  TagLib::ByteVector result;
  
  result = TagLib::ID3v1::Tag::fileIdentifier();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v1_Tag_title__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = ((TagLib::ID3v1::Tag const *)arg1)->title();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v1_Tag_artist__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = ((TagLib::ID3v1::Tag const *)arg1)->artist();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v1_Tag_album__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = ((TagLib::ID3v1::Tag const *)arg1)->album();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v1_Tag_comment__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = ((TagLib::ID3v1::Tag const *)arg1)->comment();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v1_Tag_genre__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = ((TagLib::ID3v1::Tag const *)arg1)->genre();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v1_Tag_year__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v1::Tag const *)arg1)->year();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v1_Tag_track__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v1::Tag const *)arg1)->track();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_title__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_artist__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_album__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_comment__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_genre__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_year__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setYear(arg2);
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_track__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ID3v1::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTrack(arg2);
}


SWIGEXPORT void D_TagLib_ID3v1_Tag_setStringHandler(void * jarg1) {
  TagLib::ID3v1::StringHandler *arg1 = (TagLib::ID3v1::StringHandler *) 0 ;
  
  arg1 = (TagLib::ID3v1::StringHandler *)jarg1;
  TagLib::ID3v1::Tag::setStringHandler((TagLib::ID3v1::StringHandler const *)arg1);
}


SWIGEXPORT void D_delete_TagLib_ID3v2_Frame(void * jarg1) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  
  arg1 = (TagLib::ID3v2::Frame *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_ID3v2_Frame_frameID(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::Frame *)jarg1;
  result = ((TagLib::ID3v2::Frame const *)arg1)->frameID();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Frame_size(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::Frame *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::Frame const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Frame_headerSize__SWIG_0() {
  unsigned int jresult ;
  TagLib::uint result;
  
  result = (TagLib::uint)TagLib::ID3v2::Frame::headerSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Frame_headerSize__SWIG_1(unsigned int jarg1) {
  unsigned int jresult ;
  TagLib::uint arg1 ;
  TagLib::uint result;
  
  arg1 = (TagLib::uint)jarg1;
  result = (TagLib::uint)TagLib::ID3v2::Frame::headerSize(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_Frame_setData(void * jarg1, void * jarg2) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Frame *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Frame_setText(void * jarg1, char* jarg2) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Frame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setText((TagLib::String const &)*arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_Frame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::Frame *)jarg1;
  result = ((TagLib::ID3v2::Frame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Frame_render(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::Frame *)jarg1;
  result = ((TagLib::ID3v2::Frame const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_Header__SWIG_0() {
  void * jresult ;
  TagLib::ID3v2::Header *result = 0 ;
  
  result = (TagLib::ID3v2::Header *)new TagLib::ID3v2::Header();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_Header__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::Header *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::Header *)new TagLib::ID3v2::Header((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_Header(void * jarg1) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_majorVersion(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::Header const *)arg1)->majorVersion();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_Header_setMajorVersion(void * jarg1, unsigned int jarg2) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setMajorVersion(arg2);
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_revisionNumber(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::Header const *)arg1)->revisionNumber();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_unsynchronisation(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->unsynchronisation();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_extendedHeader(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->extendedHeader();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_experimentalIndicator(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->experimentalIndicator();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_footerPresent(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (bool)((TagLib::ID3v2::Header const *)arg1)->footerPresent();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_tagSize(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::Header const *)arg1)->tagSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_completeTagSize(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::Header const *)arg1)->completeTagSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_Header_setTagSize(void * jarg1, unsigned int jarg2) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTagSize(arg2);
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Header_size() {
  unsigned int jresult ;
  TagLib::uint result;
  
  result = (TagLib::uint)TagLib::ID3v2::Header::size();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Header_fileIdentifier() {
  void * jresult ;
  TagLib::ByteVector result;
  
  result = TagLib::ID3v2::Header::fileIdentifier();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_Header_setData(void * jarg1, void * jarg2) {
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_Header_render(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Header *arg1 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::Header *)jarg1;
  result = ((TagLib::ID3v2::Header const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_ExtendedHeader() {
  void * jresult ;
  TagLib::ID3v2::ExtendedHeader *result = 0 ;
  
  result = (TagLib::ID3v2::ExtendedHeader *)new TagLib::ID3v2::ExtendedHeader();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_ExtendedHeader(void * jarg1) {
  TagLib::ID3v2::ExtendedHeader *arg1 = (TagLib::ID3v2::ExtendedHeader *) 0 ;
  
  arg1 = (TagLib::ID3v2::ExtendedHeader *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_ExtendedHeader_size(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::ExtendedHeader *arg1 = (TagLib::ID3v2::ExtendedHeader *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::ExtendedHeader *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::ExtendedHeader const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_ExtendedHeader_setData(void * jarg1, void * jarg2) {
  TagLib::ID3v2::ExtendedHeader *arg1 = (TagLib::ID3v2::ExtendedHeader *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::ExtendedHeader *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void * D_new_TagLib_ID3v2_Footer() {
  void * jresult ;
  TagLib::ID3v2::Footer *result = 0 ;
  
  result = (TagLib::ID3v2::Footer *)new TagLib::ID3v2::Footer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_Footer(void * jarg1) {
  TagLib::ID3v2::Footer *arg1 = (TagLib::ID3v2::Footer *) 0 ;
  
  arg1 = (TagLib::ID3v2::Footer *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Footer_size() {
  unsigned int jresult ;
  TagLib::uint result;
  
  result = (TagLib::uint)TagLib::ID3v2::Footer::size();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Footer_render(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::ID3v2::Footer *arg1 = (TagLib::ID3v2::Footer *) 0 ;
  TagLib::ID3v2::Header *arg2 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::Footer *)jarg1;
  arg2 = (TagLib::ID3v2::Header *)jarg2;
  result = ((TagLib::ID3v2::Footer const *)arg1)->render((TagLib::ID3v2::Header const *)arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_FrameFactory_instance() {
  void * jresult ;
  TagLib::ID3v2::FrameFactory *result = 0 ;
  
  result = (TagLib::ID3v2::FrameFactory *)TagLib::ID3v2::FrameFactory::instance();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_FrameFactory_createFrame__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool arg3 ;
  TagLib::ID3v2::Frame *result = 0 ;
  
  arg1 = (TagLib::ID3v2::FrameFactory *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = (TagLib::ID3v2::Frame *)((TagLib::ID3v2::FrameFactory const *)arg1)->createFrame((TagLib::ByteVector const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_FrameFactory_createFrame__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::uint arg3 ;
  TagLib::ID3v2::Frame *result = 0 ;
  
  arg1 = (TagLib::ID3v2::FrameFactory *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::uint)jarg3;
  result = (TagLib::ID3v2::Frame *)((TagLib::ID3v2::FrameFactory const *)arg1)->createFrame((TagLib::ByteVector const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_FrameFactory_createFrame__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ID3v2::Frame *result = 0 ;
  
  arg1 = (TagLib::ID3v2::FrameFactory *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::Frame *)((TagLib::ID3v2::FrameFactory const *)arg1)->createFrame((TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_FrameFactory_createFrame__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  TagLib::ID3v2::FrameFactory *arg1 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ID3v2::Header *arg3 = (TagLib::ID3v2::Header *) 0 ;
  TagLib::ID3v2::Frame *result = 0 ;
  
  arg1 = (TagLib::ID3v2::FrameFactory *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg3 = (TagLib::ID3v2::Header *)jarg3;
  result = (TagLib::ID3v2::Frame *)((TagLib::ID3v2::FrameFactory const *)arg1)->createFrame((TagLib::ByteVector const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_frameList__SWIG_0() {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  result = (TagLib::List< TagLib::ID3v2::Frame * > *)new TagLib::List< TagLib::ID3v2::Frame * >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_frameList__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ID3v2::Frame * > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ID3v2::Frame * > *)new TagLib::List< TagLib::ID3v2::Frame * >((TagLib::List< TagLib::ID3v2::Frame * > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_frameList(void * jarg1) {
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_frameList_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  result = (arg1)->begin();
  jresult = new TagLib::List< TagLib::ID3v2::Frame * >::Iterator((const TagLib::List< TagLib::ID3v2::Frame * >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_frameList_end__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  result = (arg1)->end();
  jresult = new TagLib::List< TagLib::ID3v2::Frame * >::Iterator((const TagLib::List< TagLib::ID3v2::Frame * >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_frameList_insert(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator arg2 ;
  TagLib::ID3v2::Frame **arg3 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator *argp2 ;
  TagLib::ID3v2::Frame *temp3 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  argp2 = (TagLib::List< TagLib::ID3v2::Frame * >::Iterator *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::List< TagLib::ID3v2::Frame * >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  temp3 = (TagLib::ID3v2::Frame *)jarg3;
  arg3 = (TagLib::ID3v2::Frame **)&temp3; 
  result = (arg1)->insert(arg2,(TagLib::ID3v2::Frame *const &)*arg3);
  jresult = new TagLib::List< TagLib::ID3v2::Frame * >::Iterator((const TagLib::List< TagLib::ID3v2::Frame * >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_frameList_sortedInsert__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **arg2 = 0 ;
  bool arg3 ;
  TagLib::ID3v2::Frame *temp2 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  temp2 = (TagLib::ID3v2::Frame *)jarg2;
  arg2 = (TagLib::ID3v2::Frame **)&temp2; 
  arg3 = jarg3 ? true : false;
  result = (TagLib::List< TagLib::ID3v2::Frame * > *) &(arg1)->sortedInsert((TagLib::ID3v2::Frame *const &)*arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_frameList_sortedInsert__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **arg2 = 0 ;
  TagLib::ID3v2::Frame *temp2 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  temp2 = (TagLib::ID3v2::Frame *)jarg2;
  arg2 = (TagLib::ID3v2::Frame **)&temp2; 
  result = (TagLib::List< TagLib::ID3v2::Frame * > *) &(arg1)->sortedInsert((TagLib::ID3v2::Frame *const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_frameList_append__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **arg2 = 0 ;
  TagLib::ID3v2::Frame *temp2 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  temp2 = (TagLib::ID3v2::Frame *)jarg2;
  arg2 = (TagLib::ID3v2::Frame **)&temp2; 
  result = (TagLib::List< TagLib::ID3v2::Frame * > *) &(arg1)->append((TagLib::ID3v2::Frame *const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_frameList_append__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg2 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  arg2 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ID3v2::Frame * > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ID3v2::Frame * > *) &(arg1)->append((TagLib::List< TagLib::ID3v2::Frame * > const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_frameList_prepend__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **arg2 = 0 ;
  TagLib::ID3v2::Frame *temp2 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  temp2 = (TagLib::ID3v2::Frame *)jarg2;
  arg2 = (TagLib::ID3v2::Frame **)&temp2; 
  result = (TagLib::List< TagLib::ID3v2::Frame * > *) &(arg1)->prepend((TagLib::ID3v2::Frame *const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_frameList_prepend__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg2 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  arg2 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ID3v2::Frame * > const & type is null");
    return 0;
  } 
  result = (TagLib::List< TagLib::ID3v2::Frame * > *) &(arg1)->prepend((TagLib::List< TagLib::ID3v2::Frame * > const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_frameList_clear(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  result = (TagLib::List< TagLib::ID3v2::Frame * > *) &(arg1)->clear();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_frameList_size(void * jarg1) {
  unsigned int jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  result = (TagLib::uint)((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_frameList_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  result = (bool)((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_frameList_find__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **arg2 = 0 ;
  TagLib::ID3v2::Frame *temp2 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  temp2 = (TagLib::ID3v2::Frame *)jarg2;
  arg2 = (TagLib::ID3v2::Frame **)&temp2; 
  result = (arg1)->find((TagLib::ID3v2::Frame *const &)*arg2);
  jresult = new TagLib::List< TagLib::ID3v2::Frame * >::Iterator((const TagLib::List< TagLib::ID3v2::Frame * >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_frameList_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **arg2 = 0 ;
  TagLib::ID3v2::Frame *temp2 = 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  temp2 = (TagLib::ID3v2::Frame *)jarg2;
  arg2 = (TagLib::ID3v2::Frame **)&temp2; 
  result = (bool)((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->contains((TagLib::ID3v2::Frame *const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_frameList_erase(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator arg2 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator *argp2 ;
  TagLib::List< TagLib::ID3v2::Frame * >::Iterator result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  argp2 = (TagLib::List< TagLib::ID3v2::Frame * >::Iterator *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null TagLib::List< TagLib::ID3v2::Frame * >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  jresult = new TagLib::List< TagLib::ID3v2::Frame * >::Iterator((const TagLib::List< TagLib::ID3v2::Frame * >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * D_frameList_front__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  result = (TagLib::ID3v2::Frame **) &((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->front();
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void * D_frameList_back__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  result = (TagLib::ID3v2::Frame **) &((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->back();
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void D_frameList_setAutoDelete(void * jarg1, unsigned int jarg2) {
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setAutoDelete(arg2);
}


SWIGEXPORT void * D_frameList_opIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ID3v2::Frame **result = 0 ;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  result = (TagLib::ID3v2::Frame **) &((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->operator [](arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int D_frameList_swigOpEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg1;
  arg2 = (TagLib::List< TagLib::ID3v2::Frame * > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< TagLib::ID3v2::Frame * > const & type is null");
    return 0;
  } 
  result = (bool)((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->operator ==((TagLib::List< TagLib::ID3v2::Frame * > const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_Tag__SWIG_0() {
  void * jresult ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_Tag__SWIG_1(void * jarg1, long jarg2, void * jarg3) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::ID3v2::FrameFactory *arg3 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (long)jarg2;
  arg3 = (TagLib::ID3v2::FrameFactory *)jarg3;
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag(arg1,arg2,(TagLib::ID3v2::FrameFactory const *)arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_Tag__SWIG_2(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (long)jarg2;
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_Tag(void * jarg1) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_Tag_title__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = ((TagLib::ID3v2::Tag const *)arg1)->title();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_Tag_artist__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = ((TagLib::ID3v2::Tag const *)arg1)->artist();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_Tag_album__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = ((TagLib::ID3v2::Tag const *)arg1)->album();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_Tag_comment__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = ((TagLib::ID3v2::Tag const *)arg1)->comment();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_Tag_genre__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = ((TagLib::ID3v2::Tag const *)arg1)->genre();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Tag_year(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::Tag const *)arg1)->year();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Tag_track__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::Tag const *)arg1)->track();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_title__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_artist__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_album__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_comment__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_genre__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_Year(void * jarg1, unsigned int jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setYear(arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_track__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTrack(arg2);
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_Tag_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  bool result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (bool)((TagLib::ID3v2::Tag const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Tag_header(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Header *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (TagLib::ID3v2::Header *)((TagLib::ID3v2::Tag const *)arg1)->header();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Tag_extendedHeader(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::ExtendedHeader *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (TagLib::ID3v2::ExtendedHeader *)((TagLib::ID3v2::Tag const *)arg1)->extendedHeader();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Tag_footer(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Footer *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (TagLib::ID3v2::Footer *)((TagLib::ID3v2::Tag const *)arg1)->footer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Tag_frameListMap(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::FrameListMap *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (TagLib::ID3v2::FrameListMap *) &((TagLib::ID3v2::Tag const *)arg1)->frameListMap();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Tag_frameList__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::Tag const *)arg1)->frameList();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_Tag_frameList__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::FrameList *) &((TagLib::ID3v2::Tag const *)arg1)->frameList((TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_addFrame(void * jarg1, void * jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  arg2 = (TagLib::ID3v2::Frame *)jarg2;
  (arg1)->addFrame(arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_removeFrame__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  bool arg3 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  arg2 = (TagLib::ID3v2::Frame *)jarg2;
  arg3 = jarg3 ? true : false;
  (arg1)->removeFrame(arg2,arg3);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_removeFrame__SWIG_1(void * jarg1, void * jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  arg2 = (TagLib::ID3v2::Frame *)jarg2;
  (arg1)->removeFrame(arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_Tag_removeFrames(void * jarg1, void * jarg2) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->removeFrames((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_Tag_render(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  result = ((TagLib::ID3v2::Tag const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_AttachedPictureFrame__SWIG_0() {
  void * jresult ;
  TagLib::ID3v2::AttachedPictureFrame *result = 0 ;
  
  result = (TagLib::ID3v2::AttachedPictureFrame *)new TagLib::ID3v2::AttachedPictureFrame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_AttachedPictureFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::AttachedPictureFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::AttachedPictureFrame *)new TagLib::ID3v2::AttachedPictureFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_AttachedPictureFrame(void * jarg1) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_AttachedPictureFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_AttachedPictureFrame_mimeType(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->mimeType();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_AttachedPictureFrame_setMimeType(void * jarg1, char* jarg2) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setMimeType((TagLib::String const &)*arg2);
}


SWIGEXPORT int D_TagLib_ID3v2_AttachedPictureFrame_type(void * jarg1) {
  int jresult ;
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ID3v2::AttachedPictureFrame::Type result;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  result = (TagLib::ID3v2::AttachedPictureFrame::Type)((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_AttachedPictureFrame_setType(void * jarg1, int jarg2) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ID3v2::AttachedPictureFrame::Type arg2 ;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  arg2 = (TagLib::ID3v2::AttachedPictureFrame::Type)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_AttachedPictureFrame_description(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->description();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_AttachedPictureFrame_setDescription(void * jarg1, char* jarg2) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_AttachedPictureFrame_picture(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->picture();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_AttachedPictureFrame_setPicture(void * jarg1, void * jarg2) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrame *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setPicture((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void D_delete_TagLib_ID3v2_AttachedPictureFrameV22(void * jarg1) {
  TagLib::ID3v2::AttachedPictureFrameV22 *arg1 = (TagLib::ID3v2::AttachedPictureFrameV22 *) 0 ;
  
  arg1 = (TagLib::ID3v2::AttachedPictureFrameV22 *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_CommentsFrame(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_CommentsFrame(void * jarg1) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_CommentsFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_CommentsFrame_language(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->language();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_CommentsFrame_description(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->description();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_CommentsFrame_text(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->text();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_CommentsFrame_setLanguage(void * jarg1, void * jarg2) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setLanguage((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_CommentsFrame_setDescription(void * jarg1, char* jarg2) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_CommentsFrame_setText(void * jarg1, char* jarg2) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::CommentsFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setText((TagLib::String const &)*arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_CommentsFrame_findByDescription(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::ID3v2::CommentsFrame *)TagLib::ID3v2::CommentsFrame::findByDescription((TagLib::ID3v2::Tag const *)arg1,(TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_GeneralEncapsulatedObjectFrame__SWIG_0() {
  void * jresult ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *result = 0 ;
  
  result = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)new TagLib::ID3v2::GeneralEncapsulatedObjectFrame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_GeneralEncapsulatedObjectFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)new TagLib::ID3v2::GeneralEncapsulatedObjectFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_GeneralEncapsulatedObjectFrame(void * jarg1) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_mimeType(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->mimeType();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setMimeType(void * jarg1, char* jarg2) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setMimeType((TagLib::String const &)*arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_fileName(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->fileName();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setFileName(void * jarg1, char* jarg2) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setFileName((TagLib::String const &)*arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_description(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->description();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setDescription(void * jarg1, char* jarg2) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_object(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  result = ((TagLib::ID3v2::GeneralEncapsulatedObjectFrame const *)arg1)->object();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_setObject(void * jarg1, void * jarg2) {
  TagLib::ID3v2::GeneralEncapsulatedObjectFrame *arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::GeneralEncapsulatedObjectFrame *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setObject((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void * D_new_TagLib_ID3v2_PopularimeterFrame__SWIG_0() {
  void * jresult ;
  TagLib::ID3v2::PopularimeterFrame *result = 0 ;
  
  result = (TagLib::ID3v2::PopularimeterFrame *)new TagLib::ID3v2::PopularimeterFrame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_PopularimeterFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::PopularimeterFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::PopularimeterFrame *)new TagLib::ID3v2::PopularimeterFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_PopularimeterFrame(void * jarg1) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_PopularimeterFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  result = ((TagLib::ID3v2::PopularimeterFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_PopularimeterFrame_email(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  result = ((TagLib::ID3v2::PopularimeterFrame const *)arg1)->email();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_PopularimeterFrame_setEmail(void * jarg1, char* jarg2) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setEmail((TagLib::String const &)*arg2);
}


SWIGEXPORT int D_TagLib_ID3v2_PopularimeterFrame_rating(void * jarg1) {
  int jresult ;
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  int result;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  result = (int)((TagLib::ID3v2::PopularimeterFrame const *)arg1)->rating();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_PopularimeterFrame_setRating(void * jarg1, int jarg2) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setRating(arg2);
}


SWIGEXPORT unsigned int D_TagLib_ID3v2_PopularimeterFrame_counter(void * jarg1) {
  unsigned int jresult ;
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  result = (TagLib::uint)((TagLib::ID3v2::PopularimeterFrame const *)arg1)->counter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_PopularimeterFrame_setCounter(void * jarg1, unsigned int jarg2) {
  TagLib::ID3v2::PopularimeterFrame *arg1 = (TagLib::ID3v2::PopularimeterFrame *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::ID3v2::PopularimeterFrame *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setCounter(arg2);
}


SWIGEXPORT void * D_new_TagLib_ID3v2_PrivateFrame__SWIG_0() {
  void * jresult ;
  TagLib::ID3v2::PrivateFrame *result = 0 ;
  
  result = (TagLib::ID3v2::PrivateFrame *)new TagLib::ID3v2::PrivateFrame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_PrivateFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::PrivateFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::PrivateFrame *)new TagLib::ID3v2::PrivateFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_PrivateFrame(void * jarg1) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::PrivateFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_PrivateFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::PrivateFrame *)jarg1;
  result = ((TagLib::ID3v2::PrivateFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_PrivateFrame_owner(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::PrivateFrame *)jarg1;
  result = ((TagLib::ID3v2::PrivateFrame const *)arg1)->owner();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_PrivateFrame_data(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::PrivateFrame *)jarg1;
  result = ((TagLib::ID3v2::PrivateFrame const *)arg1)->data();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_PrivateFrame_setOwner(void * jarg1, char* jarg2) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::PrivateFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setOwner((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_PrivateFrame_setData(void * jarg1, void * jarg2) {
  TagLib::ID3v2::PrivateFrame *arg1 = (TagLib::ID3v2::PrivateFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::PrivateFrame *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void * D_new_PeakVolume() {
  void * jresult ;
  PeakVolume *result = 0 ;
  
  result = (PeakVolume *)new PeakVolume();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_PeakVolume_bitsRepresentingPeak_set(void * jarg1, unsigned char jarg2) {
  PeakVolume *arg1 = (PeakVolume *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (PeakVolume *)jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->bitsRepresentingPeak = arg2;
}


SWIGEXPORT unsigned char D_PeakVolume_bitsRepresentingPeak_get(void * jarg1) {
  unsigned char jresult ;
  PeakVolume *arg1 = (PeakVolume *) 0 ;
  unsigned char result;
  
  arg1 = (PeakVolume *)jarg1;
  result = (unsigned char) ((arg1)->bitsRepresentingPeak);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_PeakVolume_peakVolume_set(void * jarg1, void * jarg2) {
  PeakVolume *arg1 = (PeakVolume *) 0 ;
  TagLib::ByteVector *arg2 = (TagLib::ByteVector *) 0 ;
  
  arg1 = (PeakVolume *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (arg1) (arg1)->peakVolume = *arg2;
}


SWIGEXPORT void * D_PeakVolume_peakVolume_get(void * jarg1) {
  void * jresult ;
  PeakVolume *arg1 = (PeakVolume *) 0 ;
  TagLib::ByteVector *result = 0 ;
  
  arg1 = (PeakVolume *)jarg1;
  result = (TagLib::ByteVector *)& ((arg1)->peakVolume);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_PeakVolume(void * jarg1) {
  PeakVolume *arg1 = (PeakVolume *) 0 ;
  
  arg1 = (PeakVolume *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_RelativeVolumeFrame__SWIG_0() {
  void * jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *result = 0 ;
  
  result = (TagLib::ID3v2::RelativeVolumeFrame *)new TagLib::ID3v2::RelativeVolumeFrame();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_RelativeVolumeFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::RelativeVolumeFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::RelativeVolumeFrame *)new TagLib::ID3v2::RelativeVolumeFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_RelativeVolumeFrame(void * jarg1) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_RelativeVolumeFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_RelativeVolumeFrame_channels(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  SwigValueWrapper< TagLib::List< enum TagLib::ID3v2::RelativeVolumeFrame::ChannelType > > result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->channels();
  jresult = new TagLib::List< TagLib::ID3v2::RelativeVolumeFrame::ChannelType >((const TagLib::List< TagLib::ID3v2::RelativeVolumeFrame::ChannelType > &)result); 
  return jresult;
}


SWIGEXPORT int D_TagLib_ID3v2_RelativeVolumeFrame_channelType(void * jarg1) {
  int jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  result = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->channelType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setChannelType(void * jarg1, int jarg2) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg2 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)jarg2; 
  (arg1)->setChannelType(arg2);
}


SWIGEXPORT short D_TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustmentIndex__SWIG_0(void * jarg1, int jarg2) {
  short jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg2 ;
  short result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)jarg2; 
  result = (short)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustmentIndex(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT short D_TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustmentIndex__SWIG_1(void * jarg1) {
  short jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  short result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  result = (short)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustmentIndex();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustmentIndex__SWIG_0(void * jarg1, short jarg2, int jarg3) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  short arg2 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg3 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (short)jarg2;
  arg3 = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)jarg3; 
  (arg1)->setVolumeAdjustmentIndex(arg2,arg3);
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustmentIndex__SWIG_1(void * jarg1, short jarg2) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  short arg2 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (short)jarg2;
  (arg1)->setVolumeAdjustmentIndex(arg2);
}


SWIGEXPORT float D_TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustment__SWIG_0(void * jarg1, int jarg2) {
  float jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg2 ;
  float result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)jarg2; 
  result = (float)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustment(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_TagLib_ID3v2_RelativeVolumeFrame_volumeAdjustment__SWIG_1(void * jarg1) {
  float jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  float result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  result = (float)((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->volumeAdjustment();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustment__SWIG_0(void * jarg1, float jarg2, int jarg3) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  float arg2 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg3 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)jarg3; 
  (arg1)->setVolumeAdjustment(arg2,arg3);
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setVolumeAdjustment__SWIG_1(void * jarg1, float jarg2) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  float arg2 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->setVolumeAdjustment(arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_RelativeVolumeFrame_peakVolume__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg2 ;
  PeakVolume result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)jarg2; 
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->peakVolume(arg2);
  jresult = new PeakVolume((const PeakVolume &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_RelativeVolumeFrame_peakVolume__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  PeakVolume result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->peakVolume();
  jresult = new PeakVolume((const PeakVolume &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setPeakVolume__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  PeakVolume *arg2 = 0 ;
  TagLib::ID3v2::RelativeVolumeFrame::ChannelType arg3 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (PeakVolume *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "PeakVolume const & type is null");
    return ;
  } 
  arg3 = (TagLib::ID3v2::RelativeVolumeFrame::ChannelType)jarg3; 
  (arg1)->setPeakVolume((PeakVolume const &)*arg2,arg3);
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setPeakVolume__SWIG_1(void * jarg1, void * jarg2) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  PeakVolume *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  arg2 = (PeakVolume *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "PeakVolume const & type is null");
    return ;
  } 
  (arg1)->setPeakVolume((PeakVolume const &)*arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_RelativeVolumeFrame_identification(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  result = ((TagLib::ID3v2::RelativeVolumeFrame const *)arg1)->identification();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_RelativeVolumeFrame_setIdentification(void * jarg1, char* jarg2) {
  TagLib::ID3v2::RelativeVolumeFrame *arg1 = (TagLib::ID3v2::RelativeVolumeFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::RelativeVolumeFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setIdentification((TagLib::String const &)*arg2);
}


SWIGEXPORT void * D_new_TagLib_ID3v2_TextIdentificationFrame(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::TextIdentificationFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::TextIdentificationFrame *)new TagLib::ID3v2::TextIdentificationFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_TextIdentificationFrame(void * jarg1) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::TextIdentificationFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_TagLib_ID3v2_TextIdentificationFrame_setText__SWIG_0(void * jarg1, void * jarg2) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::TextIdentificationFrame *)jarg1;
  arg2 = (TagLib::StringList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return ;
  } 
  (arg1)->setText((TagLib::StringList const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_TextIdentificationFrame_setText__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::TextIdentificationFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setText((TagLib::String const &)*arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_TextIdentificationFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::TextIdentificationFrame *)jarg1;
  result = ((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_TextIdentificationFrame_fieldList(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::TextIdentificationFrame *arg1 = (TagLib::ID3v2::TextIdentificationFrame *) 0 ;
  TagLib::StringList result;
  
  arg1 = (TagLib::ID3v2::TextIdentificationFrame *)jarg1;
  result = ((TagLib::ID3v2::TextIdentificationFrame const *)arg1)->fieldList();
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_UserTextIdentificationFrame(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)new TagLib::ID3v2::UserTextIdentificationFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_UserTextIdentificationFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)jarg1;
  result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_UserTextIdentificationFrame_description(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)jarg1;
  result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->description();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_UserTextIdentificationFrame_setDescription(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_UserTextIdentificationFrame_fieldList(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::StringList result;
  
  arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)jarg1;
  result = ((TagLib::ID3v2::UserTextIdentificationFrame const *)arg1)->fieldList();
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_UserTextIdentificationFrame_setText__SWIG_0(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setText((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_UserTextIdentificationFrame_setText__SWIG_1(void * jarg1, void * jarg2) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)jarg1;
  arg2 = (TagLib::StringList *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return ;
  } 
  (arg1)->setText((TagLib::StringList const &)*arg2);
}


SWIGEXPORT void * D_TagLib_ID3v2_UserTextIdentificationFrame_find(void * jarg1, char* jarg2) {
  void * jresult ;
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::ID3v2::UserTextIdentificationFrame *result = 0 ;
  
  arg1 = (TagLib::ID3v2::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (TagLib::ID3v2::UserTextIdentificationFrame *)TagLib::ID3v2::UserTextIdentificationFrame::find(arg1,(TagLib::String const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_UserTextIdentificationFrame(void * jarg1) {
  TagLib::ID3v2::UserTextIdentificationFrame *arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::UserTextIdentificationFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_UniqueFileIdentifierFrame__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::UniqueFileIdentifierFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::UniqueFileIdentifierFrame *)new TagLib::ID3v2::UniqueFileIdentifierFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_UniqueFileIdentifierFrame__SWIG_1(char* jarg1, void * jarg2) {
  void * jresult ;
  TagLib::String *arg1 = 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ID3v2::UniqueFileIdentifierFrame *result = 0 ;
  
  {
    arg1 = &TagLib::String(jarg1, TagLib::String::UTF8);
  }
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::UniqueFileIdentifierFrame *)new TagLib::ID3v2::UniqueFileIdentifierFrame((TagLib::String const &)*arg1,(TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_UniqueFileIdentifierFrame(void * jarg1) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_UniqueFileIdentifierFrame_owner(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *)jarg1;
  result = ((TagLib::ID3v2::UniqueFileIdentifierFrame const *)arg1)->owner();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_UniqueFileIdentifierFrame_identifier(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *)jarg1;
  result = ((TagLib::ID3v2::UniqueFileIdentifierFrame const *)arg1)->identifier();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_UniqueFileIdentifierFrame_setOwner(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setOwner((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_UniqueFileIdentifierFrame_setIdentifier(void * jarg1, void * jarg2) {
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setIdentifier((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_UniqueFileIdentifierFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UniqueFileIdentifierFrame *arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UniqueFileIdentifierFrame *)jarg1;
  result = ((TagLib::ID3v2::UniqueFileIdentifierFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_UnsynchronizedLyricsFrame(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::UnsynchronizedLyricsFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)new TagLib::ID3v2::UnsynchronizedLyricsFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_UnsynchronizedLyricsFrame(void * jarg1) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_UnsynchronizedLyricsFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_TagLib_ID3v2_UnsynchronizedLyricsFrame_language(void * jarg1) {
  void * jresult ;
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->language();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_UnsynchronizedLyricsFrame_description(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->description();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_UnsynchronizedLyricsFrame_text(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  result = ((TagLib::ID3v2::UnsynchronizedLyricsFrame const *)arg1)->text();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_UnsynchronizedLyricsFrame_setLanguage(void * jarg1, void * jarg2) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setLanguage((TagLib::ByteVector const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_UnsynchronizedLyricsFrame_setDescription(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_UnsynchronizedLyricsFrame_setText(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UnsynchronizedLyricsFrame *arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UnsynchronizedLyricsFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setText((TagLib::String const &)*arg2);
}


SWIGEXPORT void * D_new_TagLib_ID3v2_UrlLinkFrame(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::UrlLinkFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::UrlLinkFrame *)new TagLib::ID3v2::UrlLinkFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_UrlLinkFrame(void * jarg1) {
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::UrlLinkFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_UrlLinkFrame_url(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UrlLinkFrame *)jarg1;
  result = ((TagLib::ID3v2::UrlLinkFrame const *)arg1)->url();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_UrlLinkFrame_setUrl(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UrlLinkFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setUrl((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_ID3v2_UrlLinkFrame_setText(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UrlLinkFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setText((TagLib::String const &)*arg2);
}


SWIGEXPORT char* D_TagLib_ID3v2_UrlLinkFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UrlLinkFrame *arg1 = (TagLib::ID3v2::UrlLinkFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UrlLinkFrame *)jarg1;
  result = ((TagLib::ID3v2::UrlLinkFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_ID3v2_UserUrlLinkFrame(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::UserUrlLinkFrame *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::ID3v2::UserUrlLinkFrame *)new TagLib::ID3v2::UserUrlLinkFrame((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_ID3v2_UserUrlLinkFrame(void * jarg1) {
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  
  arg1 = (TagLib::ID3v2::UserUrlLinkFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_ID3v2_UserUrlLinkFrame_toString(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UserUrlLinkFrame *)jarg1;
  result = ((TagLib::ID3v2::UserUrlLinkFrame const *)arg1)->toString();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_ID3v2_UserUrlLinkFrame_description(void * jarg1) {
  char* jresult ;
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::ID3v2::UserUrlLinkFrame *)jarg1;
  result = ((TagLib::ID3v2::UserUrlLinkFrame const *)arg1)->description();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_ID3v2_UserUrlLinkFrame_setDescription(void * jarg1, char* jarg2) {
  TagLib::ID3v2::UserUrlLinkFrame *arg1 = (TagLib::ID3v2::UserUrlLinkFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::ID3v2::UserUrlLinkFrame *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setDescription((TagLib::String const &)*arg2);
}


SWIGEXPORT unsigned int D_toUInt(void * jarg1) {
  unsigned int jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::uint)TagLib::ID3v2::SynchData::toUInt((TagLib::ByteVector const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_fromUInt(unsigned int jarg1) {
  void * jresult ;
  TagLib::uint arg1 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::uint)jarg1;
  result = TagLib::ID3v2::SynchData::fromUInt(arg1);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_decode(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = TagLib::ID3v2::SynchData::decode((TagLib::ByteVector const &)*arg1);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_CoverArt__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  TagLib::MP4::CoverArt::Format arg1 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::MP4::CoverArt *result = 0 ;
  
  arg1 = (TagLib::MP4::CoverArt::Format)jarg1; 
  arg2 = (TagLib::ByteVector *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::MP4::CoverArt *)new TagLib::MP4::CoverArt(arg1,(TagLib::ByteVector const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MP4_CoverArt(void * jarg1) {
  TagLib::MP4::CoverArt *arg1 = (TagLib::MP4::CoverArt *) 0 ;
  
  arg1 = (TagLib::MP4::CoverArt *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_MP4_CoverArt__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MP4::CoverArt *arg1 = 0 ;
  TagLib::MP4::CoverArt *result = 0 ;
  
  arg1 = (TagLib::MP4::CoverArt *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::MP4::CoverArt const & type is null");
    return 0;
  } 
  result = (TagLib::MP4::CoverArt *)new TagLib::MP4::CoverArt((TagLib::MP4::CoverArt const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MP4_CoverArt_format(void * jarg1) {
  int jresult ;
  TagLib::MP4::CoverArt *arg1 = (TagLib::MP4::CoverArt *) 0 ;
  TagLib::MP4::CoverArt::Format result;
  
  arg1 = (TagLib::MP4::CoverArt *)jarg1;
  result = (TagLib::MP4::CoverArt::Format)((TagLib::MP4::CoverArt const *)arg1)->format();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * D_TagLib_MP4_CoverArt_data(void * jarg1) {
  void * jresult ;
  TagLib::MP4::CoverArt *arg1 = (TagLib::MP4::CoverArt *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::MP4::CoverArt *)jarg1;
  result = ((TagLib::MP4::CoverArt const *)arg1)->data();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::MP4::Properties::ReadStyle arg3 ;
  TagLib::MP4::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::MP4::Properties::ReadStyle)jarg3; 
  result = (TagLib::MP4::File *)new TagLib::MP4::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::MP4::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::MP4::File *)new TagLib::MP4::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::MP4::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::MP4::File *)new TagLib::MP4::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MP4_File(void * jarg1) {
  TagLib::MP4::File *arg1 = (TagLib::MP4::File *) 0 ;
  
  arg1 = (TagLib::MP4::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_MP4_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::MP4::File *arg1 = (TagLib::MP4::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::MP4::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::MP4::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MP4_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::MP4::File *arg1 = (TagLib::MP4::File *) 0 ;
  TagLib::MP4::Properties *result = 0 ;
  
  arg1 = (TagLib::MP4::File *)jarg1;
  result = (TagLib::MP4::Properties *)((TagLib::MP4::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MP4_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::MP4::File *arg1 = (TagLib::MP4::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::MP4::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Item__SWIG_0() {
  void * jresult ;
  TagLib::MP4::Item *result = 0 ;
  
  result = (TagLib::MP4::Item *)new TagLib::MP4::Item();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Item__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MP4::Item *arg1 = 0 ;
  TagLib::MP4::Item *result = 0 ;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::MP4::Item const & type is null");
    return 0;
  } 
  result = (TagLib::MP4::Item *)new TagLib::MP4::Item((TagLib::MP4::Item const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MP4_Item(void * jarg1) {
  TagLib::MP4::Item *arg1 = (TagLib::MP4::Item *) 0 ;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_MP4_Item__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  TagLib::MP4::Item *result = 0 ;
  
  arg1 = (int)jarg1;
  result = (TagLib::MP4::Item *)new TagLib::MP4::Item(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Item__SWIG_3(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  TagLib::MP4::Item *result = 0 ;
  
  arg1 = jarg1 ? true : false;
  result = (TagLib::MP4::Item *)new TagLib::MP4::Item(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Item__SWIG_4(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  TagLib::MP4::Item *result = 0 ;
  
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  result = (TagLib::MP4::Item *)new TagLib::MP4::Item(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Item__SWIG_5(void * jarg1) {
  void * jresult ;
  TagLib::StringList *arg1 = 0 ;
  TagLib::MP4::Item *result = 0 ;
  
  arg1 = (TagLib::StringList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::StringList const & type is null");
    return 0;
  } 
  result = (TagLib::MP4::Item *)new TagLib::MP4::Item((TagLib::StringList const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Item__SWIG_6(void * jarg1) {
  void * jresult ;
  TagLib::MP4::CoverArtList *arg1 = 0 ;
  TagLib::MP4::Item *result = 0 ;
  
  arg1 = (TagLib::MP4::CoverArtList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::MP4::CoverArtList const & type is null");
    return 0;
  } 
  result = (TagLib::MP4::Item *)new TagLib::MP4::Item((TagLib::MP4::CoverArtList const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MP4_Item_toInt(void * jarg1) {
  int jresult ;
  TagLib::MP4::Item *arg1 = (TagLib::MP4::Item *) 0 ;
  int result;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  result = (int)((TagLib::MP4::Item const *)arg1)->toInt();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MP4_Item_toBool(void * jarg1) {
  unsigned int jresult ;
  TagLib::MP4::Item *arg1 = (TagLib::MP4::Item *) 0 ;
  bool result;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  result = (bool)((TagLib::MP4::Item const *)arg1)->toBool();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MP4_Item_toIntPair(void * jarg1) {
  void * jresult ;
  TagLib::MP4::Item *arg1 = (TagLib::MP4::Item *) 0 ;
  TagLib::MP4::Item::IntPair result;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  result = ((TagLib::MP4::Item const *)arg1)->toIntPair();
  jresult = new TagLib::MP4::Item::IntPair((const TagLib::MP4::Item::IntPair &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_MP4_Item_toStringList(void * jarg1) {
  void * jresult ;
  TagLib::MP4::Item *arg1 = (TagLib::MP4::Item *) 0 ;
  TagLib::StringList result;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  result = ((TagLib::MP4::Item const *)arg1)->toStringList();
  jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_MP4_Item_toCoverArtList(void * jarg1) {
  void * jresult ;
  TagLib::MP4::Item *arg1 = (TagLib::MP4::Item *) 0 ;
  SwigValueWrapper< TagLib::List< TagLib::MP4::CoverArt > > result;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  result = ((TagLib::MP4::Item const *)arg1)->toCoverArtList();
  jresult = new TagLib::MP4::CoverArtList((const TagLib::MP4::CoverArtList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MP4_Item_isValid(void * jarg1) {
  unsigned int jresult ;
  TagLib::MP4::Item *arg1 = (TagLib::MP4::Item *) 0 ;
  bool result;
  
  arg1 = (TagLib::MP4::Item *)jarg1;
  result = (bool)((TagLib::MP4::Item const *)arg1)->isValid();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Properties__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  TagLib::MP4::File *arg1 = (TagLib::MP4::File *) 0 ;
  TagLib::MP4::Atoms *arg2 = (TagLib::MP4::Atoms *) 0 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::MP4::Properties *result = 0 ;
  
  arg1 = (TagLib::MP4::File *)jarg1;
  arg2 = (TagLib::MP4::Atoms *)jarg2;
  arg3 = (TagLib::AudioProperties::ReadStyle)jarg3; 
  result = (TagLib::MP4::Properties *)new TagLib::MP4::Properties(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Properties__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::MP4::File *arg1 = (TagLib::MP4::File *) 0 ;
  TagLib::MP4::Atoms *arg2 = (TagLib::MP4::Atoms *) 0 ;
  TagLib::MP4::Properties *result = 0 ;
  
  arg1 = (TagLib::MP4::File *)jarg1;
  arg2 = (TagLib::MP4::Atoms *)jarg2;
  result = (TagLib::MP4::Properties *)new TagLib::MP4::Properties(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MP4_Properties(void * jarg1) {
  TagLib::MP4::Properties *arg1 = (TagLib::MP4::Properties *) 0 ;
  
  arg1 = (TagLib::MP4::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_MP4_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::MP4::Properties *arg1 = (TagLib::MP4::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MP4::Properties *)jarg1;
  result = (int)((TagLib::MP4::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MP4_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::MP4::Properties *arg1 = (TagLib::MP4::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MP4::Properties *)jarg1;
  result = (int)((TagLib::MP4::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MP4_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::MP4::Properties *arg1 = (TagLib::MP4::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MP4::Properties *)jarg1;
  result = (int)((TagLib::MP4::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MP4_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::MP4::Properties *arg1 = (TagLib::MP4::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MP4::Properties *)jarg1;
  result = (int)((TagLib::MP4::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MP4_Properties_bitsPerSample(void * jarg1) {
  int jresult ;
  TagLib::MP4::Properties *arg1 = (TagLib::MP4::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MP4::Properties *)jarg1;
  result = (int)((TagLib::MP4::Properties const *)arg1)->bitsPerSample();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MP4_Tag(void * jarg1, void * jarg2) {
  void * jresult ;
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::MP4::Atoms *arg2 = (TagLib::MP4::Atoms *) 0 ;
  TagLib::MP4::Tag *result = 0 ;
  
  arg1 = (TagLib::File *)jarg1;
  arg2 = (TagLib::MP4::Atoms *)jarg2;
  result = (TagLib::MP4::Tag *)new TagLib::MP4::Tag(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MP4_Tag(void * jarg1) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_MP4_Tag_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  bool result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT char* D_TagLib_MP4_Tag_title__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = ((TagLib::MP4::Tag const *)arg1)->title();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_MP4_Tag_artist__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = ((TagLib::MP4::Tag const *)arg1)->artist();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_MP4_Tag_album__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = ((TagLib::MP4::Tag const *)arg1)->album();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_MP4_Tag_comment__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = ((TagLib::MP4::Tag const *)arg1)->comment();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_MP4_Tag_genre__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = ((TagLib::MP4::Tag const *)arg1)->genre();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MP4_Tag_year__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::MP4::Tag const *)arg1)->year();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MP4_Tag_track__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = (TagLib::uint)((TagLib::MP4::Tag const *)arg1)->track();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_MP4_Tag_title__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_MP4_Tag_artist__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_MP4_Tag_album__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_MP4_Tag_comment__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_MP4_Tag_genre__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_MP4_Tag_year__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setYear(arg2);
}


SWIGEXPORT void D_TagLib_MP4_Tag_track__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTrack(arg2);
}


SWIGEXPORT void * D_TagLib_MP4_Tag_itemListMap(void * jarg1) {
  void * jresult ;
  TagLib::MP4::Tag *arg1 = (TagLib::MP4::Tag *) 0 ;
  TagLib::MP4::ItemListMap *result = 0 ;
  
  arg1 = (TagLib::MP4::Tag *)jarg1;
  result = (TagLib::MP4::ItemListMap *) &(arg1)->itemListMap();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_HeaderSize_get() {
  unsigned int jresult ;
  TagLib::uint result;
  
  result = (TagLib::uint)(TagLib::uint)TagLib::MPC::HeaderSize;
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPC_Properties__SWIG_0(void * jarg1, long jarg2, int jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::MPC::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (long)jarg2;
  arg3 = (TagLib::AudioProperties::ReadStyle)jarg3; 
  result = (TagLib::MPC::Properties *)new TagLib::MPC::Properties((TagLib::ByteVector const &)*arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPC_Properties__SWIG_1(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::MPC::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (long)jarg2;
  result = (TagLib::MPC::Properties *)new TagLib::MPC::Properties((TagLib::ByteVector const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MPC_Properties(void * jarg1) {
  TagLib::MPC::Properties *arg1 = (TagLib::MPC::Properties *) 0 ;
  
  arg1 = (TagLib::MPC::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_MPC_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::MPC::Properties *arg1 = (TagLib::MPC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPC::Properties *)jarg1;
  result = (int)((TagLib::MPC::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPC_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::MPC::Properties *arg1 = (TagLib::MPC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPC::Properties *)jarg1;
  result = (int)((TagLib::MPC::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPC_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::MPC::Properties *arg1 = (TagLib::MPC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPC::Properties *)jarg1;
  result = (int)((TagLib::MPC::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPC_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::MPC::Properties *arg1 = (TagLib::MPC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPC::Properties *)jarg1;
  result = (int)((TagLib::MPC::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPC_Properties_mpcVersion(void * jarg1) {
  int jresult ;
  TagLib::MPC::Properties *arg1 = (TagLib::MPC::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPC::Properties *)jarg1;
  result = (int)((TagLib::MPC::Properties const *)arg1)->mpcVersion();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPC_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::MPC::Properties::ReadStyle arg3 ;
  TagLib::MPC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::MPC::Properties::ReadStyle)jarg3; 
  result = (TagLib::MPC::File *)new TagLib::MPC::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPC_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::MPC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::MPC::File *)new TagLib::MPC::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPC_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::MPC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::MPC::File *)new TagLib::MPC::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MPC_File(void * jarg1) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_MPC_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::MPC::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPC_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  TagLib::MPC::Properties *result = 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  result = (TagLib::MPC::Properties *)((TagLib::MPC::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPC_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPC_File_ID3v1Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPC_File_ID3v1Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPC_File_APETag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  bool arg2 ;
  TagLib::APE::Tag *result = 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::APE::Tag *)(arg1)->APETag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPC_File_APETag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  TagLib::APE::Tag *result = 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  result = (TagLib::APE::Tag *)(arg1)->APETag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_MPC_File_strip__SWIG_0(void * jarg1, int jarg2) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->strip(arg2);
}


SWIGEXPORT void D_TagLib_MPC_File_strip__SWIG_1(void * jarg1) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  (arg1)->strip();
}


SWIGEXPORT void D_TagLib_MPC_File_remove__SWIG_0(void * jarg1, int jarg2) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->remove(arg2);
}


SWIGEXPORT void D_TagLib_MPC_File_remove__SWIG_1(void * jarg1) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  
  arg1 = (TagLib::MPC::File *)jarg1;
  (arg1)->remove();
}


SWIGEXPORT void * D_new_TagLib_MPEG_XingHeader(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::MPEG::XingHeader *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::MPEG::XingHeader *)new TagLib::MPEG::XingHeader((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MPEG_XingHeader(void * jarg1) {
  TagLib::MPEG::XingHeader *arg1 = (TagLib::MPEG::XingHeader *) 0 ;
  
  arg1 = (TagLib::MPEG::XingHeader *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_XingHeader_isValid(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::XingHeader *arg1 = (TagLib::MPEG::XingHeader *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::XingHeader *)jarg1;
  result = (bool)((TagLib::MPEG::XingHeader const *)arg1)->isValid();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_XingHeader_totalFrames(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::XingHeader *arg1 = (TagLib::MPEG::XingHeader *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::MPEG::XingHeader *)jarg1;
  result = (TagLib::uint)((TagLib::MPEG::XingHeader const *)arg1)->totalFrames();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_XingHeader_totalSize(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::XingHeader *arg1 = (TagLib::MPEG::XingHeader *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::MPEG::XingHeader *)jarg1;
  result = (TagLib::uint)((TagLib::MPEG::XingHeader const *)arg1)->totalSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_XingHeader_xingHeaderOffset(int jarg1, int jarg2) {
  int jresult ;
  TagLib::MPEG::Header::Version arg1 ;
  TagLib::MPEG::Header::ChannelMode arg2 ;
  int result;
  
  arg1 = (TagLib::MPEG::Header::Version)jarg1; 
  arg2 = (TagLib::MPEG::Header::ChannelMode)jarg2; 
  result = (int)TagLib::MPEG::XingHeader::xingHeaderOffset(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_Properties__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::MPEG::Properties *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (TagLib::AudioProperties::ReadStyle)jarg2; 
  result = (TagLib::MPEG::Properties *)new TagLib::MPEG::Properties(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_Properties__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::MPEG::Properties *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (TagLib::MPEG::Properties *)new TagLib::MPEG::Properties(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MPEG_Properties(void * jarg1) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_MPEG_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (int)((TagLib::MPEG::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (int)((TagLib::MPEG::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (int)((TagLib::MPEG::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (int)((TagLib::MPEG::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_Properties_xingHeader(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  TagLib::MPEG::XingHeader *result = 0 ;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (TagLib::MPEG::XingHeader *)((TagLib::MPEG::Properties const *)arg1)->xingHeader();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Properties__version(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  TagLib::MPEG::Header::Version result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (TagLib::MPEG::Header::Version)((TagLib::MPEG::Properties const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Properties_layer(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (int)((TagLib::MPEG::Properties const *)arg1)->layer();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Properties_protectionEnabled(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (bool)((TagLib::MPEG::Properties const *)arg1)->protectionEnabled();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Properties_channelMode(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  TagLib::MPEG::Header::ChannelMode result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (TagLib::MPEG::Header::ChannelMode)((TagLib::MPEG::Properties const *)arg1)->channelMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Properties_isCopyrighted(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (bool)((TagLib::MPEG::Properties const *)arg1)->isCopyrighted();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Properties_isOriginal(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Properties *)jarg1;
  result = (bool)((TagLib::MPEG::Properties const *)arg1)->isOriginal();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_Header__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::MPEG::Header *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::MPEG::Header *)new TagLib::MPEG::Header((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_Header__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::Header *arg1 = 0 ;
  TagLib::MPEG::Header *result = 0 ;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::MPEG::Header const & type is null");
    return 0;
  } 
  result = (TagLib::MPEG::Header *)new TagLib::MPEG::Header((TagLib::MPEG::Header const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MPEG_Header(void * jarg1) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Header_isValid(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isValid();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Header__version(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  TagLib::MPEG::Header::Version result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (TagLib::MPEG::Header::Version)((TagLib::MPEG::Header const *)arg1)->version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Header_layer(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (int)((TagLib::MPEG::Header const *)arg1)->layer();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Header_protectionEnabled(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (bool)((TagLib::MPEG::Header const *)arg1)->protectionEnabled();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Header_bitrate(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (int)((TagLib::MPEG::Header const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Header_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (int)((TagLib::MPEG::Header const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Header_isPadded(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isPadded();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Header_channelMode(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  TagLib::MPEG::Header::ChannelMode result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (TagLib::MPEG::Header::ChannelMode)((TagLib::MPEG::Header const *)arg1)->channelMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Header_isCopyrighted(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isCopyrighted();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_Header_isOriginal(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isOriginal();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Header_frameLength(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (int)((TagLib::MPEG::Header const *)arg1)->frameLength();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_MPEG_Header_samplesPerFrame(void * jarg1) {
  int jresult ;
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  
  arg1 = (TagLib::MPEG::Header *)jarg1;
  result = (int)((TagLib::MPEG::Header const *)arg1)->samplesPerFrame();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::MPEG::Properties::ReadStyle arg3 ;
  TagLib::MPEG::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::MPEG::Properties::ReadStyle)jarg3; 
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::MPEG::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::MPEG::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_File__SWIG_3(const char* jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::MPEG::Properties::ReadStyle arg4 ;
  TagLib::MPEG::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  arg3 = jarg3 ? true : false;
  arg4 = (TagLib::MPEG::Properties::ReadStyle)jarg4; 
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_File__SWIG_4(const char* jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::MPEG::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  arg3 = jarg3 ? true : false;
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_MPEG_File__SWIG_5(const char* jarg1, void * jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::MPEG::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_MPEG_File(void * jarg1) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_MPEG_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::MPEG::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::MPEG::Properties *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (TagLib::MPEG::Properties *)((TagLib::MPEG::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_File_save__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_File_save__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->save(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_File_save__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (int)jarg2;
  arg3 = jarg3 ? true : false;
  result = (bool)(arg1)->save(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_File_ID3v2Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_File_ID3v2Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_File_ID3v1Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_File_ID3v1Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_File_APETag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool arg2 ;
  TagLib::APE::Tag *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::APE::Tag *)(arg1)->APETag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_MPEG_File_APETag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::APE::Tag *result = 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (TagLib::APE::Tag *)(arg1)->APETag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_File_strip__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->strip(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_File_strip__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (bool)(arg1)->strip();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_MPEG_File_strip__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (int)jarg2;
  arg3 = jarg3 ? true : false;
  result = (bool)(arg1)->strip(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_MPEG_File_setID3v2FrameFactory(void * jarg1, void * jarg2) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
}


SWIGEXPORT long D_TagLib_MPEG_File_firstFrameOffset(void * jarg1) {
  long jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (long)(arg1)->firstFrameOffset();
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_MPEG_File_nextFrameOffset(void * jarg1, long jarg2) {
  long jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long arg2 ;
  long result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (long)jarg2;
  result = (long)(arg1)->nextFrameOffset(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_MPEG_File_previousFrameOffset(void * jarg1, long jarg2) {
  long jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long arg2 ;
  long result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  arg2 = (long)jarg2;
  result = (long)(arg1)->previousFrameOffset(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_MPEG_File_lastFrameOffset(void * jarg1) {
  long jresult ;
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long result;
  
  arg1 = (TagLib::MPEG::File *)jarg1;
  result = (long)(arg1)->lastFrameOffset();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_Page(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  long arg2 ;
  TagLib::Ogg::Page *result = 0 ;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  arg2 = (long)jarg2;
  result = (TagLib::Ogg::Page *)new TagLib::Ogg::Page(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Ogg_Page(void * jarg1) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  delete arg1;
}


SWIGEXPORT long D_TagLib_Ogg_Page_fileOffset(void * jarg1) {
  long jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  long result;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  result = (long)((TagLib::Ogg::Page const *)arg1)->fileOffset();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_header(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  result = (TagLib::Ogg::PageHeader *)((TagLib::Ogg::Page const *)arg1)->header();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_getCopyWithNewPageSequenceNumber(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int arg2 ;
  TagLib::Ogg::Page *result = 0 ;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  arg2 = (int)jarg2;
  result = (TagLib::Ogg::Page *)(arg1)->getCopyWithNewPageSequenceNumber(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Ogg_Page_firstPacketIndex(void * jarg1) {
  int jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  result = (int)((TagLib::Ogg::Page const *)arg1)->firstPacketIndex();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_Page_setFirstPacketIndex(void * jarg1, int jarg2) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setFirstPacketIndex(arg2);
}


SWIGEXPORT int D_TagLib_Ogg_Page_containsPacket(void * jarg1, int jarg2) {
  int jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int arg2 ;
  TagLib::Ogg::Page::ContainsPacketFlags result;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  arg2 = (int)jarg2;
  result = (TagLib::Ogg::Page::ContainsPacketFlags)((TagLib::Ogg::Page const *)arg1)->containsPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_Page_packetCount(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  result = (TagLib::uint)((TagLib::Ogg::Page const *)arg1)->packetCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_packets(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  TagLib::ByteVectorList result;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  result = ((TagLib::Ogg::Page const *)arg1)->packets();
  jresult = new TagLib::ByteVectorList((const TagLib::ByteVectorList &)result); 
  return jresult;
}


SWIGEXPORT int D_TagLib_Ogg_Page_size(void * jarg1) {
  int jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  result = (int)((TagLib::Ogg::Page const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_render(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::Ogg::Page *)jarg1;
  result = ((TagLib::Ogg::Page const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_paginate__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = 0 ;
  TagLib::Ogg::Page::PaginationStrategy arg2 ;
  TagLib::uint arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  SwigValueWrapper< TagLib::List< TagLib::Ogg::Page * > > result;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVectorList const & type is null");
    return 0;
  } 
  arg2 = (TagLib::Ogg::Page::PaginationStrategy)jarg2; 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (int)jarg4;
  arg5 = jarg5 ? true : false;
  arg6 = jarg6 ? true : false;
  arg7 = jarg7 ? true : false;
  result = TagLib::Ogg::Page::paginate((TagLib::ByteVectorList const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = new TagLib::List< TagLib::Ogg::Page * >((const TagLib::List< TagLib::Ogg::Page * > &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_paginate__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = 0 ;
  TagLib::Ogg::Page::PaginationStrategy arg2 ;
  TagLib::uint arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  SwigValueWrapper< TagLib::List< TagLib::Ogg::Page * > > result;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVectorList const & type is null");
    return 0;
  } 
  arg2 = (TagLib::Ogg::Page::PaginationStrategy)jarg2; 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (int)jarg4;
  arg5 = jarg5 ? true : false;
  arg6 = jarg6 ? true : false;
  result = TagLib::Ogg::Page::paginate((TagLib::ByteVectorList const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = new TagLib::List< TagLib::Ogg::Page * >((const TagLib::List< TagLib::Ogg::Page * > &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_paginate__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = 0 ;
  TagLib::Ogg::Page::PaginationStrategy arg2 ;
  TagLib::uint arg3 ;
  int arg4 ;
  bool arg5 ;
  SwigValueWrapper< TagLib::List< TagLib::Ogg::Page * > > result;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVectorList const & type is null");
    return 0;
  } 
  arg2 = (TagLib::Ogg::Page::PaginationStrategy)jarg2; 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (int)jarg4;
  arg5 = jarg5 ? true : false;
  result = TagLib::Ogg::Page::paginate((TagLib::ByteVectorList const &)*arg1,arg2,arg3,arg4,arg5);
  jresult = new TagLib::List< TagLib::Ogg::Page * >((const TagLib::List< TagLib::Ogg::Page * > &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Page_paginate__SWIG_3(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  TagLib::ByteVectorList *arg1 = 0 ;
  TagLib::Ogg::Page::PaginationStrategy arg2 ;
  TagLib::uint arg3 ;
  int arg4 ;
  SwigValueWrapper< TagLib::List< TagLib::Ogg::Page * > > result;
  
  arg1 = (TagLib::ByteVectorList *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVectorList const & type is null");
    return 0;
  } 
  arg2 = (TagLib::Ogg::Page::PaginationStrategy)jarg2; 
  arg3 = (TagLib::uint)jarg3;
  arg4 = (int)jarg4;
  result = TagLib::Ogg::Page::paginate((TagLib::ByteVectorList const &)*arg1,arg2,arg3,arg4);
  jresult = new TagLib::List< TagLib::Ogg::Page * >((const TagLib::List< TagLib::Ogg::Page * > &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_PageHeader__SWIG_0(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  long arg2 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  arg2 = (long)jarg2;
  result = (TagLib::Ogg::PageHeader *)new TagLib::Ogg::PageHeader(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_PageHeader__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  result = (TagLib::Ogg::PageHeader *)new TagLib::Ogg::PageHeader(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_PageHeader__SWIG_2() {
  void * jresult ;
  TagLib::Ogg::PageHeader *result = 0 ;
  
  result = (TagLib::Ogg::PageHeader *)new TagLib::Ogg::PageHeader();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Ogg_PageHeader(void * jarg1) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_PageHeader_isValid(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->isValid();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_PageHeader_packetSizes(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  SwigValueWrapper< TagLib::List< int > > result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = ((TagLib::Ogg::PageHeader const *)arg1)->packetSizes();
  jresult = new TagLib::List< int >((const TagLib::List< int > &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setPacketSizes(void * jarg1, void * jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  TagLib::List< int > *arg2 = 0 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = (TagLib::List< int > *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::List< int > const & type is null");
    return ;
  } 
  (arg1)->setPacketSizes((TagLib::List< int > const &)*arg2);
}


SWIGEXPORT unsigned int D_TagLib_Ogg_PageHeader_firstPacketContinued(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->firstPacketContinued();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setFirstPacketContinued(void * jarg1, unsigned int jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setFirstPacketContinued(arg2);
}


SWIGEXPORT unsigned int D_TagLib_Ogg_PageHeader_lastPacketCompleted(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->lastPacketCompleted();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setLastPacketCompleted(void * jarg1, unsigned int jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setLastPacketCompleted(arg2);
}


SWIGEXPORT unsigned int D_TagLib_Ogg_PageHeader_firstPageOfStream(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->firstPageOfStream();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setFirstPageOfStream(void * jarg1, unsigned int jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setFirstPageOfStream(arg2);
}


SWIGEXPORT unsigned int D_TagLib_Ogg_PageHeader_lastPageOfStream(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->lastPageOfStream();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setLastPageOfStream(void * jarg1, unsigned int jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->setLastPageOfStream(arg2);
}


SWIGEXPORT long long D_TagLib_Ogg_PageHeader_absoluteGranularPosition(void * jarg1) {
  long long jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  long long result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (long long)((TagLib::Ogg::PageHeader const *)arg1)->absoluteGranularPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setAbsoluteGranularPosition(void * jarg1, long long jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  long long arg2 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = (long long)jarg2;
  (arg1)->setAbsoluteGranularPosition(arg2);
}


SWIGEXPORT unsigned int D_TagLib_Ogg_PageHeader_streamSerialNumber(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (TagLib::uint)((TagLib::Ogg::PageHeader const *)arg1)->streamSerialNumber();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setStreamSerialNumber(void * jarg1, unsigned int jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setStreamSerialNumber(arg2);
}


SWIGEXPORT int D_TagLib_Ogg_PageHeader_pageSequenceNumber(void * jarg1) {
  int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (int)((TagLib::Ogg::PageHeader const *)arg1)->pageSequenceNumber();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_PageHeader_setPageSequenceNumber(void * jarg1, int jarg2) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->setPageSequenceNumber(arg2);
}


SWIGEXPORT int D_TagLib_Ogg_PageHeader_size(void * jarg1) {
  int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (int)((TagLib::Ogg::PageHeader const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Ogg_PageHeader_dataSize(void * jarg1) {
  int jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = (int)((TagLib::Ogg::PageHeader const *)arg1)->dataSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_PageHeader_render(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::Ogg::PageHeader *)jarg1;
  result = ((TagLib::Ogg::PageHeader const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_XiphComment__SWIG_0() {
  void * jresult ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  result = (TagLib::Ogg::XiphComment *)new TagLib::Ogg::XiphComment();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_XiphComment__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  result = (TagLib::Ogg::XiphComment *)new TagLib::Ogg::XiphComment((TagLib::ByteVector const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Ogg_XiphComment(void * jarg1) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  delete arg1;
}


SWIGEXPORT char* D_TagLib_Ogg_XiphComment_title__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->title();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Ogg_XiphComment_artist__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->artist();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Ogg_XiphComment_album__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->album();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Ogg_XiphComment_comment__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->comment();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT char* D_TagLib_Ogg_XiphComment_genre__SWIG_0(void * jarg1) {
  char* jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->genre();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_XiphComment_year__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = (TagLib::uint)((TagLib::Ogg::XiphComment const *)arg1)->year();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_XiphComment_track__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = (TagLib::uint)((TagLib::Ogg::XiphComment const *)arg1)->track();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_title__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setTitle((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_artist__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setArtist((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_album__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setAlbum((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_comment__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setComment((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_genre__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->setGenre((TagLib::String const &)*arg2);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_year__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setYear(arg2);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_track__SWIG_1(void * jarg1, unsigned int jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::uint arg2 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  (arg1)->setTrack(arg2);
}


SWIGEXPORT unsigned int D_TagLib_Ogg_XiphComment_isEmpty(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = (bool)((TagLib::Ogg::XiphComment const *)arg1)->isEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_XiphComment_fieldCount(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::uint result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = (TagLib::uint)((TagLib::Ogg::XiphComment const *)arg1)->fieldCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_XiphComment_fieldListMap(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::Ogg::FieldListMap *result = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = (TagLib::Ogg::FieldListMap *) &((TagLib::Ogg::XiphComment const *)arg1)->fieldListMap();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char* D_TagLib_Ogg_XiphComment_vendorID(void * jarg1) {
  char* jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->vendorID();
  {
    std::string buffer = (&result)->to8Bit(true);
    jresult = (char*)malloc(buffer.size() + 1);
    strcpy(jresult, buffer.c_str());
  }
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_addField__SWIG_0(void * jarg1, char* jarg2, char* jarg3, unsigned int jarg4) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  {
    arg3 = &TagLib::String(jarg3, TagLib::String::UTF8);
  }
  arg4 = jarg4 ? true : false;
  (arg1)->addField((TagLib::String const &)*arg2,(TagLib::String const &)*arg3,arg4);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_addField__SWIG_1(void * jarg1, char* jarg2, char* jarg3) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  {
    arg3 = &TagLib::String(jarg3, TagLib::String::UTF8);
  }
  (arg1)->addField((TagLib::String const &)*arg2,(TagLib::String const &)*arg3);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_removeField__SWIG_0(void * jarg1, char* jarg2, char* jarg3) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  {
    arg3 = &TagLib::String(jarg3, TagLib::String::UTF8);
  }
  (arg1)->removeField((TagLib::String const &)*arg2,(TagLib::String const &)*arg3);
}


SWIGEXPORT void D_TagLib_Ogg_XiphComment_removeField__SWIG_1(void * jarg1, char* jarg2) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  (arg1)->removeField((TagLib::String const &)*arg2);
}


SWIGEXPORT unsigned int D_TagLib_Ogg_XiphComment_contains(void * jarg1, char* jarg2) {
  unsigned int jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  {
    arg2 = &TagLib::String(jarg2, TagLib::String::UTF8);
  }
  result = (bool)((TagLib::Ogg::XiphComment const *)arg1)->contains((TagLib::String const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_XiphComment_render__SWIG_0(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->render();
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_XiphComment_render__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  bool arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::Ogg::XiphComment *)jarg1;
  arg2 = jarg2 ? true : false;
  result = ((TagLib::Ogg::XiphComment const *)arg1)->render(arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Ogg_File(void * jarg1) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_Ogg_File_packet(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ByteVector result;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  result = (arg1)->packet(arg2);
  jresult = new TagLib::ByteVector((const TagLib::ByteVector &)result); 
  return jresult;
}


SWIGEXPORT void D_TagLib_Ogg_File_setPacket(void * jarg1, unsigned int jarg2, void * jarg3) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::uint arg2 ;
  TagLib::ByteVector *arg3 = 0 ;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  arg2 = (TagLib::uint)jarg2;
  arg3 = (TagLib::ByteVector *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return ;
  } 
  (arg1)->setPacket(arg2,(TagLib::ByteVector const &)*arg3);
}


SWIGEXPORT void * D_TagLib_Ogg_File_firstPageHeader(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  result = (TagLib::Ogg::PageHeader *)(arg1)->firstPageHeader();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_File_lastPageHeader(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  result = (TagLib::Ogg::PageHeader *)(arg1)->lastPageHeader();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_FLAC_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::Ogg::FLAC::Properties::ReadStyle arg3 ;
  TagLib::Ogg::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::Ogg::FLAC::Properties::ReadStyle)jarg3; 
  result = (TagLib::Ogg::FLAC::File *)new TagLib::Ogg::FLAC::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_FLAC_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::Ogg::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::Ogg::FLAC::File *)new TagLib::Ogg::FLAC::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_FLAC_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::Ogg::FLAC::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::Ogg::FLAC::File *)new TagLib::Ogg::FLAC::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Ogg_FLAC_File(void * jarg1) {
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  
  arg1 = (TagLib::Ogg::FLAC::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_Ogg_FLAC_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  arg1 = (TagLib::Ogg::FLAC::File *)jarg1;
  result = (TagLib::Ogg::XiphComment *)((TagLib::Ogg::FLAC::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_FLAC_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  TagLib::Ogg::FLAC::Properties *result = 0 ;
  
  arg1 = (TagLib::Ogg::FLAC::File *)jarg1;
  result = (TagLib::Ogg::FLAC::Properties *)((TagLib::Ogg::FLAC::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_FLAC_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::FLAC::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT long D_TagLib_Ogg_FLAC_File_streamLength(void * jarg1) {
  long jresult ;
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  long result;
  
  arg1 = (TagLib::Ogg::FLAC::File *)jarg1;
  result = (long)(arg1)->streamLength();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_Speex_Properties__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::Ogg::Speex::Properties *result = 0 ;
  
  arg1 = (TagLib::Ogg::Speex::File *)jarg1;
  arg2 = (TagLib::AudioProperties::ReadStyle)jarg2; 
  result = (TagLib::Ogg::Speex::Properties *)new TagLib::Ogg::Speex::Properties(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_Speex_Properties__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::Ogg::Speex::Properties *result = 0 ;
  
  arg1 = (TagLib::Ogg::Speex::File *)jarg1;
  result = (TagLib::Ogg::Speex::Properties *)new TagLib::Ogg::Speex::Properties(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Ogg_Speex_Properties(void * jarg1) {
  TagLib::Ogg::Speex::Properties *arg1 = (TagLib::Ogg::Speex::Properties *) 0 ;
  
  arg1 = (TagLib::Ogg::Speex::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_Ogg_Speex_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::Ogg::Speex::Properties *arg1 = (TagLib::Ogg::Speex::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::Speex::Properties *)jarg1;
  result = (int)((TagLib::Ogg::Speex::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Ogg_Speex_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::Ogg::Speex::Properties *arg1 = (TagLib::Ogg::Speex::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::Speex::Properties *)jarg1;
  result = (int)((TagLib::Ogg::Speex::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Ogg_Speex_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::Ogg::Speex::Properties *arg1 = (TagLib::Ogg::Speex::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::Speex::Properties *)jarg1;
  result = (int)((TagLib::Ogg::Speex::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Ogg_Speex_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::Ogg::Speex::Properties *arg1 = (TagLib::Ogg::Speex::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::Speex::Properties *)jarg1;
  result = (int)((TagLib::Ogg::Speex::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Ogg_Speex_Properties_speexVersion(void * jarg1) {
  int jresult ;
  TagLib::Ogg::Speex::Properties *arg1 = (TagLib::Ogg::Speex::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Ogg::Speex::Properties *)jarg1;
  result = (int)((TagLib::Ogg::Speex::Properties const *)arg1)->speexVersion();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_Speex_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::Ogg::Speex::Properties::ReadStyle arg3 ;
  TagLib::Ogg::Speex::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::Ogg::Speex::Properties::ReadStyle)jarg3; 
  result = (TagLib::Ogg::Speex::File *)new TagLib::Ogg::Speex::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_Speex_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::Ogg::Speex::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::Ogg::Speex::File *)new TagLib::Ogg::Speex::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Ogg_Speex_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::Ogg::Speex::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::Ogg::Speex::File *)new TagLib::Ogg::Speex::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Ogg_Speex_File(void * jarg1) {
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  
  arg1 = (TagLib::Ogg::Speex::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_Ogg_Speex_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  arg1 = (TagLib::Ogg::Speex::File *)jarg1;
  result = (TagLib::Ogg::XiphComment *)((TagLib::Ogg::Speex::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Ogg_Speex_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::Ogg::Speex::Properties *result = 0 ;
  
  arg1 = (TagLib::Ogg::Speex::File *)jarg1;
  result = (TagLib::Ogg::Speex::Properties *)((TagLib::Ogg::Speex::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Ogg_Speex_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::Ogg::Speex::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Vorbis_Properties__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::Vorbis::Properties *result = 0 ;
  
  arg1 = (TagLib::Vorbis::File *)jarg1;
  arg2 = (TagLib::AudioProperties::ReadStyle)jarg2; 
  result = (TagLib::Vorbis::Properties *)new TagLib::Vorbis::Properties(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Vorbis_Properties__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::Vorbis::Properties *result = 0 ;
  
  arg1 = (TagLib::Vorbis::File *)jarg1;
  result = (TagLib::Vorbis::Properties *)new TagLib::Vorbis::Properties(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Vorbis_Properties(void * jarg1) {
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_vorbisVersion(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->vorbisVersion();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_bitrateMaximum(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->bitrateMaximum();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_bitrateNominal(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->bitrateNominal();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_Vorbis_Properties_bitrateMinimum(void * jarg1) {
  int jresult ;
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::Vorbis::Properties *)jarg1;
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->bitrateMinimum();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Vorbis_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::Vorbis::Properties::ReadStyle arg3 ;
  TagLib::Vorbis::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::Vorbis::Properties::ReadStyle)jarg3; 
  result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Vorbis_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::Vorbis::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_Vorbis_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::Vorbis::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_Vorbis_File(void * jarg1) {
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  
  arg1 = (TagLib::Vorbis::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_Vorbis_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  arg1 = (TagLib::Vorbis::File *)jarg1;
  result = (TagLib::Ogg::XiphComment *)((TagLib::Vorbis::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_Vorbis_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::Vorbis::Properties *result = 0 ;
  
  arg1 = (TagLib::Vorbis::File *)jarg1;
  result = (TagLib::Vorbis::Properties *)((TagLib::Vorbis::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_Vorbis_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::Vorbis::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_RIFF_File(void * jarg1) {
  TagLib::RIFF::File *arg1 = (TagLib::RIFF::File *) 0 ;
  
  arg1 = (TagLib::RIFF::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_TagLib_RIFF_AIFF_Properties(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::RIFF::AIFF::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (TagLib::AudioProperties::ReadStyle)jarg2; 
  result = (TagLib::RIFF::AIFF::Properties *)new TagLib::RIFF::AIFF::Properties((TagLib::ByteVector const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_RIFF_AIFF_Properties(void * jarg1) {
  TagLib::RIFF::AIFF::Properties *arg1 = (TagLib::RIFF::AIFF::Properties *) 0 ;
  
  arg1 = (TagLib::RIFF::AIFF::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_RIFF_AIFF_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::RIFF::AIFF::Properties *arg1 = (TagLib::RIFF::AIFF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::AIFF::Properties *)jarg1;
  result = (int)((TagLib::RIFF::AIFF::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_RIFF_AIFF_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::RIFF::AIFF::Properties *arg1 = (TagLib::RIFF::AIFF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::AIFF::Properties *)jarg1;
  result = (int)((TagLib::RIFF::AIFF::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_RIFF_AIFF_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::RIFF::AIFF::Properties *arg1 = (TagLib::RIFF::AIFF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::AIFF::Properties *)jarg1;
  result = (int)((TagLib::RIFF::AIFF::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_RIFF_AIFF_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::RIFF::AIFF::Properties *arg1 = (TagLib::RIFF::AIFF::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::AIFF::Properties *)jarg1;
  result = (int)((TagLib::RIFF::AIFF::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_RIFF_AIFF_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::RIFF::AIFF::Properties::ReadStyle arg3 ;
  TagLib::RIFF::AIFF::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::RIFF::AIFF::Properties::ReadStyle)jarg3; 
  result = (TagLib::RIFF::AIFF::File *)new TagLib::RIFF::AIFF::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_RIFF_AIFF_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::RIFF::AIFF::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::RIFF::AIFF::File *)new TagLib::RIFF::AIFF::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_RIFF_AIFF_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::RIFF::AIFF::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::RIFF::AIFF::File *)new TagLib::RIFF::AIFF::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_RIFF_AIFF_File(void * jarg1) {
  TagLib::RIFF::AIFF::File *arg1 = (TagLib::RIFF::AIFF::File *) 0 ;
  
  arg1 = (TagLib::RIFF::AIFF::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_RIFF_AIFF_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::RIFF::AIFF::File *arg1 = (TagLib::RIFF::AIFF::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::RIFF::AIFF::File *)jarg1;
  result = (TagLib::ID3v2::Tag *)((TagLib::RIFF::AIFF::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_RIFF_AIFF_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::RIFF::AIFF::File *arg1 = (TagLib::RIFF::AIFF::File *) 0 ;
  TagLib::RIFF::AIFF::Properties *result = 0 ;
  
  arg1 = (TagLib::RIFF::AIFF::File *)jarg1;
  result = (TagLib::RIFF::AIFF::Properties *)((TagLib::RIFF::AIFF::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_RIFF_AIFF_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::RIFF::AIFF::File *arg1 = (TagLib::RIFF::AIFF::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::RIFF::AIFF::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_RIFF_WAV_Properties(void * jarg1, int jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::RIFF::WAV::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (TagLib::AudioProperties::ReadStyle)jarg2; 
  result = (TagLib::RIFF::WAV::Properties *)new TagLib::RIFF::WAV::Properties((TagLib::ByteVector const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_RIFF_WAV_Properties(void * jarg1) {
  TagLib::RIFF::WAV::Properties *arg1 = (TagLib::RIFF::WAV::Properties *) 0 ;
  
  arg1 = (TagLib::RIFF::WAV::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_RIFF_WAV_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::RIFF::WAV::Properties *arg1 = (TagLib::RIFF::WAV::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::WAV::Properties *)jarg1;
  result = (int)((TagLib::RIFF::WAV::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_RIFF_WAV_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::RIFF::WAV::Properties *arg1 = (TagLib::RIFF::WAV::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::WAV::Properties *)jarg1;
  result = (int)((TagLib::RIFF::WAV::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_RIFF_WAV_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::RIFF::WAV::Properties *arg1 = (TagLib::RIFF::WAV::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::WAV::Properties *)jarg1;
  result = (int)((TagLib::RIFF::WAV::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_RIFF_WAV_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::RIFF::WAV::Properties *arg1 = (TagLib::RIFF::WAV::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::RIFF::WAV::Properties *)jarg1;
  result = (int)((TagLib::RIFF::WAV::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_RIFF_WAV_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::RIFF::WAV::Properties::ReadStyle arg3 ;
  TagLib::RIFF::WAV::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::RIFF::WAV::Properties::ReadStyle)jarg3; 
  result = (TagLib::RIFF::WAV::File *)new TagLib::RIFF::WAV::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_RIFF_WAV_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::RIFF::WAV::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::RIFF::WAV::File *)new TagLib::RIFF::WAV::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_RIFF_WAV_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::RIFF::WAV::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::RIFF::WAV::File *)new TagLib::RIFF::WAV::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_RIFF_WAV_File(void * jarg1) {
  TagLib::RIFF::WAV::File *arg1 = (TagLib::RIFF::WAV::File *) 0 ;
  
  arg1 = (TagLib::RIFF::WAV::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_RIFF_WAV_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::RIFF::WAV::File *arg1 = (TagLib::RIFF::WAV::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::RIFF::WAV::File *)jarg1;
  result = (TagLib::ID3v2::Tag *)((TagLib::RIFF::WAV::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_RIFF_WAV_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::RIFF::WAV::File *arg1 = (TagLib::RIFF::WAV::File *) 0 ;
  TagLib::RIFF::WAV::Properties *result = 0 ;
  
  arg1 = (TagLib::RIFF::WAV::File *)jarg1;
  result = (TagLib::RIFF::WAV::Properties *)((TagLib::RIFF::WAV::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_RIFF_WAV_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::RIFF::WAV::File *arg1 = (TagLib::RIFF::WAV::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::RIFF::WAV::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_Properties__SWIG_0(void * jarg1, long jarg2, int jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::TrueAudio::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (long)jarg2;
  arg3 = (TagLib::AudioProperties::ReadStyle)jarg3; 
  result = (TagLib::TrueAudio::Properties *)new TagLib::TrueAudio::Properties((TagLib::ByteVector const &)*arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_Properties__SWIG_1(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::TrueAudio::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (long)jarg2;
  result = (TagLib::TrueAudio::Properties *)new TagLib::TrueAudio::Properties((TagLib::ByteVector const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_TrueAudio_Properties(void * jarg1) {
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  
  arg1 = (TagLib::TrueAudio::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_TrueAudio_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::TrueAudio::Properties *)jarg1;
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_TrueAudio_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::TrueAudio::Properties *)jarg1;
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_TrueAudio_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::TrueAudio::Properties *)jarg1;
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_TrueAudio_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::TrueAudio::Properties *)jarg1;
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_TrueAudio_Properties_bitsPerSample(void * jarg1) {
  int jresult ;
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::TrueAudio::Properties *)jarg1;
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->bitsPerSample();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_TrueAudio_Properties_ttaVersion(void * jarg1) {
  int jresult ;
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::TrueAudio::Properties *)jarg1;
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->ttaVersion();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::TrueAudio::Properties::ReadStyle arg3 ;
  TagLib::TrueAudio::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::TrueAudio::Properties::ReadStyle)jarg3; 
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::TrueAudio::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::TrueAudio::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_File__SWIG_3(const char* jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::TrueAudio::Properties::ReadStyle arg4 ;
  TagLib::TrueAudio::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  arg3 = jarg3 ? true : false;
  arg4 = (TagLib::TrueAudio::Properties::ReadStyle)jarg4; 
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_File__SWIG_4(const char* jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::TrueAudio::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  arg3 = jarg3 ? true : false;
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_TrueAudio_File__SWIG_5(const char* jarg1, void * jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::TrueAudio::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_TrueAudio_File(void * jarg1) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_TrueAudio_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::TrueAudio::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_TrueAudio_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::TrueAudio::Properties *result = 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  result = (TagLib::TrueAudio::Properties *)((TagLib::TrueAudio::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_TrueAudio_File_setID3v2FrameFactory(void * jarg1, void * jarg2) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  arg2 = (TagLib::ID3v2::FrameFactory *)jarg2;
  (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
}


SWIGEXPORT unsigned int D_TagLib_TrueAudio_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_TrueAudio_File_ID3v1Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_TrueAudio_File_ID3v1Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_TrueAudio_File_ID3v2Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_TrueAudio_File_ID3v2Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_TrueAudio_File_strip__SWIG_0(void * jarg1, int jarg2) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->strip(arg2);
}


SWIGEXPORT void D_TagLib_TrueAudio_File_strip__SWIG_1(void * jarg1) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  
  arg1 = (TagLib::TrueAudio::File *)jarg1;
  (arg1)->strip();
}


SWIGEXPORT void * D_new_TagLib_WavPack_Properties__SWIG_0(void * jarg1, long jarg2, int jarg3) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::WavPack::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (long)jarg2;
  arg3 = (TagLib::AudioProperties::ReadStyle)jarg3; 
  result = (TagLib::WavPack::Properties *)new TagLib::WavPack::Properties((TagLib::ByteVector const &)*arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_WavPack_Properties__SWIG_1(void * jarg1, long jarg2) {
  void * jresult ;
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::WavPack::Properties *result = 0 ;
  
  arg1 = (TagLib::ByteVector *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "TagLib::ByteVector const & type is null");
    return 0;
  } 
  arg2 = (long)jarg2;
  result = (TagLib::WavPack::Properties *)new TagLib::WavPack::Properties((TagLib::ByteVector const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_WavPack_Properties(void * jarg1) {
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  
  arg1 = (TagLib::WavPack::Properties *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_TagLib_WavPack_Properties_length(void * jarg1) {
  int jresult ;
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::WavPack::Properties *)jarg1;
  result = (int)((TagLib::WavPack::Properties const *)arg1)->length();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_WavPack_Properties_bitrate(void * jarg1) {
  int jresult ;
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::WavPack::Properties *)jarg1;
  result = (int)((TagLib::WavPack::Properties const *)arg1)->bitrate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_WavPack_Properties_sampleRate(void * jarg1) {
  int jresult ;
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::WavPack::Properties *)jarg1;
  result = (int)((TagLib::WavPack::Properties const *)arg1)->sampleRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_WavPack_Properties_channels(void * jarg1) {
  int jresult ;
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::WavPack::Properties *)jarg1;
  result = (int)((TagLib::WavPack::Properties const *)arg1)->channels();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_WavPack_Properties_bitsPerSample(void * jarg1) {
  int jresult ;
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::WavPack::Properties *)jarg1;
  result = (int)((TagLib::WavPack::Properties const *)arg1)->bitsPerSample();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_TagLib_WavPack_Properties__version(void * jarg1) {
  int jresult ;
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  
  arg1 = (TagLib::WavPack::Properties *)jarg1;
  result = (int)((TagLib::WavPack::Properties const *)arg1)->version();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_WavPack_File__SWIG_0(const char* jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::WavPack::Properties::ReadStyle arg3 ;
  TagLib::WavPack::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  arg3 = (TagLib::WavPack::Properties::ReadStyle)jarg3; 
  result = (TagLib::WavPack::File *)new TagLib::WavPack::File(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_WavPack_File__SWIG_1(const char* jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  bool arg2 ;
  TagLib::WavPack::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (TagLib::WavPack::File *)new TagLib::WavPack::File(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_TagLib_WavPack_File__SWIG_2(const char* jarg1) {
  void * jresult ;
  TagLib::FileName arg1 = (TagLib::FileName) 0 ;
  TagLib::WavPack::File *result = 0 ;
  
  arg1 = (TagLib::FileName)jarg1; 
  result = (TagLib::WavPack::File *)new TagLib::WavPack::File(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TagLib_WavPack_File(void * jarg1) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_TagLib_WavPack_File_tag(void * jarg1) {
  void * jresult ;
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  TagLib::Tag *result = 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  result = (TagLib::Tag *)((TagLib::WavPack::File const *)arg1)->tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_WavPack_File_audioProperties(void * jarg1) {
  void * jresult ;
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  TagLib::WavPack::Properties *result = 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  result = (TagLib::WavPack::Properties *)((TagLib::WavPack::File const *)arg1)->audioProperties();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TagLib_WavPack_File_save(void * jarg1) {
  unsigned int jresult ;
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  bool result;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  result = (bool)(arg1)->save();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_WavPack_File_ID3v1Tag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_WavPack_File_ID3v1Tag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_WavPack_File_APETag__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  bool arg2 ;
  TagLib::APE::Tag *result = 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  arg2 = jarg2 ? true : false;
  result = (TagLib::APE::Tag *)(arg1)->APETag(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_TagLib_WavPack_File_APETag__SWIG_1(void * jarg1) {
  void * jresult ;
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  TagLib::APE::Tag *result = 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  result = (TagLib::APE::Tag *)(arg1)->APETag();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_TagLib_WavPack_File_strip__SWIG_0(void * jarg1, int jarg2) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  int arg2 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->strip(arg2);
}


SWIGEXPORT void D_TagLib_WavPack_File_strip__SWIG_1(void * jarg1) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  
  arg1 = (TagLib::WavPack::File *)jarg1;
  (arg1)->strip();
}


SWIGEXPORT TagLib::List< TagLib::ByteVector > * D_TagLib_ByteVectorList_Upcast(TagLib::List< TagLib::ByteVector > *objectRef) {
    return (TagLib::List< TagLib::ByteVector > *)objectRef;
}

SWIGEXPORT TagLib::List< TagLib::String > * D_TagLib_StringList_Upcast(TagLib::List< TagLib::String > *objectRef) {
    return (TagLib::List< TagLib::String > *)objectRef;
}

SWIGEXPORT TagLib::Tag * D_TagLib_APE_Tag_Upcast(TagLib::Tag *objectRef) {
    return (TagLib::Tag *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_ASF_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_ASF_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::Tag * D_TagLib_ASF_Tag_Upcast(TagLib::Tag *objectRef) {
    return (TagLib::Tag *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_FLAC_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_FLAC_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::Tag * D_TagLib_ID3v1_Tag_Upcast(TagLib::Tag *objectRef) {
    return (TagLib::Tag *)objectRef;
}

SWIGEXPORT TagLib::Tag * D_TagLib_ID3v2_Tag_Upcast(TagLib::Tag *objectRef) {
    return (TagLib::Tag *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_AttachedPictureFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::AttachedPictureFrame * D_TagLib_ID3v2_AttachedPictureFrameV22_Upcast(TagLib::ID3v2::AttachedPictureFrame *objectRef) {
    return (TagLib::ID3v2::AttachedPictureFrame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_CommentsFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_GeneralEncapsulatedObjectFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_PopularimeterFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_PrivateFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_RelativeVolumeFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_TextIdentificationFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::TextIdentificationFrame * D_TagLib_ID3v2_UserTextIdentificationFrame_Upcast(TagLib::ID3v2::TextIdentificationFrame *objectRef) {
    return (TagLib::ID3v2::TextIdentificationFrame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_UniqueFileIdentifierFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_UnsynchronizedLyricsFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::Frame * D_TagLib_ID3v2_UrlLinkFrame_Upcast(TagLib::ID3v2::Frame *objectRef) {
    return (TagLib::ID3v2::Frame *)objectRef;
}

SWIGEXPORT TagLib::ID3v2::UrlLinkFrame * D_TagLib_ID3v2_UserUrlLinkFrame_Upcast(TagLib::ID3v2::UrlLinkFrame *objectRef) {
    return (TagLib::ID3v2::UrlLinkFrame *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_MP4_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_MP4_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::Tag * D_TagLib_MP4_Tag_Upcast(TagLib::Tag *objectRef) {
    return (TagLib::Tag *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_MPC_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_MPC_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_MPEG_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_MPEG_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::Tag * D_TagLib_Ogg_XiphComment_Upcast(TagLib::Tag *objectRef) {
    return (TagLib::Tag *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_Ogg_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::Ogg::File * D_TagLib_Ogg_FLAC_File_Upcast(TagLib::Ogg::File *objectRef) {
    return (TagLib::Ogg::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_Ogg_Speex_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::Ogg::File * D_TagLib_Ogg_Speex_File_Upcast(TagLib::Ogg::File *objectRef) {
    return (TagLib::Ogg::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_Vorbis_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::Ogg::File * D_TagLib_Vorbis_File_Upcast(TagLib::Ogg::File *objectRef) {
    return (TagLib::Ogg::File *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_RIFF_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_RIFF_AIFF_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::RIFF::File * D_TagLib_RIFF_AIFF_File_Upcast(TagLib::RIFF::File *objectRef) {
    return (TagLib::RIFF::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_RIFF_WAV_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::RIFF::File * D_TagLib_RIFF_WAV_File_Upcast(TagLib::RIFF::File *objectRef) {
    return (TagLib::RIFF::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_TrueAudio_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_TrueAudio_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

SWIGEXPORT TagLib::AudioProperties * D_TagLib_WavPack_Properties_Upcast(TagLib::AudioProperties *objectRef) {
    return (TagLib::AudioProperties *)objectRef;
}

SWIGEXPORT TagLib::File * D_TagLib_WavPack_File_Upcast(TagLib::File *objectRef) {
    return (TagLib::File *)objectRef;
}

#ifdef __cplusplus
}
#endif

